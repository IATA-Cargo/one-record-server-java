
package org.iata.cargo;

import org.semanticweb.owlapi.model.IRI;


/**
 * This class was generated by OWL2Java 0.13.3
 * 
 */
public class Vocabulary {

    public final static String ONTOLOGY_IRI_ = "http://cargo.iata.org/";
    public final static String ONTOLOGY_IRI_cargo_dot_iata_dot_org_generated = "http://cargo.iata.org-generated";
    public final static String s_c_Thing = "http://www.w3.org/2002/07/owl#Thing";
    public final static IRI c_Thing = IRI.create(s_c_Thing);
    /**
     * Address details
     * 
     */
    public final static String s_c_Address = "http://cargo.iata.org/Address";
    public final static IRI c_Address = IRI.create(s_c_Address);
    /**
     * Air Waybill details
     * 
     */
    public final static String s_c_AirWaybill = "http://cargo.iata.org/AirWaybill";
    public final static IRI c_AirWaybill = IRI.create(s_c_AirWaybill);
    /**
     * Booking details
     * 
     */
    public final static String s_c_Booking = "http://cargo.iata.org/Booking";
    public final static IRI c_Booking = IRI.create(s_c_Booking);
    /**
     * Booking status details
     * 
     */
    public final static String s_c_BookingStatus = "http://cargo.iata.org/BookingStatus";
    public final static IRI c_BookingStatus = IRI.create(s_c_BookingStatus);
    /**
     * Company branches
     * 
     */
    public final static String s_c_Branch = "http://cargo.iata.org/Branch";
    public final static IRI c_Branch = IRI.create(s_c_Branch);
    /**
     * Carriage value declaration
     * 
     */
    public final static String s_c_Carriage = "http://cargo.iata.org/Carriage";
    public final static IRI c_Carriage = IRI.create(s_c_Carriage);
    /**
     * Carrier signature details
     * 
     */
    public final static String s_c_CarrierSignature = "http://cargo.iata.org/CarrierSignature";
    public final static IRI c_CarrierSignature = IRI.create(s_c_CarrierSignature);
    /**
     * Product additional details
     * 
     */
    public final static String s_c_Characteristic = "http://cargo.iata.org/Characteristic";
    public final static IRI c_Characteristic = IRI.create(s_c_Characteristic);
    /**
     * Goods value declaration details
     * 
     */
    public final static String s_c_ChargeDeclaration = "http://cargo.iata.org/ChargeDeclaration";
    public final static IRI c_ChargeDeclaration = IRI.create(s_c_ChargeDeclaration);
    /**
     * Other charge description details
     * 
     */
    public final static String s_c_ChargeDescription = "http://cargo.iata.org/ChargeDescription";
    public final static IRI c_ChargeDescription = IRI.create(s_c_ChargeDescription);
    /**
     * Charge payment details
     * 
     */
    public final static String s_c_ChargePayment = "http://cargo.iata.org/ChargePayment";
    public final static IRI c_ChargePayment = IRI.create(s_c_ChargePayment);
    /**
     * Charge summary details
     * 
     */
    public final static String s_c_ChargeSummary = "http://cargo.iata.org/ChargeSummary";
    public final static IRI c_ChargeSummary = IRI.create(s_c_ChargeSummary);
    /**
     * Collect totals in base / origin currency
     * 
     */
    public final static String s_c_Collect = "http://cargo.iata.org/Collect";
    public final static IRI c_Collect = IRI.create(s_c_Collect);
    /**
     * Commodity details
     * 
     */
    public final static String s_c_Commodity = "http://cargo.iata.org/Commodity";
    public final static IRI c_Commodity = IRI.create(s_c_Commodity);
    /**
     * Company details
     * 
     */
    public final static String s_c_Company = "http://cargo.iata.org/Company";
    public final static IRI c_Company = IRI.create(s_c_Company);
    /**
     * Contact details
     * 
     */
    public final static String s_c_Contact = "http://cargo.iata.org/Contact";
    public final static IRI c_Contact = IRI.create(s_c_Contact);
    /**
     * Country details
     * 
     */
    public final static String s_c_Country = "http://cargo.iata.org/Country";
    public final static IRI c_Country = IRI.create(s_c_Country);
    /**
     * Customs value declaration
     * 
     */
    public final static String s_c_Customs = "http://cargo.iata.org/Customs";
    public final static IRI c_Customs = IRI.create(s_c_Customs);
    /**
     * Customs information details
     * 
     */
    public final static String s_c_CustomsInfo = "http://cargo.iata.org/CustomsInfo";
    public final static IRI c_CustomsInfo = IRI.create(s_c_CustomsInfo);
    /**
     * Dimension details
     * 
     */
    public final static String s_c_Dimensions = "http://cargo.iata.org/Dimensions";
    public final static IRI c_Dimensions = IRI.create(s_c_Dimensions);
    /**
     * Event details
     * 
     */
    public final static String s_c_Event = "http://cargo.iata.org/Event";
    public final static IRI c_Event = IRI.create(s_c_Event);
    /**
     * Reference documents details
     * 
     */
    public final static String s_c_ExternalReference = "http://cargo.iata.org/ExternalReference";
    public final static IRI c_ExternalReference = IRI.create(s_c_ExternalReference);
    /**
     * Geolocation details - e.g. for drones, automated vehicles...
     * 
     */
    public final static String s_c_Geolocation = "http://cargo.iata.org/Geolocation";
    public final static IRI c_Geolocation = IRI.create(s_c_Geolocation);
    /**
     * Handling details
     * 
     */
    public final static String s_c_Handling = "http://cargo.iata.org/Handling";
    public final static IRI c_Handling = IRI.create(s_c_Handling);
    /**
     * House Waybill details
     * 
     */
    public final static String s_c_HouseWaybill = "http://cargo.iata.org/HouseWaybill";
    public final static IRI c_HouseWaybill = IRI.create(s_c_HouseWaybill);
    /**
     * Collect totals in target / destination currency
     * 
     */
    public final static String s_c_InDestinationCurrency = "http://cargo.iata.org/InDestinationCurrency";
    public final static IRI c_InDestinationCurrency = IRI.create(s_c_InDestinationCurrency);
    /**
     * Insurance details
     * 
     */
    public final static String s_c_Insurance = "http://cargo.iata.org/Insurance";
    public final static IRI c_Insurance = IRI.create(s_c_Insurance);
    /**
     * Item details
     * 
     */
    public final static String s_c_Item = "http://cargo.iata.org/Item";
    public final static IRI c_Item = IRI.create(s_c_Item);
    /**
     * Loading location details
     * 
     */
    public final static String s_c_Location = "http://cargo.iata.org/Location";
    public final static IRI c_Location = IRI.create(s_c_Location);
    /**
     * Other contact options e.g. Skype, Whatsapp, Viber, Fax etc
     * 
     */
    public final static String s_c_Other = "http://cargo.iata.org/Other";
    public final static IRI c_Other = IRI.create(s_c_Other);
    /**
     * Other charge details
     * 
     */
    public final static String s_c_OtherCharge = "http://cargo.iata.org/OtherCharge";
    public final static IRI c_OtherCharge = IRI.create(s_c_OtherCharge);
    /**
     * Other customs information details
     * 
     */
    public final static String s_c_OtherCustomsInformation = "http://cargo.iata.org/OtherCustomsInformation";
    public final static IRI c_OtherCustomsInformation = IRI.create(s_c_OtherCustomsInformation);
    /**
     * Other identifiers
     * 
     */
    public final static String s_c_OtherIdentifier = "http://cargo.iata.org/OtherIdentifier";
    public final static IRI c_OtherIdentifier = IRI.create(s_c_OtherIdentifier);
    /**
     * Company details
     * 
     */
    public final static String s_c_OtherParty = "http://cargo.iata.org/OtherParty";
    public final static IRI c_OtherParty = IRI.create(s_c_OtherParty);
    /**
     * Packaging details 
     * 
     */
    public final static String s_c_PackagingType = "http://cargo.iata.org/PackagingType";
    public final static IRI c_PackagingType = IRI.create(s_c_PackagingType);
    /**
     * Person details
     * 
     */
    public final static String s_c_Person = "http://cargo.iata.org/Person";
    public final static IRI c_Person = IRI.create(s_c_Person);
    /**
     * Individual piece / package / pallet / ULD details
     * 
     */
    public final static String s_c_Piece = "http://cargo.iata.org/Piece";
    public final static IRI c_Piece = IRI.create(s_c_Piece);
    /**
     * Grouping of individual pieces or logistics components
     * 
     */
    public final static String s_c_PieceGrouping = "http://cargo.iata.org/PieceGrouping";
    public final static IRI c_PieceGrouping = IRI.create(s_c_PieceGrouping);
    /**
     * Prepaid totals in base / origin currency
     * 
     */
    public final static String s_c_Prepaid = "http://cargo.iata.org/Prepaid";
    public final static IRI c_Prepaid = IRI.create(s_c_Prepaid);
    /**
     * Product price details
     * 
     */
    public final static String s_c_Price = "http://cargo.iata.org/Price";
    public final static IRI c_Price = IRI.create(s_c_Price);
    /**
     * Product details
     * 
     */
    public final static String s_c_Product = "http://cargo.iata.org/Product";
    public final static IRI c_Product = IRI.create(s_c_Product);
    /**
     * Production batch and lot details
     * 
     */
    public final static String s_c_Production = "http://cargo.iata.org/Production";
    public final static IRI c_Production = IRI.create(s_c_Production);
    /**
     * Rating details
     * 
     */
    public final static String s_c_Rating = "http://cargo.iata.org/Rating";
    public final static IRI c_Rating = IRI.create(s_c_Rating);
    /**
     * Security status details
     * 
     */
    public final static String s_c_ReasonsForSecurityStatus = "http://cargo.iata.org/ReasonsForSecurityStatus";
    public final static IRI c_ReasonsForSecurityStatus = IRI.create(s_c_ReasonsForSecurityStatus);
    /**
     * Known Consignor or Regulated Agent reference
     * 
     */
    public final static String s_c_ReceivedFrom = "http://cargo.iata.org/ReceivedFrom";
    public final static IRI c_ReceivedFrom = IRI.create(s_c_ReceivedFrom);
    /**
     * Security information details
     * 
     */
    public final static String s_c_SecurityInfo = "http://cargo.iata.org/SecurityInfo";
    public final static IRI c_SecurityInfo = IRI.create(s_c_SecurityInfo);
    /**
     * Security status details
     * 
     */
    public final static String s_c_SecurityStatus = "http://cargo.iata.org/SecurityStatus";
    public final static IRI c_SecurityStatus = IRI.create(s_c_SecurityStatus);
    /**
     * Service request details
     * 
     */
    public final static String s_c_ServiceRequest = "http://cargo.iata.org/ServiceRequest";
    public final static IRI c_ServiceRequest = IRI.create(s_c_ServiceRequest);
    /**
     * Shipment details
     * 
     */
    public final static String s_c_Shipment = "http://cargo.iata.org/Shipment";
    public final static IRI c_Shipment = IRI.create(s_c_Shipment);
    /**
     * Shipper signature details
     * 
     */
    public final static String s_c_ShipperSignature = "http://cargo.iata.org/ShipperSignature";
    public final static IRI c_ShipperSignature = IRI.create(s_c_ShipperSignature);
    /**
     * Special handling details
     * 
     */
    public final static String s_c_SpecialHandling = "http://cargo.iata.org/SpecialHandling";
    public final static IRI c_SpecialHandling = IRI.create(s_c_SpecialHandling);
    /**
     * Special service details
     * 
     */
    public final static String s_c_SpecialService = "http://cargo.iata.org/SpecialService";
    public final static IRI c_SpecialService = IRI.create(s_c_SpecialService);
    /**
     * Transport segment details
     * 
     */
    public final static String s_c_TransportSegment = "http://cargo.iata.org/TransportSegment";
    public final static IRI c_TransportSegment = IRI.create(s_c_TransportSegment);
    /**
     * Unit Load Device details
     * 
     */
    public final static String s_c_Uld = "http://cargo.iata.org/Uld";
    public final static IRI c_Uld = IRI.create(s_c_Uld);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_c_Value = "http://cargo.iata.org/Value";
    public final static IRI c_Value = IRI.create(s_c_Value);
    /**
     * Unit of measurement details
     * 
     */
    public final static String s_c_VolumetricWeight = "http://cargo.iata.org/VolumetricWeight";
    public final static IRI c_VolumetricWeight = IRI.create(s_c_VolumetricWeight);
    /**
     * Country details
     * 
     */
    public final static String s_p_country = "http://cargo.iata.org/Address#country";
    public final static IRI p_country = IRI.create(s_p_country);
    /**
     * Air Waybill unique identifier
     * 
     */
    public final static String s_p_airWaybillNumber = "http://cargo.iata.org/AirWaybill#airWaybillNumber";
    public final static IRI p_airWaybillNumber = IRI.create(s_p_airWaybillNumber);
    /**
     * Issuing Carrier details
     * 
     */
    public final static String s_p_carrier = "http://cargo.iata.org/AirWaybill#carrier";
    public final static IRI p_carrier = IRI.create(s_p_carrier);
    /**
     * Carrier signature details
     * 
     */
    public final static String s_p_carrierSignature = "http://cargo.iata.org/AirWaybill#carrierSignature";
    public final static IRI p_carrierSignature = IRI.create(s_p_carrierSignature);
    /**
     * Goods value declaration details
     * 
     */
    public final static String s_p_chargeDeclaration = "http://cargo.iata.org/AirWaybill#chargeDeclaration";
    public final static IRI p_chargeDeclaration = IRI.create(s_p_chargeDeclaration);
    /**
     * Charge summary details
     * 
     */
    public final static String s_p_chargeSummary = "http://cargo.iata.org/AirWaybill#chargeSummary";
    public final static IRI p_chargeSummary = IRI.create(s_p_chargeSummary);
    /**
     * Consignee details
     * 
     */
    public final static String s_p_consignee = "http://cargo.iata.org/AirWaybill#consignee";
    public final static IRI p_consignee = IRI.create(s_p_consignee);
    /**
     * Customs information details
     * 
     */
    public final static String s_p_customsInformation = "http://cargo.iata.org/AirWaybill#customsInformation";
    public final static IRI p_customsInformation = IRI.create(s_p_customsInformation);
    /**
     * Freight Forwarder details
     * 
     */
    public final static String s_p_freightForwarder = "http://cargo.iata.org/AirWaybill#freightForwarder";
    public final static IRI p_freightForwarder = IRI.create(s_p_freightForwarder);
    /**
     * Handling details
     * 
     */
    public final static String s_p_handling = "http://cargo.iata.org/AirWaybill#handling";
    public final static IRI p_handling = IRI.create(s_p_handling);
    /**
     * Insurance details
     * 
     */
    public final static String s_p_insurance = "http://cargo.iata.org/AirWaybill#insurance";
    public final static IRI p_insurance = IRI.create(s_p_insurance);
    /**
     * Party to be notifed (e.g. Letter of credit)
     * 
     */
    public final static String s_p_notifyParty = "http://cargo.iata.org/AirWaybill#notifyParty";
    public final static IRI p_notifyParty = IRI.create(s_p_notifyParty);
    /**
     * Origin and Destination location
     * 
     */
    public final static String s_p_originDestination = "http://cargo.iata.org/AirWaybill#originDestination";
    public final static IRI p_originDestination = IRI.create(s_p_originDestination);
    /**
     * Other charge details
     * 
     */
    public final static String s_p_otherCharge = "http://cargo.iata.org/AirWaybill#otherCharge";
    public final static IRI p_otherCharge = IRI.create(s_p_otherCharge);
    /**
     * Charge payment method code. Refer CXML Code List 1.1, e.g.  PP - All Charges Prepaid Cash
     * 
     */
    public final static String s_p_paymentMethodCode = "http://cargo.iata.org/AirWaybill#paymentMethodCode";
    public final static IRI p_paymentMethodCode = IRI.create(s_p_paymentMethodCode);
    /**
     * Routing of shipment as requested in booking by the forwarder
     * 
     */
    public final static String s_p_requestedRouting = "http://cargo.iata.org/AirWaybill#requestedRouting";
    public final static IRI p_requestedRouting = IRI.create(s_p_requestedRouting);
    /**
     * Security information details
     * 
     */
    public final static String s_p_securityInformation = "http://cargo.iata.org/AirWaybill#securityInformation";
    public final static IRI p_securityInformation = IRI.create(s_p_securityInformation);
    /**
     * Shipper details
     * 
     */
    public final static String s_p_shipper = "http://cargo.iata.org/AirWaybill#shipper";
    public final static IRI p_shipper = IRI.create(s_p_shipper);
    /**
     * Shipper signature details
     * 
     */
    public final static String s_p_shipperSignature = "http://cargo.iata.org/AirWaybill#shipperSignature";
    public final static IRI p_shipperSignature = IRI.create(s_p_shipperSignature);
    /**
     * Total charge amount of all piece groups 
     * 
     */
    public final static String s_p_totalChargeAmount = "http://cargo.iata.org/AirWaybill#totalChargeAmount";
    public final static IRI p_totalChargeAmount = IRI.create(s_p_totalChargeAmount);
    /**
     * Total chargeable weight of all piece groups
     * 
     */
    public final static String s_p_totalChargeableWeight = "http://cargo.iata.org/AirWaybill#totalChargeableWeight";
    public final static IRI p_totalChargeableWeight = IRI.create(s_p_totalChargeableWeight);
    /**
     * Total gross weight of all piece groups 
     * 
     */
    public final static String s_p_totalGrossWeight = "http://cargo.iata.org/AirWaybill#totalGrossWeight";
    public final static IRI p_totalGrossWeight = IRI.create(s_p_totalGrossWeight);
    /**
     * Total piece count of pieces and ULD (at top level)
     * 
     */
    public final static String s_p_totalPieceAndULDCount = "http://cargo.iata.org/AirWaybill#totalPieceAndULDCount";
    public final static IRI p_totalPieceAndULDCount = IRI.create(s_p_totalPieceAndULDCount);
    /**
     * Total SLAC of all piece groups
     * 
     */
    public final static String s_p_totalSLAC = "http://cargo.iata.org/AirWaybill#totalSLAC";
    public final static IRI p_totalSLAC = IRI.create(s_p_totalSLAC);
    /**
     * Total volume of all piece groups
     * 
     */
    public final static String s_p_totalVolume = "http://cargo.iata.org/AirWaybill#totalVolume";
    public final static IRI p_totalVolume = IRI.create(s_p_totalVolume);
    /**
     * Waybill line details - e.g. as shown on Air or House Waybill
     * 
     */
    public final static String s_p_waybillLine = "http://cargo.iata.org/AirWaybill#waybillLine";
    public final static IRI p_waybillLine = IRI.create(s_p_waybillLine);
    /**
     * Goods value declaration details
     * 
     */
    public final static String s_p_chargeDeclaration_A = "http://cargo.iata.org/Booking#chargeDeclaration";
    public final static IRI p_chargeDeclaration_A = IRI.create(s_p_chargeDeclaration_A);
    /**
     * Charge summary details
     * 
     */
    public final static String s_p_chargeSummary_A = "http://cargo.iata.org/Booking#chargeSummary";
    public final static IRI p_chargeSummary_A = IRI.create(s_p_chargeSummary_A);
    /**
     * Weight taken into account to calculate the charge
     * 
     */
    public final static String s_p_chargeableWeight = "http://cargo.iata.org/Booking#chargeableWeight";
    public final static IRI p_chargeableWeight = IRI.create(s_p_chargeableWeight);
    /**
     * Other charge
     * 
     */
    public final static String s_p_otherCharge_A = "http://cargo.iata.org/Booking#otherCharge";
    public final static IRI p_otherCharge_A = IRI.create(s_p_otherCharge_A);
    /**
     * Details of individual transport segments
     * 
     */
    public final static String s_p_segmentDetail = "http://cargo.iata.org/Booking#segmentDetail";
    public final static IRI p_segmentDetail = IRI.create(s_p_segmentDetail);
    /**
     * Airline issuing the booking status
     * 
     */
    public final static String s_p_issuedBy = "http://cargo.iata.org/BookingStatus#issuedBy";
    public final static IRI p_issuedBy = IRI.create(s_p_issuedBy);
    /**
     * Contact person details
     * 
     */
    public final static String s_p_contactPerson = "http://cargo.iata.org/Branch#contactPerson";
    public final static IRI p_contactPerson = IRI.create(s_p_contactPerson);
    /**
     * Location and address details
     * 
     */
    public final static String s_p_location = "http://cargo.iata.org/Branch#location";
    public final static IRI p_location = IRI.create(s_p_location);
    /**
     * Other identifiers (e.g. LEI (Legal Entity Identifier), TIN (Trader Identification Number), PIMA address, Account number, VAT/Tax id, Legal Registration id, DUNS number, etc)
     * 
     */
    public final static String s_p_otherIdentifier = "http://cargo.iata.org/Branch#otherIdentifier";
    public final static IRI p_otherIdentifier = IRI.create(s_p_otherIdentifier);
    /**
     * Goods value declaration for carriage
     * 
     */
    public final static String s_p_amount = "http://cargo.iata.org/Carriage#amount";
    public final static IRI p_amount = IRI.create(s_p_amount);
    /**
     * at (place)
     * 
     */
    public final static String s_p_location_A = "http://cargo.iata.org/CarrierSignature#location";
    public final static IRI p_location_A = IRI.create(s_p_location_A);
    /**
     * Signature of Issuing Carrier of its agent
     * 
     */
    public final static String s_p_signatoryCompany = "http://cargo.iata.org/CarrierSignature#signatoryCompany";
    public final static IRI p_signatoryCompany = IRI.create(s_p_signatoryCompany);
    /**
     * Carriage value declaration
     * 
     */
    public final static String s_p_carriageAmount = "http://cargo.iata.org/ChargeDeclaration#carriageAmount";
    public final static IRI p_carriageAmount = IRI.create(s_p_carriageAmount);
    /**
     * Customs value declaration
     * 
     */
    public final static String s_p_customsAmount = "http://cargo.iata.org/ChargeDeclaration#customsAmount";
    public final static IRI p_customsAmount = IRI.create(s_p_customsAmount);
    /**
     * Insurance value declaration
     * 
     */
    public final static String s_p_insuranceAmount = "http://cargo.iata.org/ChargeDeclaration#insuranceAmount";
    public final static IRI p_insuranceAmount = IRI.create(s_p_insuranceAmount);
    /**
     * Payment amount
     * 
     */
    public final static String s_p_amount_A = "http://cargo.iata.org/ChargePayment#amount";
    public final static IRI p_amount_A = IRI.create(s_p_amount_A);
    /**
     * Collect totals in base / origin currency
     * 
     */
    public final static String s_p_collect = "http://cargo.iata.org/ChargeSummary#collect";
    public final static IRI p_collect = IRI.create(s_p_collect);
    /**
     * Prepaid totals in base / origin currency
     * 
     */
    public final static String s_p_prepaid = "http://cargo.iata.org/ChargeSummary#prepaid";
    public final static IRI p_prepaid = IRI.create(s_p_prepaid);
    /**
     * Collect totals in target / destination currency
     * 
     */
    public final static String s_p_inDestinationCurrency = "http://cargo.iata.org/Collect#inDestinationCurrency";
    public final static IRI p_inDestinationCurrency = IRI.create(s_p_inDestinationCurrency);
    /**
     * Total other charges due agent amount (collect)
     * 
     */
    public final static String s_p_totalOtherChargesDueAgent = "http://cargo.iata.org/Collect#totalOtherChargesDueAgent";
    public final static IRI p_totalOtherChargesDueAgent = IRI.create(s_p_totalOtherChargesDueAgent);
    /**
     * Total other charges due carrier amount (collect)
     * 
     */
    public final static String s_p_totalOtherChargesDueCarrier = "http://cargo.iata.org/Collect#totalOtherChargesDueCarrier";
    public final static IRI p_totalOtherChargesDueCarrier = IRI.create(s_p_totalOtherChargesDueCarrier);
    /**
     * Total collect charges amount
     * 
     */
    public final static String s_p_totalPrepaidCharges = "http://cargo.iata.org/Collect#totalPrepaidCharges";
    public final static IRI p_totalPrepaidCharges = IRI.create(s_p_totalPrepaidCharges);
    /**
     * Total Tax amount (collect)
     * 
     */
    public final static String s_p_totalTaxes = "http://cargo.iata.org/Collect#totalTaxes";
    public final static IRI p_totalTaxes = IRI.create(s_p_totalTaxes);
    /**
     * Total valuation charge amount (collect)
     * 
     */
    public final static String s_p_totalValuationCharges = "http://cargo.iata.org/Collect#totalValuationCharges";
    public final static IRI p_totalValuationCharges = IRI.create(s_p_totalValuationCharges);
    /**
     * Total weight charge amount (collect)
     * 
     */
    public final static String s_p_totalWeightCharges = "http://cargo.iata.org/Collect#totalWeightCharges";
    public final static IRI p_totalWeightCharges = IRI.create(s_p_totalWeightCharges);
    /**
     * Company branches
     * 
     */
    public final static String s_p_branch = "http://cargo.iata.org/Company#branch";
    public final static IRI p_branch = IRI.create(s_p_branch);
    /**
     * Other contact options e.g. Skype, Whatsapp, Viber, Fax etc
     * 
     */
    public final static String s_p_other = "http://cargo.iata.org/Contact#other";
    public final static IRI p_other = IRI.create(s_p_other);
    /**
     * Goods value declaration for customs
     * 
     */
    public final static String s_p_amount_A_A = "http://cargo.iata.org/Customs#amount";
    public final static IRI p_amount_A_A = IRI.create(s_p_amount_A_A);
    /**
     * Other customs information details
     * 
     */
    public final static String s_p_otherCustomsInformation = "http://cargo.iata.org/CustomsInfo#otherCustomsInformation";
    public final static IRI p_otherCustomsInformation = IRI.create(s_p_otherCustomsInformation);
    /**
     * Height
     * 
     */
    public final static String s_p_height = "http://cargo.iata.org/Dimension#height";
    public final static IRI p_height = IRI.create(s_p_height);
    /**
     * Length
     * 
     */
    public final static String s_p_length = "http://cargo.iata.org/Dimension#length";
    public final static IRI p_length = IRI.create(s_p_length);
    /**
     * Volume
     * 
     */
    public final static String s_p_volume = "http://cargo.iata.org/Dimension#volume";
    public final static IRI p_volume = IRI.create(s_p_volume);
    /**
     * Width
     * 
     */
    public final static String s_p_width = "http://cargo.iata.org/Dimension#width";
    public final static IRI p_width = IRI.create(s_p_width);
    /**
     * Handling details  
     * 
     */
    public final static String s_p_handlingDetails = "http://cargo.iata.org/Event#handlingDetails";
    public final static IRI p_handlingDetails = IRI.create(s_p_handlingDetails);
    /**
     * Location of event
     * 
     */
    public final static String s_p_location_A_A = "http://cargo.iata.org/Event#location";
    public final static IRI p_location_A_A = IRI.create(s_p_location_A_A);
    /**
     * Party performing the event
     * 
     */
    public final static String s_p_performedBy = "http://cargo.iata.org/Event#performedBy";
    public final static IRI p_performedBy = IRI.create(s_p_performedBy);
    /**
     * Document originator details and contacts
     * 
     */
    public final static String s_p_documentOriginator = "http://cargo.iata.org/ExternalReference#documentOriginator";
    public final static IRI p_documentOriginator = IRI.create(s_p_documentOriginator);
    public final static String s_p_externalReference = "http://cargo.iata.org/ExternalReference#externalReference";
    public final static IRI p_externalReference = IRI.create(s_p_externalReference);
    /**
     * Elevation from sea level
     * 
     */
    public final static String s_p_elevation = "http://cargo.iata.org/Geolocation#elevation";
    public final static IRI p_elevation = IRI.create(s_p_elevation);
    /**
     * Location latitude 
     * 
     */
    public final static String s_p_latitude = "http://cargo.iata.org/Geolocation#latitude";
    public final static IRI p_latitude = IRI.create(s_p_latitude);
    /**
     * Location longitude 
     * 
     */
    public final static String s_p_longitude = "http://cargo.iata.org/Geolocation#longitude";
    public final static IRI p_longitude = IRI.create(s_p_longitude);
    /**
     * Service request details
     * 
     */
    public final static String s_p_serviceRequest = "http://cargo.iata.org/Handling#serviceRequest";
    public final static IRI p_serviceRequest = IRI.create(s_p_serviceRequest);
    /**
     * Special handling details
     * 
     */
    public final static String s_p_specialHandling = "http://cargo.iata.org/Handling#specialHandling";
    public final static IRI p_specialHandling = IRI.create(s_p_specialHandling);
    /**
     * Collection charges in destination currency - e.g. additional amount charged for the service
     * 
     */
    public final static String s_p_collectionCharge = "http://cargo.iata.org/InDestinationCurrency#collectionCharge";
    public final static IRI p_collectionCharge = IRI.create(s_p_collectionCharge);
    /**
     * Sum of TotalCharges and CollectionCharge
     * 
     */
    public final static String s_p_grandTotalCollectCharges = "http://cargo.iata.org/InDestinationCurrency#grandTotalCollectCharges";
    public final static IRI p_grandTotalCollectCharges = IRI.create(s_p_grandTotalCollectCharges);
    /**
     * Total Charges converted to destination currency as per CURRENCY conversion rate
     * 
     */
    public final static String s_p_totalCharges = "http://cargo.iata.org/InDestinationCurrency#totalCharges";
    public final static IRI p_totalCharges = IRI.create(s_p_totalCharges);
    /**
     * Party covering the insurance 
     * 
     */
    public final static String s_p_coveringParty = "http://cargo.iata.org/Insurance#coveringParty";
    public final static IRI p_coveringParty = IRI.create(s_p_coveringParty);
    /**
     * Insured amount - amount covered by the insurance policy
     * 
     */
    public final static String s_p_insuranceAmount_A = "http://cargo.iata.org/Insurance#insuranceAmount";
    public final static IRI p_insuranceAmount_A = IRI.create(s_p_insuranceAmount_A);
    /**
     * Event details e.g. DEP, ARR, FOH, RCS, security screening, etc
     * 
     */
    public final static String s_p_event = "http://cargo.iata.org/Item#event";
    public final static IRI p_event = IRI.create(s_p_event);
    /**
     * Other identifier details
     * 
     */
    public final static String s_p_otherIdentifier_A = "http://cargo.iata.org/Item#otherIdentifier";
    public final static IRI p_otherIdentifier_A = IRI.create(s_p_otherIdentifier_A);
    /**
     * Production batch and lot details
     * 
     */
    public final static String s_p_production = "http://cargo.iata.org/Item#production";
    public final static IRI p_production = IRI.create(s_p_production);
    /**
     * Production country details
     * 
     */
    public final static String s_p_productionCountry = "http://cargo.iata.org/Item#productionCountry";
    public final static IRI p_productionCountry = IRI.create(s_p_productionCountry);
    /**
     * Item target country
     * 
     */
    public final static String s_p_targetCountry = "http://cargo.iata.org/Item#targetCountry";
    public final static IRI p_targetCountry = IRI.create(s_p_targetCountry);
    /**
     * Address details
     * 
     */
    public final static String s_p_address = "http://cargo.iata.org/Location#address";
    public final static IRI p_address = IRI.create(s_p_address);
    /**
     * Geolocation details
     * 
     */
    public final static String s_p_geoLocation = "http://cargo.iata.org/Location#geoLocation";
    public final static IRI p_geoLocation = IRI.create(s_p_geoLocation);
    /**
     * Other charge description details
     * 
     */
    public final static String s_p_chargeDescription = "http://cargo.iata.org/OtherCharge#chargeDescription";
    public final static IRI p_chargeDescription = IRI.create(s_p_chargeDescription);
    /**
     * Charge payment details
     * 
     */
    public final static String s_p_chargePayment = "http://cargo.iata.org/OtherCharge#chargePayment";
    public final static IRI p_chargePayment = IRI.create(s_p_chargePayment);
    /**
     * Special service details
     * 
     */
    public final static String s_p_specialService = "http://cargo.iata.org/OtherCharge#specialService";
    public final static IRI p_specialService = IRI.create(s_p_specialService);
    /**
     * Commodity details
     * 
     */
    public final static String s_p_commodity = "http://cargo.iata.org/OtherCustomsInformation#commodity";
    public final static IRI p_commodity = IRI.create(s_p_commodity);
    /**
     * Country details
     * 
     */
    public final static String s_p_country_A = "http://cargo.iata.org/OtherCustomsInformation#country";
    public final static IRI p_country_A = IRI.create(s_p_country_A);
    /**
     * Company details
     * 
     */
    public final static String s_p_companyDetails = "http://cargo.iata.org/OtherParty#companyDetails";
    public final static IRI p_companyDetails = IRI.create(s_p_companyDetails);
    /**
     * Contact details
     * 
     */
    public final static String s_p_contact = "http://cargo.iata.org/Person#contact";
    public final static IRI p_contact = IRI.create(s_p_contact);
    /**
     * Consignee company details - e.g. the party receiving the piece
     * 
     */
    public final static String s_p_consignee_A = "http://cargo.iata.org/Piece#consignee";
    public final static IRI p_consignee_A = IRI.create(s_p_consignee_A);
    /**
     * Details of contained item(s) 
     * 
     */
    public final static String s_p_containedItem = "http://cargo.iata.org/Piece#containedItem";
    public final static IRI p_containedItem = IRI.create(s_p_containedItem);
    /**
     * Details of contained piece(s)
     * 
     */
    public final static String s_p_containedPiece = "http://cargo.iata.org/Piece#containedPiece";
    public final static IRI p_containedPiece = IRI.create(s_p_containedPiece);
    /**
     * Customs details  
     * 
     */
    public final static String s_p_customsDetails = "http://cargo.iata.org/Piece#customsDetails";
    public final static IRI p_customsDetails = IRI.create(s_p_customsDetails);
    /**
     * Dimensions details
     * 
     */
    public final static String s_p_dimensions = "http://cargo.iata.org/Piece#dimensions";
    public final static IRI p_dimensions = IRI.create(s_p_dimensions);
    /**
     * Event details e.g. DEP, ARR, FOH, RCS, security screening, etc
     * 
     */
    public final static String s_p_event_A = "http://cargo.iata.org/Piece#event";
    public final static IRI p_event_A = IRI.create(s_p_event_A);
    /**
     * Reference documents details
     * 
     */
    public final static String s_p_externalReference_A = "http://cargo.iata.org/Piece#externalReference";
    public final static IRI p_externalReference_A = IRI.create(s_p_externalReference_A);
    /**
     * Weight details
     * 
     */
    public final static String s_p_grossWeight = "http://cargo.iata.org/Piece#grossWeight";
    public final static IRI p_grossWeight = IRI.create(s_p_grossWeight);
    /**
     * Handling details  
     * 
     */
    public final static String s_p_handlingDetails_A = "http://cargo.iata.org/Piece#handlingDetails";
    public final static IRI p_handlingDetails_A = IRI.create(s_p_handlingDetails_A);
    /**
     * Goods origin country
     * 
     */
    public final static String s_p_originCountry = "http://cargo.iata.org/Piece#originCountry";
    public final static IRI p_originCountry = IRI.create(s_p_originCountry);
    /**
     * Origin and destination details
     * 
     */
    public final static String s_p_originDestination_A = "http://cargo.iata.org/Piece#originDestination";
    public final static IRI p_originDestination_A = IRI.create(s_p_originDestination_A);
    /**
     * Other piece identification ( e.g. Shipping Marks, Seal)
     * 
     */
    public final static String s_p_otherIdentifier_A_A = "http://cargo.iata.org/Piece#otherIdentifier";
    public final static IRI p_otherIdentifier_A_A = IRI.create(s_p_otherIdentifier_A_A);
    /**
     * Other party company details - e.g. the party to be notified
     * 
     */
    public final static String s_p_otherParty = "http://cargo.iata.org/Piece#otherParty";
    public final static IRI p_otherParty = IRI.create(s_p_otherParty);
    /**
     * Packaging details 
     * 
     */
    public final static String s_p_packagingType = "http://cargo.iata.org/Piece#packagingType";
    public final static IRI p_packagingType = IRI.create(s_p_packagingType);
    /**
     * Security details  
     * 
     */
    public final static String s_p_securityDetails = "http://cargo.iata.org/Piece#securityDetails";
    public final static IRI p_securityDetails = IRI.create(s_p_securityDetails);
    /**
     * Shipper company details - e.g. the party shipping the piece
     * 
     */
    public final static String s_p_shipper_A = "http://cargo.iata.org/Piece#shipper";
    public final static IRI p_shipper_A = IRI.create(s_p_shipper_A);
    /**
     * Segment related to the transport status
     * 
     */
    public final static String s_p_transportSegment = "http://cargo.iata.org/Piece#transportSegment";
    public final static IRI p_transportSegment = IRI.create(s_p_transportSegment);
    /**
     * Unit Load Device details
     * 
     */
    public final static String s_p_uLD = "http://cargo.iata.org/Piece#uLD";
    public final static IRI p_uLD = IRI.create(s_p_uLD);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_p_volumetricWeight = "http://cargo.iata.org/Piece#volumetricWeight";
    public final static IRI p_volumetricWeight = IRI.create(s_p_volumetricWeight);
    /**
     * Details of the piece
     * 
     */
    public final static String s_p_pieceDetails = "http://cargo.iata.org/PieceGrouping#pieceDetails";
    public final static IRI p_pieceDetails = IRI.create(s_p_pieceDetails);
    /**
     * Rating details
     * 
     */
    public final static String s_p_ratingDetails = "http://cargo.iata.org/PieceGrouping#ratingDetails";
    public final static IRI p_ratingDetails = IRI.create(s_p_ratingDetails);
    /**
     * Total other charges due agent amount (prepaid)
     * 
     */
    public final static String s_p_totalOtherChargesDueAgent_A = "http://cargo.iata.org/Prepaid#totalOtherChargesDueAgent";
    public final static IRI p_totalOtherChargesDueAgent_A = IRI.create(s_p_totalOtherChargesDueAgent_A);
    /**
     * Total other charges due carrier amount (prepaid)
     * 
     */
    public final static String s_p_totalOtherChargesDueCarrier_A = "http://cargo.iata.org/Prepaid#totalOtherChargesDueCarrier";
    public final static IRI p_totalOtherChargesDueCarrier_A = IRI.create(s_p_totalOtherChargesDueCarrier_A);
    /**
     * Total prepaid charges amount
     * 
     */
    public final static String s_p_totalPrepaidCharges_A = "http://cargo.iata.org/Prepaid#totalPrepaidCharges";
    public final static IRI p_totalPrepaidCharges_A = IRI.create(s_p_totalPrepaidCharges_A);
    /**
     * Total Tax amount (prepaid)
     * 
     */
    public final static String s_p_totalTaxes_A = "http://cargo.iata.org/Prepaid#totalTaxes";
    public final static IRI p_totalTaxes_A = IRI.create(s_p_totalTaxes_A);
    /**
     * Total valuation charge amount (prepaid)
     * 
     */
    public final static String s_p_totalValuationCharges_A = "http://cargo.iata.org/Prepaid#totalValuationCharges";
    public final static IRI p_totalValuationCharges_A = IRI.create(s_p_totalValuationCharges_A);
    /**
     * Total weight charge amount (prepaid)
     * 
     */
    public final static String s_p_totalWeightCharges_A = "http://cargo.iata.org/Prepaid#totalWeightCharges";
    public final static IRI p_totalWeightCharges_A = IRI.create(s_p_totalWeightCharges_A);
    /**
     * Product price per unit in the base currency
     * 
     */
    public final static String s_p_unitPrice = "http://cargo.iata.org/Price#unitPrice";
    public final static IRI p_unitPrice = IRI.create(s_p_unitPrice);
    /**
     * Product additional details
     * 
     */
    public final static String s_p_characteristic = "http://cargo.iata.org/Product#characteristic";
    public final static IRI p_characteristic = IRI.create(s_p_characteristic);
    /**
     * Commodity details
     * 
     */
    public final static String s_p_commodity_A = "http://cargo.iata.org/Product#commodity";
    public final static IRI p_commodity_A = IRI.create(s_p_commodity_A);
    /**
     * Product dimensions details
     * 
     */
    public final static String s_p_dimensions_A = "http://cargo.iata.org/Product#dimensions";
    public final static IRI p_dimensions_A = IRI.create(s_p_dimensions_A);
    /**
     * Manufacturing company details and contacts
     * 
     */
    public final static String s_p_manufacturer = "http://cargo.iata.org/Product#manufacturer";
    public final static IRI p_manufacturer = IRI.create(s_p_manufacturer);
    /**
     * Other product identifier (e.g. Bar code, UPC, EAN, Amazon)
     * 
     */
    public final static String s_p_otherIdentifier_A_A_A = "http://cargo.iata.org/Product#otherIdentifier";
    public final static IRI p_otherIdentifier_A_A_A = IRI.create(s_p_otherIdentifier_A_A_A);
    /**
     * Product price details
     * 
     */
    public final static String s_p_price = "http://cargo.iata.org/Product#price";
    public final static IRI p_price = IRI.create(s_p_price);
    /**
     * Product weight details
     * 
     */
    public final static String s_p_weight = "http://cargo.iata.org/Product#weight";
    public final static IRI p_weight = IRI.create(s_p_weight);
    /**
     * Rate, charge, or discount amount
     * 
     */
    public final static String s_p_rateChargeAmount = "http://cargo.iata.org/Rating#rateChargeAmount";
    public final static IRI p_rateChargeAmount = IRI.create(s_p_rateChargeAmount);
    /**
     * Subtotal of weight and valuation charges for the piece group
     * 
     */
    public final static String s_p_subTotalAmount = "http://cargo.iata.org/Rating#subTotalAmount";
    public final static IRI p_subTotalAmount = IRI.create(s_p_subTotalAmount);
    /**
     * Known Consignor or Regulated Agent reference
     * 
     */
    public final static String s_p_receivedFrom = "http://cargo.iata.org/ReasonsForSecurityStatus#receivedFrom";
    public final static IRI p_receivedFrom = IRI.create(s_p_receivedFrom);
    /**
     * Regulated entity identifier (e.g. Regulated Agent Identifier) is mandatory
     * 
     */
    public final static String s_p_regulatedEntityIdentifier = "http://cargo.iata.org/ReceivedFrom#regulatedEntityIdentifier";
    public final static IRI p_regulatedEntityIdentifier = IRI.create(s_p_regulatedEntityIdentifier);
    /**
     * Reference document
     * 
     */
    public final static String s_p_externalReference_A_A = "http://cargo.iata.org/SecurityInfo#externalReference";
    public final static IRI p_externalReference_A_A = IRI.create(s_p_externalReference_A_A);
    /**
     * Security status details
     * 
     */
    public final static String s_p_reasonsForSecurityStatus = "http://cargo.iata.org/SecurityInfo#reasonsForSecurityStatus";
    public final static IRI p_reasonsForSecurityStatus = IRI.create(s_p_reasonsForSecurityStatus);
    /**
     * Security status details
     * 
     */
    public final static String s_p_securityStatus = "http://cargo.iata.org/SecurityInfo#securityStatus";
    public final static IRI p_securityStatus = IRI.create(s_p_securityStatus);
    /**
     * Name of person (or employee ID) and Regulated entity identifier (e.g. Regulated Agent Identifier) is mandatory
     * 
     */
    public final static String s_p_issuedBy_A = "http://cargo.iata.org/SecurityStatus#issuedBy";
    public final static IRI p_issuedBy_A = IRI.create(s_p_issuedBy_A);
    /**
     * Dimensions details
     * 
     */
    public final static String s_p_dimensions_A_A = "http://cargo.iata.org/Shipment#dimensions";
    public final static IRI p_dimensions_A_A = IRI.create(s_p_dimensions_A_A);
    /**
     * Reference documents details
     * 
     */
    public final static String s_p_externalReference_A_A_A = "http://cargo.iata.org/Shipment#externalReference";
    public final static IRI p_externalReference_A_A_A = IRI.create(s_p_externalReference_A_A_A);
    /**
     * Weight details
     * 
     */
    public final static String s_p_grossWeight_A = "http://cargo.iata.org/Shipment#grossWeight";
    public final static IRI p_grossWeight_A = IRI.create(s_p_grossWeight_A);
    /**
     * Details of the shipment
     * 
     */
    public final static String s_p_shipmentDetails = "http://cargo.iata.org/Shipment#shipmentDetails";
    public final static IRI p_shipmentDetails = IRI.create(s_p_shipmentDetails);
    /**
     * Total piece count of pieces and ULD (at top level)
     * 
     */
    public final static String s_p_totalPieceAndULDCount_A = "http://cargo.iata.org/Shipment#totalPieceAndULDCount";
    public final static IRI p_totalPieceAndULDCount_A = IRI.create(s_p_totalPieceAndULDCount_A);
    /**
     * Total SLAC of all piece groups
     * 
     */
    public final static String s_p_totalSLAC_A = "http://cargo.iata.org/Shipment#totalSLAC";
    public final static IRI p_totalSLAC_A = IRI.create(s_p_totalSLAC_A);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_p_volumetricWeight_A = "http://cargo.iata.org/Shipment#volumetricWeight";
    public final static IRI p_volumetricWeight_A = IRI.create(s_p_volumetricWeight_A);
    /**
     * Waybill unique identifier (AWB or HWB)
     * 
     */
    public final static String s_p_waybillNumber = "http://cargo.iata.org/Shipment#waybillNumber";
    public final static IRI p_waybillNumber = IRI.create(s_p_waybillNumber);
    /**
     * Signature of the Shipper or his Agent
     * 
     */
    public final static String s_p_signatoryCompany_A = "http://cargo.iata.org/ShipperSignature#signatoryCompany";
    public final static IRI p_signatoryCompany_A = IRI.create(s_p_signatoryCompany_A);
    /**
     * Arrival details including time and date
     * 
     */
    public final static String s_p_arrivalLocation = "http://cargo.iata.org/TransportSegment#arrivalLocation";
    public final static IRI p_arrivalLocation = IRI.create(s_p_arrivalLocation);
    /**
     * Booking status details
     * 
     */
    public final static String s_p_bookingStatus = "http://cargo.iata.org/TransportSegment#bookingStatus";
    public final static IRI p_bookingStatus = IRI.create(s_p_bookingStatus);
    /**
     * Departure details including time and date
     * 
     */
    public final static String s_p_departureLocation = "http://cargo.iata.org/TransportSegment#departureLocation";
    public final static IRI p_departureLocation = IRI.create(s_p_departureLocation);
    /**
     * Reference to document or logistics object (URI)
     * 
     */
    public final static String s_p_externalReference_A_A_A_A = "http://cargo.iata.org/TransportSegment#externalReference";
    public final static IRI p_externalReference_A_A_A_A = IRI.create(s_p_externalReference_A_A_A_A);
    /**
     * Transport company details
     * 
     */
    public final static String s_p_transportCompany = "http://cargo.iata.org/TransportSegment#transportCompany";
    public final static IRI p_transportCompany = IRI.create(s_p_transportCompany);
    /**
     * Details of contained (virtual) piece(s)
     * 
     */
    public final static String s_p_containedPiece_A = "http://cargo.iata.org/Uld#containedPiece";
    public final static IRI p_containedPiece_A = IRI.create(s_p_containedPiece_A);
    /**
     * Event details e.g. DEP, ARR, FOH, RCS, security screening, etc
     * 
     */
    public final static String s_p_event_A_A = "http://cargo.iata.org/Uld#event";
    public final static IRI p_event_A_A = IRI.create(s_p_event_A_A);
    /**
     * Reference documents details
     * 
     */
    public final static String s_p_externalReference_A_A_A_A_A = "http://cargo.iata.org/Uld#externalReference";
    public final static IRI p_externalReference_A_A_A_A_A = IRI.create(s_p_externalReference_A_A_A_A_A);
    /**
     * Handling details  
     * 
     */
    public final static String s_p_handlingDetails_A_A = "http://cargo.iata.org/Uld#handlingDetails";
    public final static IRI p_handlingDetails_A_A = IRI.create(s_p_handlingDetails_A_A);
    /**
     * Origin and destination details
     * 
     */
    public final static String s_p_originDestination_A_A = "http://cargo.iata.org/Uld#originDestination";
    public final static IRI p_originDestination_A_A = IRI.create(s_p_originDestination_A_A);
    /**
     * Owner company details and contacts for the ULD
     * 
     */
    public final static String s_p_ownerCompany = "http://cargo.iata.org/Uld#ownerCompany";
    public final static IRI p_ownerCompany = IRI.create(s_p_ownerCompany);
    /**
     * Tare weight of the empty ULD
     * 
     */
    public final static String s_p_tareWeight = "http://cargo.iata.org/Uld#tareWeight";
    public final static IRI p_tareWeight = IRI.create(s_p_tareWeight);
    /**
     * Segment related to the transport status
     * 
     */
    public final static String s_p_transportSegment_A = "http://cargo.iata.org/Uld#transportSegment";
    public final static IRI p_transportSegment_A = IRI.create(s_p_transportSegment_A);
    /**
     * Chargeable weight
     * 
     */
    public final static String s_p_chargeableWeight_A = "http://cargo.iata.org/VolumetricWeight#chargeableWeight";
    public final static IRI p_chargeableWeight_A = IRI.create(s_p_chargeableWeight_A);
    /**
     * Volume to weight conversion factor
     * 
     */
    public final static String s_p_conversionFactor = "http://cargo.iata.org/VolumetricWeight#conversionFactor";
    public final static IRI p_conversionFactor = IRI.create(s_p_conversionFactor);
    /**
     * Address identifier using special coding systems e.g. US CBP FIRMS code
     * 
     */
    public final static String s_p_addressCode = "http://cargo.iata.org/Address#addressCode";
    public final static IRI p_addressCode = IRI.create(s_p_addressCode);
    /**
     * Type of address code e.g. US CBP FIRMS
     * 
     */
    public final static String s_p_addressCodeType = "http://cargo.iata.org/Address#addressCodeType";
    public final static IRI p_addressCodeType = IRI.create(s_p_addressCodeType);
    /**
     * UN/LOCODE city code (5 letter) or IATA city code (3 letter)
     * 
     */
    public final static String s_p_cityCode = "http://cargo.iata.org/Address#cityCode";
    public final static IRI p_cityCode = IRI.create(s_p_cityCode);
    /**
     * If no CityCode provided, full name of the city 
     * 
     */
    public final static String s_p_cityName = "http://cargo.iata.org/Address#cityName";
    public final static IRI p_cityName = IRI.create(s_p_cityName);
    /**
     * Post Office box number / code
     * 
     */
    public final static String s_p_pOBox = "http://cargo.iata.org/Address#pOBox";
    public final static IRI p_pOBox = IRI.create(s_p_pOBox);
    /**
     * Postal / ZIP code
     * 
     */
    public final static String s_p_postalCode = "http://cargo.iata.org/Address#postalCode";
    public final static IRI p_postalCode = IRI.create(s_p_postalCode);
    /**
     * Region/ State / Department. Refer ISO 3166-2  
     * 
     */
    public final static String s_p_regionCode = "http://cargo.iata.org/Address#regionCode";
    public final static IRI p_regionCode = IRI.create(s_p_regionCode);
    /**
     * If no StateCode provided, full name of the region / state / province / canton
     * 
     */
    public final static String s_p_regionName = "http://cargo.iata.org/Address#regionName";
    public final static IRI p_regionName = IRI.create(s_p_regionName);
    /**
     * Street address including street name, street number, building number, apartment etc
     * 
     */
    public final static String s_p_street = "http://cargo.iata.org/Address#street";
    public final static IRI p_street = IRI.create(s_p_street);
    /**
     * Accounting information item identifier. Refer CXML Code List 1.30, STL - Mode of Settlement
     * 
     */
    public final static String s_p_accountInformationCode = "http://cargo.iata.org/AirWaybill#accountInformationCode";
    public final static IRI p_accountInformationCode = IRI.create(s_p_accountInformationCode);
    /**
     * If no Item code provided, description of accounting item - e.g PAYMENT BY CERTIFIED CHEQUE... 
     * 
     */
    public final static String s_p_accountInformationDescription = "http://cargo.iata.org/AirWaybill#accountInformationDescription";
    public final static IRI p_accountInformationDescription = IRI.create(s_p_accountInformationDescription);
    /**
     * Air Waybill date
     * 
     */
    public final static String s_p_date = "http://cargo.iata.org/AirWaybill#date";
    public final static IRI p_date = IRI.create(s_p_date);
    /**
     * Air Waybill number
     * 
     */
    public final static String s_p_airWaybillNumber_A = "http://cargo.iata.org/Booking#airWaybillNumber";
    public final static IRI p_airWaybillNumber_A = IRI.create(s_p_airWaybillNumber_A);
    /**
     * Booking unique identifier
     * 
     */
    public final static String s_p_bookingRequestNumber = "http://cargo.iata.org/Booking#bookingRequestNumber";
    public final static IRI p_bookingRequestNumber = IRI.create(s_p_bookingRequestNumber);
    /**
     * Type of booking - e.g: Freesale, Allocation, BlockSpace Agreement
     * 
     */
    public final static String s_p_bookingType = "http://cargo.iata.org/Booking#bookingType";
    public final static IRI p_bookingType = IRI.create(s_p_bookingType);
    /**
     * Booking date
     * 
     */
    public final static String s_p_date_A = "http://cargo.iata.org/Booking#date";
    public final static IRI p_date_A = IRI.create(s_p_date_A);
    /**
     * Status of booking - e.g. Received, Processed, Accepted, Rejected, Requested, Confirmed, Cancelled
     * 
     */
    public final static String s_p_code = "http://cargo.iata.org/BookingStatus#code";
    public final static IRI p_code = IRI.create(s_p_code);
    /**
     * Date and time when the booking status is issued
     * 
     */
    public final static String s_p_dateTime = "http://cargo.iata.org/BookingStatus#dateTime";
    public final static IRI p_dateTime = IRI.create(s_p_dateTime);
    /**
     * If no Code provided, status name
     * 
     */
    public final static String s_p_description = "http://cargo.iata.org/BookingStatus#description";
    public final static IRI p_description = IRI.create(s_p_description);
    /**
     * Company branch name
     * 
     */
    public final static String s_p_branchName = "http://cargo.iata.org/Branch#branchName";
    public final static IRI p_branchName = IRI.create(s_p_branchName);
    /**
     * IATA CASS cargo agent 4 digit branch number / location identifier
     * 
     */
    public final static String s_p_iATACargoAgentLocationIdentifier = "http://cargo.iata.org/Branch#iATACargoAgentLocationIdentifier";
    public final static IRI p_iATACargoAgentLocationIdentifier = IRI.create(s_p_iATACargoAgentLocationIdentifier);
    /**
     * NVD (No Value Declared) indicator when no value is declared for carriage
     * 
     */
    public final static String s_p_noCarriageValue = "http://cargo.iata.org/Carriage#noCarriageValue";
    public final static IRI p_noCarriageValue = IRI.create(s_p_noCarriageValue);
    /**
     * Executed on (date)
     * 
     */
    public final static String s_p_date_A_A = "http://cargo.iata.org/CarrierSignature#date";
    public final static IRI p_date_A_A = IRI.create(s_p_date_A_A);
    /**
     * Product characteristic code - e.g. CLR - Color
     * 
     */
    public final static String s_p_type = "http://cargo.iata.org/Characteristic#type";
    public final static IRI p_type = IRI.create(s_p_type);
    /**
     * Product characteristic value / attribute - e.g. Blue...
     * 
     */
    public final static String s_p_value = "http://cargo.iata.org/Characteristic#value";
    public final static IRI p_value = IRI.create(s_p_value);
    /**
     * Other Charges payment indicator e.g. Prepaid, Collect
     * 
     */
    public final static String s_p_otherChargesPayment = "http://cargo.iata.org/ChargeDeclaration#otherChargesPayment";
    public final static IRI p_otherChargesPayment = IRI.create(s_p_otherChargesPayment);
    /**
     * Weight charges payment indicator e.g. Prepaid, Collect
     * 
     */
    public final static String s_p_weightValuationChargePayment = "http://cargo.iata.org/ChargeDeclaration#weightValuationChargePayment";
    public final static IRI p_weightValuationChargePayment = IRI.create(s_p_weightValuationChargePayment);
    /**
     * Other charge code. Refer CXML Code List 1.2, e.g. FC - Charges Collect Fee
     * 
     */
    public final static String s_p_code_A = "http://cargo.iata.org/ChargeDescription#code";
    public final static IRI p_code_A = IRI.create(s_p_code_A);
    /**
     * Charge description
     * 
     */
    public final static String s_p_description_A = "http://cargo.iata.org/ChargeDescription#description";
    public final static IRI p_description_A = IRI.create(s_p_description_A);
    /**
     * Other Charge Location indicator - e.g. Origin (O) or Transit (T) or Destination(D)
     * 
     */
    public final static String s_p_locationIndicator = "http://cargo.iata.org/ChargeDescription#locationIndicator";
    public final static IRI p_locationIndicator = IRI.create(s_p_locationIndicator);
    /**
     * Other charge subcode
     * 
     */
    public final static String s_p_subCode = "http://cargo.iata.org/ChargeDescription#subCode";
    public final static IRI p_subCode = IRI.create(s_p_subCode);
    /**
     * Number of items for which the charge is applied
     * 
     */
    public final static String s_p_byItemQuantity = "http://cargo.iata.org/ChargePayment#byItemQuantity";
    public final static IRI p_byItemQuantity = IRI.create(s_p_byItemQuantity);
    /**
     * Amount of time for which the charge is applied
     * 
     */
    public final static String s_p_byTime = "http://cargo.iata.org/ChargePayment#byTime";
    public final static IRI p_byTime = IRI.create(s_p_byTime);
    /**
     * Due party - e.g. Carrier, Agent
     * 
     */
    public final static String s_p_dueParty = "http://cargo.iata.org/ChargePayment#dueParty";
    public final static IRI p_dueParty = IRI.create(s_p_dueParty);
    /**
     * Other Charges payment indicator - e.g. at origin (prepaid) or at destination (collect)
     * 
     */
    public final static String s_p_prepaidCollectIndicator = "http://cargo.iata.org/ChargePayment#prepaidCollectIndicator";
    public final static IRI p_prepaidCollectIndicator = IRI.create(s_p_prepaidCollectIndicator);
    /**
     * Unique Commodity Code e.g. 391721 - Tubes, Pipes And Hoses, Rigid, Of Polymers Of Ethylene
     * 
     */
    public final static String s_p_code_A_A = "http://cargo.iata.org/Commodity#code";
    public final static IRI p_code_A_A = IRI.create(s_p_code_A_A);
    /**
     * If no Code provided, name of commodity
     * 
     */
    public final static String s_p_name = "http://cargo.iata.org/Commodity#name";
    public final static IRI p_name = IRI.create(s_p_name);
    /**
     * Issuer of the Commodity Code - e.g. Brussels Tariff Nomenclature, EU Harmonized System Code, UN Standard International Trade...
     * 
     */
    public final static String s_p_type_A = "http://cargo.iata.org/Commodity#type";
    public final static IRI p_type_A = IRI.create(s_p_type_A);
    /**
     * IATA two-character airline code 
     * 
     */
    public final static String s_p_airlineCode = "http://cargo.iata.org/Company#airlineCode";
    public final static IRI p_airlineCode = IRI.create(s_p_airlineCode);
    /**
     * IATA three-numeric airline prefix number 
     * 
     */
    public final static String s_p_airlinePrefix = "http://cargo.iata.org/Company#airlinePrefix";
    public final static IRI p_airlinePrefix = IRI.create(s_p_airlinePrefix);
    /**
     * IATA accredited cargo agent 7 digit number
     * 
     */
    public final static String s_p_iATACargoAgentCode = "http://cargo.iata.org/Company#iATACargoAgentCode";
    public final static IRI p_iATACargoAgentCode = IRI.create(s_p_iATACargoAgentCode);
    /**
     * Name of company or organization
     * 
     */
    public final static String s_p_name_A = "http://cargo.iata.org/Company#name";
    public final static IRI p_name_A = IRI.create(s_p_name_A);
    /**
     * E-mail address
     * 
     */
    public final static String s_p_emailAddress = "http://cargo.iata.org/Contact#emailAddress";
    public final static IRI p_emailAddress = IRI.create(s_p_emailAddress);
    /**
     * Phone number
     * 
     */
    public final static String s_p_phoneNumber = "http://cargo.iata.org/Contact#phoneNumber";
    public final static IRI p_phoneNumber = IRI.create(s_p_phoneNumber);
    /**
     * Country ISO code. Refer ISO 3166-2
     * 
     */
    public final static String s_p_countryCode = "http://cargo.iata.org/Country#countryCode";
    public final static IRI p_countryCode = IRI.create(s_p_countryCode);
    /**
     * Full country name
     * 
     */
    public final static String s_p_countryName = "http://cargo.iata.org/Country#countryName";
    public final static IRI p_countryName = IRI.create(s_p_countryName);
    /**
     * NCV (No Customs Value) indicator when no value is declared for customs
     * 
     */
    public final static String s_p_noCustomsValue = "http://cargo.iata.org/Customs#noCustomsValue";
    public final static IRI p_noCustomsValue = IRI.create(s_p_noCustomsValue);
    /**
     * Customs transit status / code/ information / reference. Refer EUCTSC, e.g. T1 - Europe Union Customs 1
     * 
     */
    public final static String s_p_customsStatusCode = "http://cargo.iata.org/CustomsInfo#customsStatusCode";
    public final static IRI p_customsStatusCode = IRI.create(s_p_customsStatusCode);
    /**
     * Date and time of the event
     * 
     */
    public final static String s_p_dateTime_A = "http://cargo.iata.org/Event#dateTime";
    public final static IRI p_dateTime_A = IRI.create(s_p_dateTime_A);
    /**
     * Movement or milestone code. Refer CXML Code List 1.18, e.g. DEP, ARR, FOH, RCS
     * 
     */
    public final static String s_p_eventCode = "http://cargo.iata.org/Event#eventCode";
    public final static IRI p_eventCode = IRI.create(s_p_eventCode);
    /**
     * If no EventCode provided, event name - e.g. Security clearance
     * 
     */
    public final static String s_p_eventName = "http://cargo.iata.org/Event#eventName";
    public final static IRI p_eventName = IRI.create(s_p_eventName);
    /**
     * Indicates type of event e.g.  Scheduled, Estimated, Actual
     * 
     */
    public final static String s_p_eventTypeIndicator = "http://cargo.iata.org/Event#eventTypeIndicator";
    public final static IRI p_eventTypeIndicator = IRI.create(s_p_eventTypeIndicator);
    /**
     * Unique document identifier
     * 
     */
    public final static String s_p_documentID = "http://cargo.iata.org/ExternalReference#documentID";
    public final static IRI p_documentID = IRI.create(s_p_documentID);
    /**
     * If no DocumentType provided, name of the referenced document 
     * 
     */
    public final static String s_p_documentName = "http://cargo.iata.org/ExternalReference#documentName";
    public final static IRI p_documentName = IRI.create(s_p_documentName);
    /**
     * Type of the referenced document . Refer UNEDIFACT 1001  e.g. 740 - Air Waybill
     * 
     */
    public final static String s_p_documentType = "http://cargo.iata.org/ExternalReference#documentType";
    public final static IRI p_documentType = IRI.create(s_p_documentType);
    /**
     * Document version number
     * 
     */
    public final static String s_p_documentVersion = "http://cargo.iata.org/ExternalReference#documentVersion";
    public final static IRI p_documentVersion = IRI.create(s_p_documentVersion);
    /**
     * URI of document or logistics object
     * 
     */
    public final static String s_p_uri = "http://cargo.iata.org/ExternalReference#uri";
    public final static IRI p_uri = IRI.create(s_p_uri);
    /**
     * Position of the shipment in the aircraft - e.g. lower or main deck 
     * 
     */
    public final static String s_p_deckPosition = "http://cargo.iata.org/Handling#deckPosition";
    public final static IRI p_deckPosition = IRI.create(s_p_deckPosition);
    /**
     * Bulk or containerized (BLK or ULD) indicator
     * 
     */
    public final static String s_p_loadTypeCode = "http://cargo.iata.org/Handling#loadTypeCode";
    public final static IRI p_loadTypeCode = IRI.create(s_p_loadTypeCode);
    /**
     * Item serial number or unique item identifier
     * 
     */
    public final static String s_p_itemIdentifier = "http://cargo.iata.org/Item#itemIdentifier";
    public final static IRI p_itemIdentifier = IRI.create(s_p_itemIdentifier);
    /**
     * Location code of airport, freight terminal, seaport, rail station. UN/LOCODE city code (5 letter) or IATA airport code (3 letter)
     * 
     */
    public final static String s_p_code_A_A_A = "http://cargo.iata.org/Location#code";
    public final static IRI p_code_A_A_A = IRI.create(s_p_code_A_A_A);
    /**
     * Full name of the location
     * 
     */
    public final static String s_p_name_A_A = "http://cargo.iata.org/Location#name";
    public final static IRI p_name_A_A = IRI.create(s_p_name_A_A);
    /**
     * Location type - e.g. Airport, Freight terminal, Rail station, Seaport, etc
     * 
     */
    public final static String s_p_type_A_A = "http://cargo.iata.org/Location#type";
    public final static IRI p_type_A_A = IRI.create(s_p_type_A_A);
    /**
     * Contact details e.g. Skype ID 
     * 
     */
    public final static String s_p_detail = "http://cargo.iata.org/Other#detail";
    public final static IRI p_detail = IRI.create(s_p_detail);
    /**
     * Contact type - e.g. Skype
     * 
     */
    public final static String s_p_type_A_A_A = "http://cargo.iata.org/Other#type";
    public final static IRI p_type_A_A_A = IRI.create(s_p_type_A_A_A);
    /**
     * Customs content code. Refer CXML Code List 1.100, e.g. IST - Security Textual StatementNumber, M - Movement Reference Number
     * 
     */
    public final static String s_p_customsContentCode = "http://cargo.iata.org/OtherCustomsInformation#customsContentCode";
    public final static IRI p_customsContentCode = IRI.create(s_p_customsContentCode);
    /**
     * Information for customs submission
     * 
     */
    public final static String s_p_customsInformation_A = "http://cargo.iata.org/OtherCustomsInformation#customsInformation";
    public final static IRI p_customsInformation_A = IRI.create(s_p_customsInformation_A);
    /**
     * Free text f or customs remarks
     * 
     */
    public final static String s_p_customsNote = "http://cargo.iata.org/OtherCustomsInformation#customsNote";
    public final static IRI p_customsNote = IRI.create(s_p_customsNote);
    /**
     * Customs subject code. Refer CXML Code List 1.19, e.g. IMP for import, EXP for export, AGT for Agent, ISS for The Regulated Agent Issuing the Security Status for rdf:type Consignment etc.   At least one of the three elements (Country Code, Information Identifier or Customs, Security and Regulatory Control Information Identifier) must be completed
     * 
     */
    public final static String s_p_customsSubjectCode = "http://cargo.iata.org/OtherCustomsInformation#customsSubjectCode";
    public final static IRI p_customsSubjectCode = IRI.create(s_p_customsSubjectCode);
    /**
     * Item identifier
     * 
     */
    public final static String s_p_identifier = "http://cargo.iata.org/OtherIdentifier#identifier";
    public final static IRI p_identifier = IRI.create(s_p_identifier);
    /**
     * Identifier type or description
     * 
     */
    public final static String s_p_type_A_A_A_A = "http://cargo.iata.org/OtherIdentifier#type";
    public final static IRI p_type_A_A_A_A = IRI.create(s_p_type_A_A_A_A);
    /**
     * Role of other party - e.g. Notify party, Nominated agent, Customs broker, Manufacturer, Importer, Payer, Payee, ShipTo, ShipFrom, BillTo, BillFrom, RemitTo, RemitFrom 
     * 
     */
    public final static String s_p_roleName = "http://cargo.iata.org/OtherParty#roleName";
    public final static IRI p_roleName = IRI.create(s_p_roleName);
    /**
     * Packaging type identifier as per UNECE Rec 21 Annex V and VI e.g. 1A - Drum, steel
     * 
     */
    public final static String s_p_code_A_A_A_A = "http://cargo.iata.org/PackagingType#code";
    public final static IRI p_code_A_A_A_A = IRI.create(s_p_code_A_A_A_A);
    /**
     * If no Code provided, packaging type description
     * 
     */
    public final static String s_p_description_A_A = "http://cargo.iata.org/PackagingType#description";
    public final static IRI p_description_A_A = IRI.create(s_p_description_A_A);
    /**
     * Contact type - e.g. Emergency contact, Customs contact, Customer contact
     * 
     */
    public final static String s_p_contactType = "http://cargo.iata.org/Person#contactType";
    public final static IRI p_contactType = IRI.create(s_p_contactType);
    /**
     * Department / Division / Unit
     * 
     */
    public final static String s_p_department = "http://cargo.iata.org/Person#department";
    public final static IRI p_department = IRI.create(s_p_department);
    /**
     * Employee ID
     * 
     */
    public final static String s_p_employeeId = "http://cargo.iata.org/Person#employeeId";
    public final static IRI p_employeeId = IRI.create(s_p_employeeId);
    /**
     * First name / given name
     * 
     */
    public final static String s_p_firstName = "http://cargo.iata.org/Person#firstName";
    public final static IRI p_firstName = IRI.create(s_p_firstName);
    /**
     * Job title / position
     * 
     */
    public final static String s_p_jobTitle = "http://cargo.iata.org/Person#jobTitle";
    public final static IRI p_jobTitle = IRI.create(s_p_jobTitle);
    /**
     * Last name / family name / surname
     * 
     */
    public final static String s_p_lastName = "http://cargo.iata.org/Person#lastName";
    public final static IRI p_lastName = IRI.create(s_p_lastName);
    /**
     * Middle name/ other name
     * 
     */
    public final static String s_p_middleName = "http://cargo.iata.org/Person#middleName";
    public final static IRI p_middleName = IRI.create(s_p_middleName);
    /**
     * Salutation 
     * 
     */
    public final static String s_p_salutation = "http://cargo.iata.org/Person#salutation";
    public final static IRI p_salutation = IRI.create(s_p_salutation);
    /**
     * Number of contained pieces 
     * 
     */
    public final static String s_p_containedPieceCount = "http://cargo.iata.org/Piece#containedPieceCount";
    public final static IRI p_containedPieceCount = IRI.create(s_p_containedPieceCount);
    /**
     * General goods description
     * 
     */
    public final static String s_p_goodsDescription = "http://cargo.iata.org/Piece#goodsDescription";
    public final static IRI p_goodsDescription = IRI.create(s_p_goodsDescription);
    /**
     * Shipper's Load And Count  ( total contained piece count as provided by shipper)
     * 
     */
    public final static String s_p_sLAC = "http://cargo.iata.org/Piece#sLAC";
    public final static IRI p_sLAC = IRI.create(s_p_sLAC);
    /**
     * Unique Piece Identifier (UPID) of the piece. Refer IATA Recommended Practice 1689
     * 
     */
    public final static String s_p_uPID = "http://cargo.iata.org/Piece#uPID";
    public final static IRI p_uPID = IRI.create(s_p_uPID);
    /**
     * Product quantity for unit price - e.g. 12 (eggs for one USD 1)
     * 
     */
    public final static String s_p_quantityForUnitPrice = "http://cargo.iata.org/Price#quantityForUnitPrice";
    public final static IRI p_quantityForUnitPrice = IRI.create(s_p_quantityForUnitPrice);
    /**
     * Product description
     * 
     */
    public final static String s_p_productDescription = "http://cargo.iata.org/Product#productDescription";
    public final static IRI p_productDescription = IRI.create(s_p_productDescription);
    /**
     * Manufacturer's unique product identifier
     * 
     */
    public final static String s_p_productIdentifier = "http://cargo.iata.org/Product#productIdentifier";
    public final static IRI p_productIdentifier = IRI.create(s_p_productIdentifier);
    /**
     * Reference identifying the United Nations Dangerous Goods serial number assigned within the UN to substances and articles contained in type list of the dangerous goods most commonly carried. e.g. 1189 - Ethylene glycol monomethyl ether acetate
     * 
     */
    public final static String s_p_uNNumber = "http://cargo.iata.org/Product#uNNumber";
    public final static IRI p_uNNumber = IRI.create(s_p_uNNumber);
    /**
     * Production batch number / reference
     * 
     */
    public final static String s_p_batchNumber = "http://cargo.iata.org/Production#batchNumber";
    public final static IRI p_batchNumber = IRI.create(s_p_batchNumber);
    /**
     * Production lot number / reference
     * 
     */
    public final static String s_p_lotNumber = "http://cargo.iata.org/Production#lotNumber";
    public final static IRI p_lotNumber = IRI.create(s_p_lotNumber);
    /**
     * Product expiry date - e.g. for perishables goods or goods with programmed obsolescence
     * 
     */
    public final static String s_p_productExpiryDate = "http://cargo.iata.org/Production#productExpiryDate";
    public final static IRI p_productExpiryDate = IRI.create(s_p_productExpiryDate);
    /**
     * Production date
     * 
     */
    public final static String s_p_productionDate = "http://cargo.iata.org/Production#productionDate";
    public final static IRI p_productionDate = IRI.create(s_p_productionDate);
    /**
     * Commodity identifier on which the rate class code is applied
     * 
     */
    public final static String s_p_commodityItemNumber = "http://cargo.iata.org/Rating#commodityItemNumber";
    public final static IRI p_commodityItemNumber = IRI.create(s_p_commodityItemNumber);
    /**
     * Bulk or containerized (BLK or ULD) indicator
     * 
     */
    public final static String s_p_loadTypeCode_A = "http://cargo.iata.org/Rating#loadTypeCode";
    public final static IRI p_loadTypeCode_A = IRI.create(s_p_loadTypeCode_A);
    /**
     * Basis on which the Rate Class Code is applicable
     * 
     */
    public final static String s_p_rateClassBasis = "http://cargo.iata.org/Rating#rateClassBasis";
    public final static IRI p_rateClassBasis = IRI.create(s_p_rateClassBasis);
    /**
     * Rate category code. Refer  CXML Code List 1.4,  e.g. Q - Quantity Rate
     * 
     */
    public final static String s_p_rateClassCode = "http://cargo.iata.org/Rating#rateClassCode";
    public final static IRI p_rateClassCode = IRI.create(s_p_rateClassCode);
    /**
     * Code to indicate the applicable rate
     * 
     */
    public final static String s_p_rateReferenceCode = "http://cargo.iata.org/Rating#rateReferenceCode";
    public final static IRI p_rateReferenceCode = IRI.create(s_p_rateReferenceCode);
    /**
     * Type of rate - e.g. contract, adhoc, etc.
     * 
     */
    public final static String s_p_rateReferenceType = "http://cargo.iata.org/Rating#rateReferenceType";
    public final static IRI p_rateReferenceType = IRI.create(s_p_rateReferenceType);
    /**
     * Rating class percentage
     * 
     */
    public final static String s_p_ratingClassPercentage = "http://cargo.iata.org/Rating#ratingClassPercentage";
    public final static IRI p_ratingClassPercentage = IRI.create(s_p_ratingClassPercentage);
    /**
     * Transportation rating type - e.g. F for Face, P for Published, or rdf:type for Actual Rating detail
     * 
     */
    public final static String s_p_ratingTypeIndicator = "http://cargo.iata.org/Rating#ratingTypeIndicator";
    public final static IRI p_ratingTypeIndicator = IRI.create(s_p_ratingTypeIndicator);
    /**
     * City code of Rate Combination Point (RCP), the point over which sector rates are combined
     * 
     */
    public final static String s_p_rcp = "http://cargo.iata.org/Rating#rcp";
    public final static IRI p_rcp = IRI.create(s_p_rcp);
    /**
     * Unit Load Device rate class type e.g. 1P
     * 
     */
    public final static String s_p_uldRateClassType = "http://cargo.iata.org/Rating#uldRateClassType";
    public final static IRI p_uldRateClassType = IRI.create(s_p_uldRateClassType);
    /**
     * Exemption code - e.g. BIOM- Bio-Medical Samples 
     * 
     */
    public final static String s_p_groundsForExemption = "http://cargo.iata.org/ReasonsForSecurityStatus#groundsForExemption";
    public final static IRI p_groundsForExemption = IRI.create(s_p_groundsForExemption);
    /**
     * Other methods used to secure the cargo
     * 
     */
    public final static String s_p_otherScreeningMethods = "http://cargo.iata.org/ReasonsForSecurityStatus#otherScreeningMethods";
    public final static IRI p_otherScreeningMethods = IRI.create(s_p_otherScreeningMethods);
    /**
     * Screening methods which have been used to secure the cargo - e.g. EDS- Explosive Detection System 
     * 
     */
    public final static String s_p_screeningMethod = "http://cargo.iata.org/ReasonsForSecurityStatus#screeningMethod";
    public final static IRI p_screeningMethod = IRI.create(s_p_screeningMethod);
    /**
     * Expiry date 4 digits month/year
     * 
     */
    public final static String s_p_expiryDate = "http://cargo.iata.org/ReceivedFrom#expiryDate";
    public final static IRI p_expiryDate = IRI.create(s_p_expiryDate);
    /**
     * Party type - e.g. RA - Regulated Agent, KC - Known Consignor, AO - Aircraft Operator, RC - Regulated Carrier
     * 
     */
    public final static String s_p_regulatedPartyType = "http://cargo.iata.org/ReceivedFrom#regulatedPartyType";
    public final static IRI p_regulatedPartyType = IRI.create(s_p_regulatedPartyType);
    /**
     * Ad hoc security statement required by state regulators 
     * 
     */
    public final static String s_p_additionalSecurityInformation = "http://cargo.iata.org/SecurityInfo#additionalSecurityInformation";
    public final static IRI p_additionalSecurityInformation = IRI.create(s_p_additionalSecurityInformation);
    /**
     * Country ISO code. Refer ISO 3166-2
     * 
     */
    public final static String s_p_regulatingAuthority = "http://cargo.iata.org/SecurityInfo#regulatingAuthority";
    public final static IRI p_regulatingAuthority = IRI.create(s_p_regulatingAuthority);
    /**
     * Date and time when the security status was issued
     * 
     */
    public final static String s_p_issuedOn = "http://cargo.iata.org/SecurityStatus#issuedOn";
    public final static IRI p_issuedOn = IRI.create(s_p_issuedOn);
    /**
     * Party type - e.g. RA - Regulated Agent, KC - Known Consignor, AO - Aircraft Operator, RC - Regulated Carrier
     * 
     */
    public final static String s_p_regulatedPartyType_A = "http://cargo.iata.org/SecurityStatus#regulatedPartyType";
    public final static IRI p_regulatedPartyType_A = IRI.create(s_p_regulatedPartyType_A);
    /**
     * Security status indicator - e.g. SPX- Cargo Secure for Passenger and All-Cargo Aircraft 
     * 
     */
    public final static String s_p_statusCode = "http://cargo.iata.org/SecurityStatus#statusCode";
    public final static IRI p_statusCode = IRI.create(s_p_statusCode);
    /**
     * Service request code
     * 
     */
    public final static String s_p_code_A_A_A_A_A = "http://cargo.iata.org/ServiceRequest#code";
    public final static IRI p_code_A_A_A_A_A = IRI.create(s_p_code_A_A_A_A_A);
    /**
     * Service request description
     * 
     */
    public final static String s_p_description_A_A_A = "http://cargo.iata.org/ServiceRequest#description";
    public final static IRI p_description_A_A_A = IRI.create(s_p_description_A_A_A);
    /**
     * Service request statement text
     * 
     */
    public final static String s_p_statementText = "http://cargo.iata.org/ServiceRequest#statementText";
    public final static IRI p_statementText = IRI.create(s_p_statementText);
    /**
     * Service request statement type - e.g. Dangerous Goods, Lithium Ion Battery, Live Animal Certificate
     * 
     */
    public final static String s_p_statementType = "http://cargo.iata.org/ServiceRequest#statementType";
    public final static IRI p_statementType = IRI.create(s_p_statementType);
    /**
     * Special handling code following IATA standards. Refer CXML1.16,  e.g. PEP - Fruits and Vegetables
     * 
     */
    public final static String s_p_code_A_A_A_A_A_A = "http://cargo.iata.org/SpecialHandling#code";
    public final static IRI p_code_A_A_A_A_A_A = IRI.create(s_p_code_A_A_A_A_A_A);
    /**
     * If no Code provided, special handling description. Refer CXML1.16,  e.g. Cargo Aircraft Only
     * 
     */
    public final static String s_p_description_A_A_A_A = "http://cargo.iata.org/SpecialHandling#description";
    public final static IRI p_description_A_A_A_A = IRI.create(s_p_description_A_A_A_A);
    /**
     * Special service scheduled date and time
     * 
     */
    public final static String s_p_dateTime_A_A = "http://cargo.iata.org/SpecialService#dateTime";
    public final static IRI p_dateTime_A_A = IRI.create(s_p_dateTime_A_A);
    /**
     * Special service description
     * 
     */
    public final static String s_p_description_A_A_A_A_A = "http://cargo.iata.org/SpecialService#description";
    public final static IRI p_description_A_A_A_A_A = IRI.create(s_p_description_A_A_A_A_A);
    /**
     * Guaranteed capacity reference details
     * 
     */
    public final static String s_p_allotmentDetails = "http://cargo.iata.org/TransportSegment#allotmentDetails";
    public final static IRI p_allotmentDetails = IRI.create(s_p_allotmentDetails);
    /**
     * Carriage stage - e.g. Pre-Carriage, Main-Carriage, On-Carriage 
     * 
     */
    public final static String s_p_carriageStage = "http://cargo.iata.org/TransportSegment#carriageStage";
    public final static IRI p_carriageStage = IRI.create(s_p_carriageStage);
    /**
     * Position of the shipment in the aircraft - e.g. lower or main deck 
     * 
     */
    public final static String s_p_deckPosition_A = "http://cargo.iata.org/TransportSegment#deckPosition";
    public final static IRI p_deckPosition_A = IRI.create(s_p_deckPosition_A);
    /**
     * Exception handling code or details
     * 
     */
    public final static String s_p_exceptionHandlingDetails = "http://cargo.iata.org/TransportSegment#exceptionHandlingDetails";
    public final static IRI p_exceptionHandlingDetails = IRI.create(s_p_exceptionHandlingDetails);
    /**
     * Mode of transport code. Refer UNECE Recommendation N. 19 - Code for Modes of Transport,  e.g. 4 - Air transport
     * 
     */
    public final static String s_p_modeCode = "http://cargo.iata.org/TransportSegment#modeCode";
    public final static IRI p_modeCode = IRI.create(s_p_modeCode);
    /**
     * Seal identifier
     * 
     */
    public final static String s_p_seal = "http://cargo.iata.org/TransportSegment#seal";
    public final static IRI p_seal = IRI.create(s_p_seal);
    /**
     * Space allocation request / action / confirmation code or details
     * 
     */
    public final static String s_p_spaceAllocationDetails = "http://cargo.iata.org/TransportSegment#spaceAllocationDetails";
    public final static IRI p_spaceAllocationDetails = IRI.create(s_p_spaceAllocationDetails);
    /**
     * Date associated with TransportIdentifier to uniquely identify the transport line 
     * 
     */
    public final static String s_p_transportDate = "http://cargo.iata.org/TransportSegment#transportDate";
    public final static IRI p_transportDate = IRI.create(s_p_transportDate);
    /**
     * Airline flight number, or rail /  truck / maritime line id
     * 
     */
    public final static String s_p_transportIdentifier = "http://cargo.iata.org/TransportSegment#transportIdentifier";
    public final static IRI p_transportIdentifier = IRI.create(s_p_transportIdentifier);
    /**
     * Vehicle identification - e.g. aircraft registration number
     * 
     */
    public final static String s_p_vehicleRegistration = "http://cargo.iata.org/TransportSegment#vehicleRegistration";
    public final static IRI p_vehicleRegistration = IRI.create(s_p_vehicleRegistration);
    /**
     * Size of the vehicle - free text
     * 
     */
    public final static String s_p_vehicleSize = "http://cargo.iata.org/TransportSegment#vehicleSize";
    public final static IRI p_vehicleSize = IRI.create(s_p_vehicleSize);
    /**
     * Vehicle or container type. Refer UNECE28, e.g. 4.00.0 - Aircraft, type unknown
     * 
     */
    public final static String s_p_vehicleType = "http://cargo.iata.org/TransportSegment#vehicleType";
    public final static IRI p_vehicleType = IRI.create(s_p_vehicleType);
    /**
     * US / ATA Unit Load Device type code e.g. M2
     * 
     */
    public final static String s_p_aTAdesignator = "http://cargo.iata.org/Uld#aTAdesignator";
    public final static IRI p_aTAdesignator = IRI.create(s_p_aTAdesignator);
    /**
     * Number of contained pieces 
     * 
     */
    public final static String s_p_containedPieceCount_A = "http://cargo.iata.org/Uld#containedPieceCount";
    public final static IRI p_containedPieceCount_A = IRI.create(s_p_containedPieceCount_A);
    /**
     * ULD height or loading limitation code. Refer CXML Code List 1.47,  e.g. R - ULD Height above 244 centimetres
     * 
     */
    public final static String s_p_loadingIndicator = "http://cargo.iata.org/Uld#loadingIndicator";
    public final static IRI p_loadingIndicator = IRI.create(s_p_loadingIndicator);
    /**
     * Owner code of the ULD in aa, an or na format - owner can be an airline or leasing company
     * 
     */
    public final static String s_p_ownerCode = "http://cargo.iata.org/Uld#ownerCode";
    public final static IRI p_ownerCode = IRI.create(s_p_ownerCode);
    /**
     * Issuer of the ULD owner code
     * 
     */
    public final static String s_p_ownerCodeIssuer = "http://cargo.iata.org/Uld#ownerCodeIssuer";
    public final static IRI p_ownerCodeIssuer = IRI.create(s_p_ownerCodeIssuer);
    /**
     * Shipper's Load And Count  ( total contained piece count as provided by shipper)
     * 
     */
    public final static String s_p_sLAC_A = "http://cargo.iata.org/Uld#sLAC";
    public final static IRI p_sLAC_A = IRI.create(s_p_sLAC_A);
    /**
     * ULD serial number
     * 
     */
    public final static String s_p_serialNumber = "http://cargo.iata.org/Uld#serialNumber";
    public final static IRI p_serialNumber = IRI.create(s_p_serialNumber);
    /**
     * Standard Unit Load Device type code e.g. AKE - Certified Container - Contoured
     * 
     */
    public final static String s_p_type_A_A_A_A_A = "http://cargo.iata.org/Uld#type";
    public final static IRI p_type_A_A_A_A_A = IRI.create(s_p_type_A_A_A_A_A);
    /**
     * Unit of measurement/ unit of account e.g. CMT - Centimetre,  LTR - Litre (1 DM3), KGM - Kilogram, CHF - Swiss Franc
     * 
     */
    public final static String s_p_unit = "http://cargo.iata.org/Value#unit";
    public final static IRI p_unit = IRI.create(s_p_unit);
    /**
     * Value
     * 
     */
    public final static String s_p_value_A = "http://cargo.iata.org/Value#value";
    public final static IRI p_value_A = IRI.create(s_p_value_A);
    public final static String s_p_description_A_A_A_A_A_A = "http://purl.org/dc/elements/1.1/description";
    public final static IRI p_description_A_A_A_A_A_A = IRI.create(s_p_description_A_A_A_A_A_A);
    public final static String s_p_title = "http://purl.org/dc/elements/1.1/title";
    public final static IRI p_title = IRI.create(s_p_title);
    public final static String s_p_comment = "http://www.w3.org/2000/01/rdf-schema#comment";
    public final static IRI p_comment = IRI.create(s_p_comment);
    public final static String s_p_label = "http://www.w3.org/2000/01/rdf-schema#label";
    public final static IRI p_label = IRI.create(s_p_label);

}
