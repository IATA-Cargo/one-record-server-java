
package org.iata.cargo.model;

import java.io.Serializable;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Set;
import cz.cvut.kbss.jopa.model.annotations.Id;
import cz.cvut.kbss.jopa.model.annotations.OWLAnnotationProperty;
import cz.cvut.kbss.jopa.model.annotations.OWLClass;
import cz.cvut.kbss.jopa.model.annotations.OWLDataProperty;
import cz.cvut.kbss.jopa.model.annotations.OWLObjectProperty;
import cz.cvut.kbss.jopa.model.annotations.ParticipationConstraint;
import cz.cvut.kbss.jopa.model.annotations.ParticipationConstraints;
import cz.cvut.kbss.jopa.model.annotations.Properties;
import cz.cvut.kbss.jopa.model.annotations.Types;
import cz.cvut.kbss.jopa.vocabulary.RDFS;
import org.iata.cargo.Vocabulary;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * Measurements details for Sensors, either generic or geolocation measurements are recorded
 * 
 * This class was generated by OWL2Java 0.20.2
 * 
 */
@OWLClass(iri = Vocabulary.s_c_Measurement)
public class Measurement
    implements Serializable
{

    @Id(generated = true)
@JsonProperty("@id")
    protected String id;
    @OWLAnnotationProperty(iri = RDFS.LABEL)
@JsonIgnore
    protected String name;
    @OWLAnnotationProperty(iri = cz.cvut.kbss.jopa.vocabulary.DC.Elements.DESCRIPTION)
@JsonIgnore
    protected String description;
    @Types
@JsonProperty("@type")
    protected Set<String> types;
    @Properties
@JsonIgnore
    protected Map<String, Set<String>> properties;
    /**
     * Information about all non-Geolocation values of the measurement
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_hasMeasurementValue)
@JsonProperty(Vocabulary.s_p_hasMeasurementValue)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Value, max = 1)
    })
    protected Value hasMeasurementValue;
    /**
     * Reference to the Geolocation recorded of the measurement
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_hasRecordedGeolocation)
@JsonProperty(Vocabulary.s_p_hasRecordedGeolocation)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Geolocation, max = 1)
    })
    protected Geolocation hasRecordedGeolocation;
    /**
     * Timestamp for the measurement
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_hasMeasurementTimestamp)
@JsonProperty(Vocabulary.s_p_hasMeasurementTimestamp)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#dateTime", max = 1)
    })
    protected OffsetDateTime hasMeasurementTimestamp;

    public void setId(String id) {
        this.id = id;
    }

    public String getId() {
        return id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getDescription() {
        return description;
    }

    public void setTypes(Set<String> types) {
        this.types = types;
    }

    public Set<String> getTypes() {
        return types;
    }

    public void setProperties(Map<String, Set<String>> properties) {
        this.properties = properties;
    }

    public Map<String, Set<String>> getProperties() {
        return properties;
    }

    @Override
    public String toString() {
        return ((((("Measurement {"+ name)+"<")+ id)+">")+"}");
    }

    public void setHasMeasurementValue(Value hasMeasurementValue) {
        this.hasMeasurementValue = hasMeasurementValue;
    }

    public Value getHasMeasurementValue() {
        return hasMeasurementValue;
    }

    public void setHasRecordedGeolocation(Geolocation hasRecordedGeolocation) {
        this.hasRecordedGeolocation = hasRecordedGeolocation;
    }

    public Geolocation getHasRecordedGeolocation() {
        return hasRecordedGeolocation;
    }

    public void setHasMeasurementTimestamp(OffsetDateTime hasMeasurementTimestamp) {
        this.hasMeasurementTimestamp = hasMeasurementTimestamp;
    }

    public OffsetDateTime getHasMeasurementTimestamp() {
        return hasMeasurementTimestamp;
    }

}
