
package org.iata.cargo;

import org.semanticweb.owlapi.model.IRI;


/**
 * This class was generated by OWL2Java 0.14.2
 * 
 */
public class Vocabulary {

    public final static String ONTOLOGY_IRI_ = "https://onerecord.iata.org/";
    public final static String ONTOLOGY_IRI_onerecord_dot_iata_dot_org_generated = "https://onerecord.iata.org-generated";
    public final static String s_c_Thing = "http://www.w3.org/2002/07/owl#Thing";
    public final static IRI c_Thing = IRI.create(s_c_Thing);
    /**
     * Address details
     * 
     */
    public final static String s_c_Address = "https://onerecord.iata.org/Address";
    public final static IRI c_Address = IRI.create(s_c_Address);
    /**
     * Booking details
     * 
     */
    public final static String s_c_Booking = "https://onerecord.iata.org/Booking";
    public final static IRI c_Booking = IRI.create(s_c_Booking);
    /**
     * Booking request details
     * 
     */
    public final static String s_c_BookingRequest = "https://onerecord.iata.org/BookingRequest";
    public final static IRI c_BookingRequest = IRI.create(s_c_BookingRequest);
    /**
     * Company branches
     * 
     */
    public final static String s_c_Branch = "https://onerecord.iata.org/Branch";
    public final static IRI c_Branch = IRI.create(s_c_Branch);
    /**
     * CO2 calculation methods
     * 
     */
    public final static String s_c_CO2CalcMethod = "https://onerecord.iata.org/CO2CalcMethod";
    public final static IRI c_CO2CalcMethod = IRI.create(s_c_CO2CalcMethod);
    /**
     * Carrier product details
     * 
     */
    public final static String s_c_CarrierProduct = "https://onerecord.iata.org/CarrierProduct";
    public final static IRI c_CarrierProduct = IRI.create(s_c_CarrierProduct);
    /**
     * Product additional details
     * 
     */
    public final static String s_c_Characteristics = "https://onerecord.iata.org/Characteristics";
    public final static IRI c_Characteristics = IRI.create(s_c_Characteristics);
    /**
     * Company details
     * 
     */
    public final static String s_c_Company = "https://onerecord.iata.org/Company";
    public final static IRI c_Company = IRI.create(s_c_Company);
    /**
     * Contact details
     * 
     */
    public final static String s_c_Contact = "https://onerecord.iata.org/Contact";
    public final static IRI c_Contact = IRI.create(s_c_Contact);
    /**
     * Other contact options e.g. Skype, Whatsapp, Viber, Fax etc
     * 
     */
    public final static String s_c_ContactOther = "https://onerecord.iata.org/ContactOther";
    public final static IRI c_ContactOther = IRI.create(s_c_ContactOther);
    /**
     * Country details
     * 
     */
    public final static String s_c_Country = "https://onerecord.iata.org/Country";
    public final static IRI c_Country = IRI.create(s_c_Country);
    /**
     * Customs information details
     * 
     */
    public final static String s_c_CustomsInfo = "https://onerecord.iata.org/CustomsInfo";
    public final static IRI c_CustomsInfo = IRI.create(s_c_CustomsInfo);
    /**
     * Dangerous goods details
     * 
     */
    public final static String s_c_DangerousGoods = "https://onerecord.iata.org/DangerousGoods";
    public final static IRI c_DangerousGoods = IRI.create(s_c_DangerousGoods);
    /**
     * Dimension details
     * 
     */
    public final static String s_c_Dimensions = "https://onerecord.iata.org/Dimensions";
    public final static IRI c_Dimensions = IRI.create(s_c_Dimensions);
    /**
     * Event details
     * 
     */
    public final static String s_c_Event = "https://onerecord.iata.org/Event";
    public final static IRI c_Event = IRI.create(s_c_Event);
    /**
     * Reference documents details
     * 
     */
    public final static String s_c_ExternalReference = "https://onerecord.iata.org/ExternalReference";
    public final static IRI c_ExternalReference = IRI.create(s_c_ExternalReference);
    /**
     * Geolocation details - e.g. for drones, automated vehicles...
     * 
     */
    public final static String s_c_Geolocation = "https://onerecord.iata.org/Geolocation";
    public final static IRI c_Geolocation = IRI.create(s_c_Geolocation);
    /**
     * Insurance details
     * 
     */
    public final static String s_c_Insurance = "https://onerecord.iata.org/Insurance";
    public final static IRI c_Insurance = IRI.create(s_c_Insurance);
    /**
     * Item details
     * 
     */
    public final static String s_c_Item = "https://onerecord.iata.org/Item";
    public final static IRI c_Item = IRI.create(s_c_Item);
    /**
     * Loading location details
     * 
     */
    public final static String s_c_Location = "https://onerecord.iata.org/Location";
    public final static IRI c_Location = IRI.create(s_c_Location);
    /**
     * Offer in response to a booking request
     * 
     */
    public final static String s_c_Offer = "https://onerecord.iata.org/Offer";
    public final static IRI c_Offer = IRI.create(s_c_Offer);
    /**
     * Other identifiers
     * 
     */
    public final static String s_c_OtherIdentifier = "https://onerecord.iata.org/OtherIdentifier";
    public final static IRI c_OtherIdentifier = IRI.create(s_c_OtherIdentifier);
    /**
     * Company details
     * 
     */
    public final static String s_c_OtherParty = "https://onerecord.iata.org/OtherParty";
    public final static IRI c_OtherParty = IRI.create(s_c_OtherParty);
    /**
     * Packaging details 
     * 
     */
    public final static String s_c_PackagingType = "https://onerecord.iata.org/PackagingType";
    public final static IRI c_PackagingType = IRI.create(s_c_PackagingType);
    /**
     * Person details
     * 
     */
    public final static String s_c_Person = "https://onerecord.iata.org/Person";
    public final static IRI c_Person = IRI.create(s_c_Person);
    /**
     * Individual piece or virtual grouping of pieces
     * 
     */
    public final static String s_c_Piece = "https://onerecord.iata.org/Piece";
    public final static IRI c_Piece = IRI.create(s_c_Piece);
    /**
     * Price associated to the offer/booking
     * 
     */
    public final static String s_c_Price = "https://onerecord.iata.org/Price";
    public final static IRI c_Price = IRI.create(s_c_Price);
    /**
     * Product details
     * 
     */
    public final static String s_c_Product = "https://onerecord.iata.org/Product";
    public final static IRI c_Product = IRI.create(s_c_Product);
    /**
     * Quote request details
     * 
     */
    public final static String s_c_QuoteRequest = "https://onerecord.iata.org/QuoteRequest";
    public final static IRI c_QuoteRequest = IRI.create(s_c_QuoteRequest);
    /**
     * Quote response to a quote request
     * 
     */
    public final static String s_c_QuoteResponse = "https://onerecord.iata.org/QuoteResponse";
    public final static IRI c_QuoteResponse = IRI.create(s_c_QuoteResponse);
    /**
     * Ranges
     * 
     */
    public final static String s_c_Ranges = "https://onerecord.iata.org/Ranges";
    public final static IRI c_Ranges = IRI.create(s_c_Ranges);
    /**
     * Ratings details
     * 
     */
    public final static String s_c_Ratings = "https://onerecord.iata.org/Ratings";
    public final static IRI c_Ratings = IRI.create(s_c_Ratings);
    /**
     * Security status details
     * 
     */
    public final static String s_c_ReasonsForSecurityStatus = "https://onerecord.iata.org/ReasonsForSecurityStatus";
    public final static IRI c_ReasonsForSecurityStatus = IRI.create(s_c_ReasonsForSecurityStatus);
    /**
     * Known Consignor or Regulated Agent reference
     * 
     */
    public final static String s_c_ReceivedFrom = "https://onerecord.iata.org/ReceivedFrom";
    public final static IRI c_ReceivedFrom = IRI.create(s_c_ReceivedFrom);
    /**
     * Routing details
     * 
     */
    public final static String s_c_Routing = "https://onerecord.iata.org/Routing";
    public final static IRI c_Routing = IRI.create(s_c_Routing);
    /**
     * Security status details
     * 
     */
    public final static String s_c_SecurityStatus = "https://onerecord.iata.org/SecurityStatus";
    public final static IRI c_SecurityStatus = IRI.create(s_c_SecurityStatus);
    /**
     * Service request details
     * 
     */
    public final static String s_c_ServiceRequest = "https://onerecord.iata.org/ServiceRequest";
    public final static IRI c_ServiceRequest = IRI.create(s_c_ServiceRequest);
    /**
     * Shipment details
     * 
     */
    public final static String s_c_Shipment = "https://onerecord.iata.org/Shipment";
    public final static IRI c_Shipment = IRI.create(s_c_Shipment);
    /**
     * Special handling details
     * 
     */
    public final static String s_c_SpecialHandling = "https://onerecord.iata.org/SpecialHandling";
    public final static IRI c_SpecialHandling = IRI.create(s_c_SpecialHandling);
    /**
     * Transport means details
     * 
     */
    public final static String s_c_TransportMeans = "https://onerecord.iata.org/TransportMeans";
    public final static IRI c_TransportMeans = IRI.create(s_c_TransportMeans);
    /**
     * Transport segment details
     * 
     */
    public final static String s_c_TransportSegment = "https://onerecord.iata.org/TransportSegment";
    public final static IRI c_TransportSegment = IRI.create(s_c_TransportSegment);
    /**
     * Unit Load Device details
     * 
     */
    public final static String s_c_ULD = "https://onerecord.iata.org/ULD";
    public final static IRI c_ULD = IRI.create(s_c_ULD);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_c_Value = "https://onerecord.iata.org/Value";
    public final static IRI c_Value = IRI.create(s_c_Value);
    /**
     * Unit of measurement details
     * 
     */
    public final static String s_c_VolumetricWeight = "https://onerecord.iata.org/VolumetricWeight";
    public final static IRI c_VolumetricWeight = IRI.create(s_c_VolumetricWeight);
    /**
     * Waybill details
     * 
     */
    public final static String s_c_Waybill = "https://onerecord.iata.org/Waybill";
    public final static IRI c_Waybill = IRI.create(s_c_Waybill);
    /**
     * Country details
     * 
     */
    public final static String s_p_country = "https://onerecord.iata.org/Address#country";
    public final static IRI p_country = IRI.create(s_p_country);
    /**
     * Carrier details
     * 
     */
    public final static String s_p_carrier = "https://onerecord.iata.org/Booking#carrier";
    public final static IRI p_carrier = IRI.create(s_p_carrier);
    /**
     * Consignee details
     * 
     */
    public final static String s_p_consignee = "https://onerecord.iata.org/Booking#consignee";
    public final static IRI p_consignee = IRI.create(s_p_consignee);
    /**
     * Events and statuses linked to the booking
     * 
     */
    public final static String s_p_event = "https://onerecord.iata.org/Booking#event";
    public final static IRI p_event = IRI.create(s_p_event);
    /**
     * Freight Forwarder details
     * 
     */
    public final static String s_p_freightForwarder = "https://onerecord.iata.org/Booking#freightForwarder";
    public final static IRI p_freightForwarder = IRI.create(s_p_freightForwarder);
    /**
     * Other parties to be notified of the booking evolution
     * 
     */
    public final static String s_p_notifyParty = "https://onerecord.iata.org/Booking#notifyParty";
    public final static IRI p_notifyParty = IRI.create(s_p_notifyParty);
    /**
     * Reference to the Offer
     * 
     */
    public final static String s_p_offer = "https://onerecord.iata.org/Booking#offer";
    public final static IRI p_offer = IRI.create(s_p_offer);
    /**
     * Price of the Booking (if different from the offer)
     * 
     */
    public final static String s_p_price = "https://onerecord.iata.org/Booking#price";
    public final static IRI p_price = IRI.create(s_p_price);
    /**
     * Shipper information
     * 
     */
    public final static String s_p_shipper = "https://onerecord.iata.org/Booking#shipper";
    public final static IRI p_shipper = IRI.create(s_p_shipper);
    /**
     * House or Master Waybill unique identifier
     * 
     */
    public final static String s_p_waybillNumber = "https://onerecord.iata.org/Booking#waybillNumber";
    public final static IRI p_waybillNumber = IRI.create(s_p_waybillNumber);
    /**
     * Reference to the Offer or AllotmentCode
     * 
     */
    public final static String s_p_offer_A = "https://onerecord.iata.org/BookingRequest#offer";
    public final static IRI p_offer_A = IRI.create(s_p_offer_A);
    /**
     * House or Master Waybill unique identifier
     * 
     */
    public final static String s_p_waybillNumber_A = "https://onerecord.iata.org/BookingRequest#waybillNumber";
    public final static IRI p_waybillNumber_A = IRI.create(s_p_waybillNumber_A);
    /**
     * Contact person details
     * 
     */
    public final static String s_p_contactPerson = "https://onerecord.iata.org/Branch#contactPerson";
    public final static IRI p_contactPerson = IRI.create(s_p_contactPerson);
    /**
     * Location and address details
     * 
     */
    public final static String s_p_location = "https://onerecord.iata.org/Branch#location";
    public final static IRI p_location = IRI.create(s_p_location);
    /**
     * Other identifiers (e.g. LEI (Legal Entity Identifier), TIN (Trader Identification Number), PIMA address, Account number, VAT/Tax id, Legal Registration id, DUNS number, etc)
     * 
     */
    public final static String s_p_otherIdentifier = "https://onerecord.iata.org/Branch#otherIdentifier";
    public final static IRI p_otherIdentifier = IRI.create(s_p_otherIdentifier);
    /**
     * Company branches
     * 
     */
    public final static String s_p_branch = "https://onerecord.iata.org/Company#branch";
    public final static IRI p_branch = IRI.create(s_p_branch);
    /**
     * Other contact options e.g. Skype, Whatsapp, Viber, Fax etc
     * 
     */
    public final static String s_p_other = "https://onerecord.iata.org/Contact#other";
    public final static IRI p_other = IRI.create(s_p_other);
    /**
     * Height
     * 
     */
    public final static String s_p_height = "https://onerecord.iata.org/Dimensions#height";
    public final static IRI p_height = IRI.create(s_p_height);
    /**
     * Length
     * 
     */
    public final static String s_p_length = "https://onerecord.iata.org/Dimensions#length";
    public final static IRI p_length = IRI.create(s_p_length);
    /**
     * Volume
     * 
     */
    public final static String s_p_volume = "https://onerecord.iata.org/Dimensions#volume";
    public final static IRI p_volume = IRI.create(s_p_volume);
    /**
     * Width
     * 
     */
    public final static String s_p_width = "https://onerecord.iata.org/Dimensions#width";
    public final static IRI p_width = IRI.create(s_p_width);
    /**
     * Location of event
     * 
     */
    public final static String s_p_location_A = "https://onerecord.iata.org/Event#location";
    public final static IRI p_location_A = IRI.create(s_p_location_A);
    /**
     * Party performing the event
     * 
     */
    public final static String s_p_performedBy = "https://onerecord.iata.org/Event#performedBy";
    public final static IRI p_performedBy = IRI.create(s_p_performedBy);
    /**
     * Document originator details and contacts
     * 
     */
    public final static String s_p_documentOriginator = "https://onerecord.iata.org/ExternalReference#documentOriginator";
    public final static IRI p_documentOriginator = IRI.create(s_p_documentOriginator);
    /**
     * Elevation from sea level
     * 
     */
    public final static String s_p_elevation = "https://onerecord.iata.org/Geolocation#elevation";
    public final static IRI p_elevation = IRI.create(s_p_elevation);
    /**
     * Location latitude 
     * 
     */
    public final static String s_p_latitude = "https://onerecord.iata.org/Geolocation#latitude";
    public final static IRI p_latitude = IRI.create(s_p_latitude);
    /**
     * Location longitude 
     * 
     */
    public final static String s_p_longitude = "https://onerecord.iata.org/Geolocation#longitude";
    public final static IRI p_longitude = IRI.create(s_p_longitude);
    /**
     * Party covering the insurance 
     * 
     */
    public final static String s_p_coveringParty = "https://onerecord.iata.org/Insurance#coveringParty";
    public final static IRI p_coveringParty = IRI.create(s_p_coveringParty);
    /**
     * Insured amount - amount covered by the insurance policy
     * 
     */
    public final static String s_p_insuranceAmount = "https://onerecord.iata.org/Insurance#insuranceAmount";
    public final static IRI p_insuranceAmount = IRI.create(s_p_insuranceAmount);
    /**
     * Dimensions of the item
     * 
     */
    public final static String s_p_dimensions = "https://onerecord.iata.org/Item#dimensions";
    public final static IRI p_dimensions = IRI.create(s_p_dimensions);
    /**
     * Event details e.g. DEP, ARR, FOH, RCS, security screening, etc
     * 
     */
    public final static String s_p_event_A = "https://onerecord.iata.org/Item#event";
    public final static IRI p_event_A = IRI.create(s_p_event_A);
    /**
     * URI of the PIECE that contains the Item
     * 
     */
    public final static String s_p_isInPiece = "https://onerecord.iata.org/Item#isInPiece";
    public final static IRI p_isInPiece = IRI.create(s_p_isInPiece);
    /**
     * Other identifier details
     * 
     */
    public final static String s_p_otherIdentifier_A = "https://onerecord.iata.org/Item#otherIdentifier";
    public final static IRI p_otherIdentifier_A = IRI.create(s_p_otherIdentifier_A);
    /**
     * URI of the product
     * 
     */
    public final static String s_p_product = "https://onerecord.iata.org/Item#product";
    public final static IRI p_product = IRI.create(s_p_product);
    /**
     * Production country details
     * 
     */
    public final static String s_p_productionCountry = "https://onerecord.iata.org/Item#productionCountry";
    public final static IRI p_productionCountry = IRI.create(s_p_productionCountry);
    /**
     * Item target country
     * 
     */
    public final static String s_p_targetCountry = "https://onerecord.iata.org/Item#targetCountry";
    public final static IRI p_targetCountry = IRI.create(s_p_targetCountry);
    /**
     * Product price per unit in the base
     * 
     */
    public final static String s_p_unitPrice = "https://onerecord.iata.org/Item#unitPrice";
    public final static IRI p_unitPrice = IRI.create(s_p_unitPrice);
    /**
     * Weight of the item
     * 
     */
    public final static String s_p_weight = "https://onerecord.iata.org/Item#weight";
    public final static IRI p_weight = IRI.create(s_p_weight);
    /**
     * Address details
     * 
     */
    public final static String s_p_address = "https://onerecord.iata.org/Location#address";
    public final static IRI p_address = IRI.create(s_p_address);
    /**
     * Geolocation details
     * 
     */
    public final static String s_p_geolocation = "https://onerecord.iata.org/Location#geolocation";
    public final static IRI p_geolocation = IRI.create(s_p_geolocation);
    /**
     * Reference to the Carrier products included in the offer
     * 
     */
    public final static String s_p_carrierProductInfo = "https://onerecord.iata.org/Offer#carrierProductInfo";
    public final static IRI p_carrierProductInfo = IRI.create(s_p_carrierProductInfo);
    /**
     * Reference to the product and commodity details of the pieces in the shipment
     * 
     */
    public final static String s_p_commodity = "https://onerecord.iata.org/Offer#commodity";
    public final static IRI p_commodity = IRI.create(s_p_commodity);
    /**
     * Reference to the Dangerous Goods specific details of the shipment if applicable or requested
     * 
     */
    public final static String s_p_dangerousGoods = "https://onerecord.iata.org/Offer#dangerousGoods";
    public final static IRI p_dangerousGoods = IRI.create(s_p_dangerousGoods);
    /**
     * Price of the offer
     * 
     */
    public final static String s_p_price_A = "https://onerecord.iata.org/Offer#price";
    public final static IRI p_price_A = IRI.create(s_p_price_A);
    /**
     * Routing details of the offer, to be compared with routing preferences of the quote request
     * 
     */
    public final static String s_p_routing = "https://onerecord.iata.org/Offer#routing";
    public final static IRI p_routing = IRI.create(s_p_routing);
    /**
     * Reference to the Service requests of the quote request
     * 
     */
    public final static String s_p_serviceRequest = "https://onerecord.iata.org/Offer#serviceRequest";
    public final static IRI p_serviceRequest = IRI.create(s_p_serviceRequest);
    /**
     * Details of the shipement that is to be shipped
     * 
     */
    public final static String s_p_shipmentDetails = "https://onerecord.iata.org/Offer#shipmentDetails";
    public final static IRI p_shipmentDetails = IRI.create(s_p_shipmentDetails);
    /**
     * Special handling details
     * 
     */
    public final static String s_p_specialHandling = "https://onerecord.iata.org/Offer#specialHandling";
    public final static IRI p_specialHandling = IRI.create(s_p_specialHandling);
    /**
     * Transport segment linked to the offer, including the Departure and Arrival locations
     * 
     */
    public final static String s_p_transportMovement = "https://onerecord.iata.org/Offer#transportMovement";
    public final static IRI p_transportMovement = IRI.create(s_p_transportMovement);
    /**
     * Units used for the offer
     * 
     */
    public final static String s_p_units = "https://onerecord.iata.org/Offer#units";
    public final static IRI p_units = IRI.create(s_p_units);
    /**
     * Company details
     * 
     */
    public final static String s_p_companyDetails = "https://onerecord.iata.org/OtherParty#companyDetails";
    public final static IRI p_companyDetails = IRI.create(s_p_companyDetails);
    /**
     * Contact details
     * 
     */
    public final static String s_p_contact = "https://onerecord.iata.org/Person#contact";
    public final static IRI p_contact = IRI.create(s_p_contact);
    /**
     * Details of contained piece(s)
     * 
     */
    public final static String s_p_containedPiece = "https://onerecord.iata.org/Piece#containedPiece";
    public final static IRI p_containedPiece = IRI.create(s_p_containedPiece);
    /**
     * Customs details
     * 
     */
    public final static String s_p_customsInfo = "https://onerecord.iata.org/Piece#customsInfo";
    public final static IRI p_customsInfo = IRI.create(s_p_customsInfo);
    /**
     * Dimensions details
     * 
     */
    public final static String s_p_dimensions_A = "https://onerecord.iata.org/Piece#dimensions";
    public final static IRI p_dimensions_A = IRI.create(s_p_dimensions_A);
    /**
     * Event details e.g. DEP, ARR, FOH, RCS, security screening, etc
     * 
     */
    public final static String s_p_event_A_A = "https://onerecord.iata.org/Piece#event";
    public final static IRI p_event_A_A = IRI.create(s_p_event_A_A);
    /**
     * Reference documents details
     * 
     */
    public final static String s_p_externalReference = "https://onerecord.iata.org/Piece#externalReference";
    public final static IRI p_externalReference = IRI.create(s_p_externalReference);
    /**
     * Weight details
     * 
     */
    public final static String s_p_grossWeight = "https://onerecord.iata.org/Piece#grossWeight";
    public final static IRI p_grossWeight = IRI.create(s_p_grossWeight);
    /**
     * Other piece identification ( e.g. Shipping Marks, Seal)
     * 
     */
    public final static String s_p_otherIdentifier_A_A = "https://onerecord.iata.org/Piece#otherIdentifier";
    public final static IRI p_otherIdentifier_A_A = IRI.create(s_p_otherIdentifier_A_A);
    /**
     * Other party company details - e.g. the party to be notified
     * 
     */
    public final static String s_p_otherParty = "https://onerecord.iata.org/Piece#otherParty";
    public final static IRI p_otherParty = IRI.create(s_p_otherParty);
    /**
     * Packaging details 
     * 
     */
    public final static String s_p_packagingType = "https://onerecord.iata.org/Piece#packagingType";
    public final static IRI p_packagingType = IRI.create(s_p_packagingType);
    /**
     * Product of the piece, mandatory when there are no items
     * 
     */
    public final static String s_p_product_A = "https://onerecord.iata.org/Piece#product";
    public final static IRI p_product_A = IRI.create(s_p_product_A);
    /**
     * Goods production country, mandatory when there are no Items
     * 
     */
    public final static String s_p_productionCountry_A = "https://onerecord.iata.org/Piece#productionCountry";
    public final static IRI p_productionCountry_A = IRI.create(s_p_productionCountry_A);
    /**
     * Security details
     * 
     */
    public final static String s_p_securityStatus = "https://onerecord.iata.org/Piece#securityStatus";
    public final static IRI p_securityStatus = IRI.create(s_p_securityStatus);
    /**
     * Security requests
     * 
     */
    public final static String s_p_serviceRequest_A = "https://onerecord.iata.org/Piece#serviceRequest";
    public final static IRI p_serviceRequest_A = IRI.create(s_p_serviceRequest_A);
    /**
     * Shipper company details - e.g. the party shipping the piece
     * 
     */
    public final static String s_p_shipper_A = "https://onerecord.iata.org/Piece#shipper";
    public final static IRI p_shipper_A = IRI.create(s_p_shipper_A);
    /**
     * Special Handling details
     * 
     */
    public final static String s_p_specialHandling_A = "https://onerecord.iata.org/Piece#specialHandling";
    public final static IRI p_specialHandling_A = IRI.create(s_p_specialHandling_A);
    /**
     * Segment related to the transport status
     * 
     */
    public final static String s_p_transportSegment = "https://onerecord.iata.org/Piece#transportSegment";
    public final static IRI p_transportSegment = IRI.create(s_p_transportSegment);
    /**
     * ULD on which the (virtual) piece has been loaded into - URIs of the ULD
     * 
     */
    public final static String s_p_uldReference = "https://onerecord.iata.org/Piece#uldReference";
    public final static IRI p_uldReference = IRI.create(s_p_uldReference);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_p_volumetricWeight = "https://onerecord.iata.org/Piece#volumetricWeight";
    public final static IRI p_volumetricWeight = IRI.create(s_p_volumetricWeight);
    /**
     * Rating used for pricing
     * 
     */
    public final static String s_p_ratings = "https://onerecord.iata.org/Price#ratings";
    public final static IRI p_ratings = IRI.create(s_p_ratings);
    /**
     * Product additional details
     * 
     */
    public final static String s_p_characteristics = "https://onerecord.iata.org/Product#characteristics";
    public final static IRI p_characteristics = IRI.create(s_p_characteristics);
    /**
     * Manufacturing company details and contacts
     * 
     */
    public final static String s_p_manufacturer = "https://onerecord.iata.org/Product#manufacturer";
    public final static IRI p_manufacturer = IRI.create(s_p_manufacturer);
    /**
     * Other product identifier (e.g. Bar code, UPC, EAN, Amazon)
     * 
     */
    public final static String s_p_otherIdentifier_A_A_A = "https://onerecord.iata.org/Product#otherIdentifier";
    public final static IRI p_otherIdentifier_A_A_A = IRI.create(s_p_otherIdentifier_A_A_A);
    /**
     * Reference to the product and commodity details of the pieces in the shipment
     * 
     */
    public final static String s_p_commodity_A = "https://onerecord.iata.org/QuoteRequest#commodity";
    public final static IRI p_commodity_A = IRI.create(s_p_commodity_A);
    /**
     * Reference to the Dangerous Goods specific details of the shipment if applicable or requested
     * 
     */
    public final static String s_p_dangerousGoods_A = "https://onerecord.iata.org/QuoteRequest#dangerousGoods";
    public final static IRI p_dangerousGoods_A = IRI.create(s_p_dangerousGoods_A);
    /**
     * Parties involved if known
     * 
     */
    public final static String s_p_parties = "https://onerecord.iata.org/QuoteRequest#parties";
    public final static IRI p_parties = IRI.create(s_p_parties);
    /**
     * Ratings preferences of the request
     * 
     */
    public final static String s_p_ratingsPreference = "https://onerecord.iata.org/QuoteRequest#ratingsPreference";
    public final static IRI p_ratingsPreference = IRI.create(s_p_ratingsPreference);
    /**
     * Routing details that are part of the request, these details will be used to determine if the offer is a perfect match
     * 
     */
    public final static String s_p_routingPreferences = "https://onerecord.iata.org/QuoteRequest#routingPreferences";
    public final static IRI p_routingPreferences = IRI.create(s_p_routingPreferences);
    /**
     * Reference to the Service requests of the quote request
     * 
     */
    public final static String s_p_serviceRequest_A_A = "https://onerecord.iata.org/QuoteRequest#serviceRequest";
    public final static IRI p_serviceRequest_A_A = IRI.create(s_p_serviceRequest_A_A);
    /**
     * Details of the shipement that is to be shipped
     * 
     */
    public final static String s_p_shipmentDetails_A = "https://onerecord.iata.org/QuoteRequest#shipmentDetails";
    public final static IRI p_shipmentDetails_A = IRI.create(s_p_shipmentDetails_A);
    /**
     * Special handling details
     * 
     */
    public final static String s_p_specialHandling_A_A = "https://onerecord.iata.org/QuoteRequest#specialHandling";
    public final static IRI p_specialHandling_A_A = IRI.create(s_p_specialHandling_A_A);
    /**
     * Transport segment linked to the request, including the Departure and Arrival locations requested
     * 
     */
    public final static String s_p_transportMovement_A = "https://onerecord.iata.org/QuoteRequest#transportMovement";
    public final static IRI p_transportMovement_A = IRI.create(s_p_transportMovement_A);
    /**
     * Unit preferences of the request (e.g. kg or cm)
     * 
     */
    public final static String s_p_unitPreference = "https://onerecord.iata.org/QuoteRequest#unitPreference";
    public final static IRI p_unitPreference = IRI.create(s_p_unitPreference);
    public final static String s_p_units_A = "https://onerecord.iata.org/QuoteRequest#units";
    public final static IRI p_units_A = IRI.create(s_p_units_A);
    /**
     * Reference to the offers issued by the service provider
     * 
     */
    public final static String s_p_offers = "https://onerecord.iata.org/QuoteResponse#offers";
    public final static IRI p_offers = IRI.create(s_p_offers);
    /**
     * Reference to the Quote Request
     * 
     */
    public final static String s_p_request = "https://onerecord.iata.org/QuoteResponse#request";
    public final static IRI p_request = IRI.create(s_p_request);
    /**
     * Reference to the ranges
     * 
     */
    public final static String s_p_ranges = "https://onerecord.iata.org/Ratings#ranges";
    public final static IRI p_ranges = IRI.create(s_p_ranges);
    /**
     * Known Consignor or Regulated Agent reference
     * 
     */
    public final static String s_p_receivedFrom = "https://onerecord.iata.org/ReasonsForSecurityStatus#receivedFrom";
    public final static IRI p_receivedFrom = IRI.create(s_p_receivedFrom);
    /**
     * Regulated entity identifier (e.g. Regulated Agent Identifier) is mandatory
     * 
     */
    public final static String s_p_regulatedEntityIdentifier = "https://onerecord.iata.org/ReceivedFrom#regulatedEntityIdentifier";
    public final static IRI p_regulatedEntityIdentifier = IRI.create(s_p_regulatedEntityIdentifier);
    /**
     * Company issuing the security status, Name of person (or employee ID) and Regulated entity identifier (e.g. Regulated Agent Identifier) is mandatory
     * 
     */
    public final static String s_p_issuedBy = "https://onerecord.iata.org/SecurityStatus#issuedBy";
    public final static IRI p_issuedBy = IRI.create(s_p_issuedBy);
    /**
     * Piece linked to the Security Status
     * 
     */
    public final static String s_p_piece = "https://onerecord.iata.org/SecurityStatus#piece";
    public final static IRI p_piece = IRI.create(s_p_piece);
    /**
     * reasons for security status details
     * 
     */
    public final static String s_p_reasonsForSecurityStatus = "https://onerecord.iata.org/SecurityStatus#reasonsForSecurityStatus";
    public final static IRI p_reasonsForSecurityStatus = IRI.create(s_p_reasonsForSecurityStatus);
    /**
     * Company receiving the Security Status
     * 
     */
    public final static String s_p_receivedBy = "https://onerecord.iata.org/SecurityStatus#receivedBy";
    public final static IRI p_receivedBy = IRI.create(s_p_receivedBy);
    /**
     * Details of contained piece(s)
     * 
     */
    public final static String s_p_containedPiece_A = "https://onerecord.iata.org/Shipment#containedPiece";
    public final static IRI p_containedPiece_A = IRI.create(s_p_containedPiece_A);
    /**
     * Dimensions details
     * 
     */
    public final static String s_p_dimensions_A_A = "https://onerecord.iata.org/Shipment#dimensions";
    public final static IRI p_dimensions_A_A = IRI.create(s_p_dimensions_A_A);
    /**
     * Reference document details
     * 
     */
    public final static String s_p_externalReference_A = "https://onerecord.iata.org/Shipment#externalReference";
    public final static IRI p_externalReference_A = IRI.create(s_p_externalReference_A);
    /**
     * Insurance details
     * 
     */
    public final static String s_p_insurance = "https://onerecord.iata.org/Shipment#insurance";
    public final static IRI p_insurance = IRI.create(s_p_insurance);
    /**
     * Weight details
     * 
     */
    public final static String s_p_totalGrossWeight = "https://onerecord.iata.org/Shipment#totalGrossWeight";
    public final static IRI p_totalGrossWeight = IRI.create(s_p_totalGrossWeight);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_p_volumetricWeight_A = "https://onerecord.iata.org/Shipment#volumetricWeight";
    public final static IRI p_volumetricWeight_A = IRI.create(s_p_volumetricWeight_A);
    /**
     * Waybill unique identifier (AWB or HWB)
     * 
     */
    public final static String s_p_waybillNumber_A_A = "https://onerecord.iata.org/Shipment#waybillNumber";
    public final static IRI p_waybillNumber_A_A = IRI.create(s_p_waybillNumber_A_A);
    /**
     * Company operating the transport means
     * 
     */
    public final static String s_p_transportCompany = "https://onerecord.iata.org/TransportMeans#transportCompany";
    public final static IRI p_transportCompany = IRI.create(s_p_transportCompany);
    /**
     * Associated transport segment
     * 
     */
    public final static String s_p_transportSegment_A = "https://onerecord.iata.org/TransportMeans#transportSegment";
    public final static IRI p_transportSegment_A = IRI.create(s_p_transportSegment_A);
    /**
     * Required for some CO2 calculations
     * 
     */
    public final static String s_p_typicalCO2Coefficient = "https://onerecord.iata.org/TransportMeans#typicalCO2Coefficient";
    public final static IRI p_typicalCO2Coefficient = IRI.create(s_p_typicalCO2Coefficient);
    /**
     * Typical fuel comsumption (e.g. 20 000L / 1 000nm)
     * 
     */
    public final static String s_p_typicalFuelConsumption = "https://onerecord.iata.org/TransportMeans#typicalFuelConsumption";
    public final static IRI p_typicalFuelConsumption = IRI.create(s_p_typicalFuelConsumption);
    public final static String s_p_TransportOperator = "https://onerecord.iata.org/TransportSegment#TransportOperator";
    public final static IRI p_TransportOperator = IRI.create(s_p_TransportOperator);
    /**
     * Arrival details including time and date
     * 
     */
    public final static String s_p_arrivalLocation = "https://onerecord.iata.org/TransportSegment#arrivalLocation";
    public final static IRI p_arrivalLocation = IRI.create(s_p_arrivalLocation);
    /**
     * Method of calculation of the CO2 emissions
     * 
     */
    public final static String s_p_co2CalculationMethod = "https://onerecord.iata.org/TransportSegment#co2CalculationMethod";
    public final static IRI p_co2CalculationMethod = IRI.create(s_p_co2CalculationMethod);
    /**
     * Amount of CO2 emitted (e.g. 34 kg/km)
     * 
     */
    public final static String s_p_co2Emissions = "https://onerecord.iata.org/TransportSegment#co2Emissions";
    public final static IRI p_co2Emissions = IRI.create(s_p_co2Emissions);
    /**
     * Departure details including time and date
     * 
     */
    public final static String s_p_departureLocation = "https://onerecord.iata.org/TransportSegment#departureLocation";
    public final static IRI p_departureLocation = IRI.create(s_p_departureLocation);
    /**
     * Distance calculated if distance measured is not available
     * 
     */
    public final static String s_p_distanceCalculated = "https://onerecord.iata.org/TransportSegment#distanceCalculated";
    public final static IRI p_distanceCalculated = IRI.create(s_p_distanceCalculated);
    /**
     * Distance based on actual measured distance (with IOT-devices), or is it a calculated value?
     * 
     */
    public final static String s_p_distanceMeasured = "https://onerecord.iata.org/TransportSegment#distanceMeasured";
    public final static IRI p_distanceMeasured = IRI.create(s_p_distanceMeasured);
    /**
     * Events linked to the transport segment
     * 
     */
    public final static String s_p_event_A_A_A = "https://onerecord.iata.org/TransportSegment#event";
    public final static IRI p_event_A_A_A = IRI.create(s_p_event_A_A_A);
    /**
     * Reference to document or logistics object (URI)
     * 
     */
    public final static String s_p_externalReference_A_A = "https://onerecord.iata.org/TransportSegment#externalReference";
    public final static IRI p_externalReference_A_A = IRI.create(s_p_externalReference_A_A);
    /**
     * calculated fuel consumption, if measured not available
     * 
     */
    public final static String s_p_fuelAmountCalculated = "https://onerecord.iata.org/TransportSegment#fuelAmountCalculated";
    public final static IRI p_fuelAmountCalculated = IRI.create(s_p_fuelAmountCalculated);
    /**
     * actual measured fuel consumption
     * 
     */
    public final static String s_p_fuelAmountMeasured = "https://onerecord.iata.org/TransportSegment#fuelAmountMeasured";
    public final static IRI p_fuelAmountMeasured = IRI.create(s_p_fuelAmountMeasured);
    /**
     * Piece(s) assigned to the transport segment
     * 
     */
    public final static String s_p_piece_A = "https://onerecord.iata.org/TransportSegment#piece";
    public final static IRI p_piece_A = IRI.create(s_p_piece_A);
    /**
     * Transport means details
     * 
     */
    public final static String s_p_transportMeans = "https://onerecord.iata.org/TransportSegment#transportMeans";
    public final static IRI p_transportMeans = IRI.create(s_p_transportMeans);
    /**
     * Name of the person operating the transport means (e.g. aircraft captain, truck driver)
     * 
     */
    public final static String s_p_transportMeansOperator = "https://onerecord.iata.org/TransportSegment#transportMeansOperator";
    public final static IRI p_transportMeansOperator = IRI.create(s_p_transportMeansOperator);
    /**
     * ULD assigned to the transport segment
     * 
     */
    public final static String s_p_uld = "https://onerecord.iata.org/TransportSegment#uld";
    public final static IRI p_uld = IRI.create(s_p_uld);
    /**
     * Event details e.g. DEP, ARR, FOH, RCS, security screening, etc
     * 
     */
    public final static String s_p_event_A_A_A_A = "https://onerecord.iata.org/ULD#event";
    public final static IRI p_event_A_A_A_A = IRI.create(s_p_event_A_A_A_A);
    /**
     * Reference documents details 
     * 
     */
    public final static String s_p_externalReference_A_A_A = "https://onerecord.iata.org/ULD#externalReference";
    public final static IRI p_externalReference_A_A_A = IRI.create(s_p_externalReference_A_A_A);
    /**
     * Owner company details and contacts for the ULD
     * 
     */
    public final static String s_p_ownerCompany = "https://onerecord.iata.org/ULD#ownerCompany";
    public final static IRI p_ownerCompany = IRI.create(s_p_ownerCompany);
    /**
     * Tare weight of the empty ULD
     * 
     */
    public final static String s_p_tareWeight = "https://onerecord.iata.org/ULD#tareWeight";
    public final static IRI p_tareWeight = IRI.create(s_p_tareWeight);
    /**
     * Segment related to the ULD movement
     * 
     */
    public final static String s_p_transportSegment_A_A = "https://onerecord.iata.org/ULD#transportSegment";
    public final static IRI p_transportSegment_A_A = IRI.create(s_p_transportSegment_A_A);
    /**
     * Details of contained (virtual) piece(s)
     * 
     */
    public final static String s_p_upid = "https://onerecord.iata.org/ULD#upid";
    public final static IRI p_upid = IRI.create(s_p_upid);
    /**
     * Chargeable weight
     * 
     */
    public final static String s_p_chargeableWeight = "https://onerecord.iata.org/VolumetricWeight#chargeableWeight";
    public final static IRI p_chargeableWeight = IRI.create(s_p_chargeableWeight);
    /**
     * Volume to weight conversion factor
     * 
     */
    public final static String s_p_conversionFactor = "https://onerecord.iata.org/VolumetricWeight#conversionFactor";
    public final static IRI p_conversionFactor = IRI.create(s_p_conversionFactor);
    /**
     * Waybill(s) contained, refers to URIs
     * 
     */
    public final static String s_p_containedWaybill = "https://onerecord.iata.org/Waybill#containedWaybill";
    public final static IRI p_containedWaybill = IRI.create(s_p_containedWaybill);
    /**
     * Address identifier using special coding systems e.g. US CBP FIRMS code
     * 
     */
    public final static String s_p_addressCode = "https://onerecord.iata.org/Address#addressCode";
    public final static IRI p_addressCode = IRI.create(s_p_addressCode);
    /**
     * Type of address code e.g. US CBP FIRMS
     * 
     */
    public final static String s_p_addressCodeType = "https://onerecord.iata.org/Address#addressCodeType";
    public final static IRI p_addressCodeType = IRI.create(s_p_addressCodeType);
    /**
     * UN/LOCODE city code (5 letter) or IATA city code (3 letter)
     * 
     */
    public final static String s_p_cityCode = "https://onerecord.iata.org/Address#cityCode";
    public final static IRI p_cityCode = IRI.create(s_p_cityCode);
    /**
     * If no CityCode provided, full name of the city 
     * 
     */
    public final static String s_p_cityName = "https://onerecord.iata.org/Address#cityName";
    public final static IRI p_cityName = IRI.create(s_p_cityName);
    /**
     * Post Office box number / code
     * 
     */
    public final static String s_p_pOBox = "https://onerecord.iata.org/Address#pOBox";
    public final static IRI p_pOBox = IRI.create(s_p_pOBox);
    /**
     * Postal / ZIP code
     * 
     */
    public final static String s_p_postalCode = "https://onerecord.iata.org/Address#postalCode";
    public final static IRI p_postalCode = IRI.create(s_p_postalCode);
    /**
     * Region/ State / Department. Refer ISO 3166-2
     * 
     */
    public final static String s_p_regionCode = "https://onerecord.iata.org/Address#regionCode";
    public final static IRI p_regionCode = IRI.create(s_p_regionCode);
    /**
     * If no StateCode provided, full name of the region / state / province / canton
     * 
     */
    public final static String s_p_regionName = "https://onerecord.iata.org/Address#regionName";
    public final static IRI p_regionName = IRI.create(s_p_regionName);
    /**
     * Street address including street name, street number, building number, apartment etc
     * 
     */
    public final static String s_p_street = "https://onerecord.iata.org/Address#street";
    public final static IRI p_street = IRI.create(s_p_street);
    /**
     * Status of the Booking Request
     * 
     */
    public final static String s_p_status = "https://onerecord.iata.org/BookingRequest#status";
    public final static IRI p_status = IRI.create(s_p_status);
    /**
     * IATA CASS cargo agent 4 digit branch number / location identifier
     * 
     */
    public final static String s_p_IATACargoAgentLocationIdentifier = "https://onerecord.iata.org/Branch#IATACargoAgentLocationIdentifier";
    public final static IRI p_IATACargoAgentLocationIdentifier = IRI.create(s_p_IATACargoAgentLocationIdentifier);
    /**
     * Company branch name
     * 
     */
    public final static String s_p_branchName = "https://onerecord.iata.org/Branch#branchName";
    public final static IRI p_branchName = IRI.create(s_p_branchName);
    /**
     * Name of the CO2 calculation method
     * 
     */
    public final static String s_p_methodName = "https://onerecord.iata.org/CO2CalcMethod#methodName";
    public final static IRI p_methodName = IRI.create(s_p_methodName);
    /**
     * Version of the CO2 calculation method
     * 
     */
    public final static String s_p_methodVersion = "https://onerecord.iata.org/CO2CalcMethod#methodVersion";
    public final static IRI p_methodVersion = IRI.create(s_p_methodVersion);
    /**
     * Carrier's product code
     * 
     */
    public final static String s_p_productCode = "https://onerecord.iata.org/CarrierProduct#productCode";
    public final static IRI p_productCode = IRI.create(s_p_productCode);
    /**
     * Carrier's product description
     * 
     */
    public final static String s_p_productDescription = "https://onerecord.iata.org/CarrierProduct#productDescription";
    public final static IRI p_productDescription = IRI.create(s_p_productDescription);
    /**
     * Product characteristics code - e.g. CLR - Color
     * 
     */
    public final static String s_p_type = "https://onerecord.iata.org/Characteristics#type";
    public final static IRI p_type = IRI.create(s_p_type);
    /**
     * Product characteristics value / attribute - e.g. Blue...
     * 
     */
    public final static String s_p_value = "https://onerecord.iata.org/Characteristics#value";
    public final static IRI p_value = IRI.create(s_p_value);
    /**
     * IATA two-character airline code 
     * 
     */
    public final static String s_p_airlineCode = "https://onerecord.iata.org/Company#airlineCode";
    public final static IRI p_airlineCode = IRI.create(s_p_airlineCode);
    /**
     * IATA three-numeric airline prefix number 
     * 
     */
    public final static String s_p_airlinePrefix = "https://onerecord.iata.org/Company#airlinePrefix";
    public final static IRI p_airlinePrefix = IRI.create(s_p_airlinePrefix);
    /**
     * IATA accredited cargo agent 7 digit number
     * 
     */
    public final static String s_p_iATACargoAgentCode = "https://onerecord.iata.org/Company#iATACargoAgentCode";
    public final static IRI p_iATACargoAgentCode = IRI.create(s_p_iATACargoAgentCode);
    /**
     * Name of company or organization
     * 
     */
    public final static String s_p_name = "https://onerecord.iata.org/Company#name";
    public final static IRI p_name = IRI.create(s_p_name);
    /**
     * E-mail address
     * 
     */
    public final static String s_p_emailAddress = "https://onerecord.iata.org/Contact#emailAddress";
    public final static IRI p_emailAddress = IRI.create(s_p_emailAddress);
    /**
     * Phone number
     * 
     */
    public final static String s_p_phoneNumber = "https://onerecord.iata.org/Contact#phoneNumber";
    public final static IRI p_phoneNumber = IRI.create(s_p_phoneNumber);
    /**
     * Contact details e.g. Skype ID 
     * 
     */
    public final static String s_p_detail = "https://onerecord.iata.org/ContactOther#detail";
    public final static IRI p_detail = IRI.create(s_p_detail);
    /**
     * Contact type - e.g. Skype
     * 
     */
    public final static String s_p_otherType = "https://onerecord.iata.org/ContactOther#otherType";
    public final static IRI p_otherType = IRI.create(s_p_otherType);
    /**
     * Country ISO code. Refer ISO 3166-2
     * 
     */
    public final static String s_p_countryCode = "https://onerecord.iata.org/Country#countryCode";
    public final static IRI p_countryCode = IRI.create(s_p_countryCode);
    /**
     * Full country name
     * 
     */
    public final static String s_p_countryName = "https://onerecord.iata.org/Country#countryName";
    public final static IRI p_countryName = IRI.create(s_p_countryName);
    /**
     * Customs content code. Refer CXML Code List 1.100, e.g. IST - Security Textual StatementNumber, M - Movement Reference Number
     * 
     */
    public final static String s_p_customsInfoContentCode = "https://onerecord.iata.org/CustomsInfo#customsInfoContentCode";
    public final static IRI p_customsInfoContentCode = IRI.create(s_p_customsInfoContentCode);
    /**
     * Customs country code.
     * 
     */
    public final static String s_p_customsInfoCountryCode = "https://onerecord.iata.org/CustomsInfo#customsInfoCountryCode";
    public final static IRI p_customsInfoCountryCode = IRI.create(s_p_customsInfoCountryCode);
    public final static String s_p_customsInfoNote = "https://onerecord.iata.org/CustomsInfo#customsInfoNote";
    public final static IRI p_customsInfoNote = IRI.create(s_p_customsInfoNote);
    /**
     * Customs subject code. Refer CXML Code List 1.19, e.g. IMP for import, EXP for export, AGT for Agent, ISS for The Regulated Agent Issuing the Security Status for rdf:type Consignment etc.   At least one of the three elements (Country Code, Information Identifier or Customs, Security and Regulatory Control Information Identifier) must be completed
     * 
     */
    public final static String s_p_customsInfoSubjectCode = "https://onerecord.iata.org/CustomsInfo#customsInfoSubjectCode";
    public final static IRI p_customsInfoSubjectCode = IRI.create(s_p_customsInfoSubjectCode);
    /**
     * Information for customs submission
     * 
     */
    public final static String s_p_customsInformation = "https://onerecord.iata.org/CustomsInfo#customsInformation";
    public final static IRI p_customsInformation = IRI.create(s_p_customsInformation);
    /**
     * Free text f or customs remarks
     * 
     */
    public final static String s_p_customsNote = "https://onerecord.iata.org/CustomsInfo#customsNote";
    public final static IRI p_customsNote = IRI.create(s_p_customsNote);
    /**
     * Dangerous goods class code of the pieces in the shipment
     * 
     */
    public final static String s_p_classCode = "https://onerecord.iata.org/DangerousGoods#classCode";
    public final static IRI p_classCode = IRI.create(s_p_classCode);
    /**
     * Net quantity
     * 
     */
    public final static String s_p_netQuantity = "https://onerecord.iata.org/DangerousGoods#netQuantity";
    public final static IRI p_netQuantity = IRI.create(s_p_netQuantity);
    /**
     * Packing group
     * 
     */
    public final static String s_p_packingGroup = "https://onerecord.iata.org/DangerousGoods#packingGroup";
    public final static IRI p_packingGroup = IRI.create(s_p_packingGroup);
    /**
     * Packing instructions
     * 
     */
    public final static String s_p_packingInstruction = "https://onerecord.iata.org/DangerousGoods#packingInstruction";
    public final static IRI p_packingInstruction = IRI.create(s_p_packingInstruction);
    public final static String s_p_quantityUnits = "https://onerecord.iata.org/DangerousGoods#quantityUnits";
    public final static IRI p_quantityUnits = IRI.create(s_p_quantityUnits);
    /**
     * Reference identifying the United Nations Dangerous Goods serial number assigned within the UN to substances and articles contained in type list of the dangerous goods most commonly carried. e.g. 1189 - Ethylene glycol monomethyl ether acetate
     * 
     */
    public final static String s_p_unNumber = "https://onerecord.iata.org/DangerousGoods#unNumber";
    public final static IRI p_unNumber = IRI.create(s_p_unNumber);
    /**
     * Date and time of the event
     * 
     */
    public final static String s_p_dateTime = "https://onerecord.iata.org/Event#dateTime";
    public final static IRI p_dateTime = IRI.create(s_p_dateTime);
    /**
     * Movement or milestone code. Refer CXML Code List 1.18, e.g. DEP, ARR, FOH, RCS
     * 
     */
    public final static String s_p_eventCode = "https://onerecord.iata.org/Event#eventCode";
    public final static IRI p_eventCode = IRI.create(s_p_eventCode);
    /**
     * If no EventCode provided, event name - e.g. Security clearance
     * 
     */
    public final static String s_p_eventName = "https://onerecord.iata.org/Event#eventName";
    public final static IRI p_eventName = IRI.create(s_p_eventName);
    /**
     * Indicates type of event e.g.  Scheduled, Estimated, Actual
     * 
     */
    public final static String s_p_eventTypeIndicator = "https://onerecord.iata.org/Event#eventTypeIndicator";
    public final static IRI p_eventTypeIndicator = IRI.create(s_p_eventTypeIndicator);
    /**
     * Unique document identifier
     * 
     */
    public final static String s_p_documentID = "https://onerecord.iata.org/ExternalReference#documentID";
    public final static IRI p_documentID = IRI.create(s_p_documentID);
    /**
     * If no DocumentType provided, name of the referenced document 
     * 
     */
    public final static String s_p_documentName = "https://onerecord.iata.org/ExternalReference#documentName";
    public final static IRI p_documentName = IRI.create(s_p_documentName);
    /**
     * Type of the referenced document . Refer UNEDIFACT 1001  e.g. 740 - Air Waybill
     * 
     */
    public final static String s_p_documentType = "https://onerecord.iata.org/ExternalReference#documentType";
    public final static IRI p_documentType = IRI.create(s_p_documentType);
    /**
     * Document version number
     * 
     */
    public final static String s_p_documentVersion = "https://onerecord.iata.org/ExternalReference#documentVersion";
    public final static IRI p_documentVersion = IRI.create(s_p_documentVersion);
    /**
     * Production batch number / reference
     * 
     */
    public final static String s_p_batchNumber = "https://onerecord.iata.org/Item#batchNumber";
    public final static IRI p_batchNumber = IRI.create(s_p_batchNumber);
    /**
     * Production lot number / reference
     * 
     */
    public final static String s_p_lotNumber = "https://onerecord.iata.org/Item#lotNumber";
    public final static IRI p_lotNumber = IRI.create(s_p_lotNumber);
    /**
     * Product expiry date - e.g. for perishables goods or goods with programmed obsolescence
     * 
     */
    public final static String s_p_productExpiryDate = "https://onerecord.iata.org/Item#productExpiryDate";
    public final static IRI p_productExpiryDate = IRI.create(s_p_productExpiryDate);
    /**
     * Production date
     * 
     */
    public final static String s_p_productionDate = "https://onerecord.iata.org/Item#productionDate";
    public final static IRI p_productionDate = IRI.create(s_p_productionDate);
    /**
     * Product quantity for unit price - e.g. 12 (eggs for one USD 1)
     * 
     */
    public final static String s_p_quantityForUnitPrice = "https://onerecord.iata.org/Item#quantityForUnitPrice";
    public final static IRI p_quantityForUnitPrice = IRI.create(s_p_quantityForUnitPrice);
    /**
     * Location code of airport, freight terminal, seaport, rail station. UN/LOCODE city code (5 letter) or IATA airport code (3 letter)
     * 
     */
    public final static String s_p_code = "https://onerecord.iata.org/Location#code";
    public final static IRI p_code = IRI.create(s_p_code);
    /**
     * Location type - e.g. Airport, Freight terminal, Rail station, Seaport, etc
     * 
     */
    public final static String s_p_locationType = "https://onerecord.iata.org/Location#locationType";
    public final static IRI p_locationType = IRI.create(s_p_locationType);
    /**
     * Full name of the location
     * 
     */
    public final static String s_p_name_A = "https://onerecord.iata.org/Location#name";
    public final static IRI p_name_A = IRI.create(s_p_name_A);
    /**
     * Indicates if the offer is a perfect match to the quote request (boolean)
     * 
     */
    public final static String s_p_requestMatchInd = "https://onerecord.iata.org/Offer#requestMatchInd";
    public final static IRI p_requestMatchInd = IRI.create(s_p_requestMatchInd);
    /**
     * Indicate the secruty state of the shipment, screened or not
     * 
     */
    public final static String s_p_securityState = "https://onerecord.iata.org/Offer#securityState";
    public final static IRI p_securityState = IRI.create(s_p_securityState);
    /**
     * Item identifier
     * 
     */
    public final static String s_p_identifier = "https://onerecord.iata.org/OtherIdentifier#identifier";
    public final static IRI p_identifier = IRI.create(s_p_identifier);
    /**
     * Identifier type or description
     * 
     */
    public final static String s_p_otherIdentifierType = "https://onerecord.iata.org/OtherIdentifier#otherIdentifierType";
    public final static IRI p_otherIdentifierType = IRI.create(s_p_otherIdentifierType);
    /**
     * Role of other party - e.g. Notify party, Nominated agent, Customs broker, Manufacturer, Importer, Payer, Payee, ShipTo, ShipFrom, BillTo, BillFrom, RemitTo, RemitFrom 
     * 
     */
    public final static String s_p_roleName = "https://onerecord.iata.org/OtherParty#roleName";
    public final static IRI p_roleName = IRI.create(s_p_roleName);
    /**
     * Packaging type identifier as per UNECE Rec 21 Annex V and VI e.g. 1A - Drum, steel
     * 
     */
    public final static String s_p_code_A = "https://onerecord.iata.org/PackagingType#code";
    public final static IRI p_code_A = IRI.create(s_p_code_A);
    /**
     * If no Code provided, packaging type description
     * 
     */
    public final static String s_p_description = "https://onerecord.iata.org/PackagingType#description";
    public final static IRI p_description = IRI.create(s_p_description);
    /**
     * Contact type - e.g. Emergency contact, Customs contact, Customer contact
     * 
     */
    public final static String s_p_contactType = "https://onerecord.iata.org/Person#contactType";
    public final static IRI p_contactType = IRI.create(s_p_contactType);
    /**
     * Department / Division / Unit
     * 
     */
    public final static String s_p_department = "https://onerecord.iata.org/Person#department";
    public final static IRI p_department = IRI.create(s_p_department);
    /**
     * Employee ID
     * 
     */
    public final static String s_p_employeeId = "https://onerecord.iata.org/Person#employeeId";
    public final static IRI p_employeeId = IRI.create(s_p_employeeId);
    /**
     * First name / given name
     * 
     */
    public final static String s_p_firstName = "https://onerecord.iata.org/Person#firstName";
    public final static IRI p_firstName = IRI.create(s_p_firstName);
    /**
     * Job title / position
     * 
     */
    public final static String s_p_jobTitle = "https://onerecord.iata.org/Person#jobTitle";
    public final static IRI p_jobTitle = IRI.create(s_p_jobTitle);
    /**
     * Last name / family name / surname
     * 
     */
    public final static String s_p_lastName = "https://onerecord.iata.org/Person#lastName";
    public final static IRI p_lastName = IRI.create(s_p_lastName);
    /**
     * Middle name/ other name
     * 
     */
    public final static String s_p_middleName = "https://onerecord.iata.org/Person#middleName";
    public final static IRI p_middleName = IRI.create(s_p_middleName);
    /**
     * Salutation 
     * 
     */
    public final static String s_p_salutation = "https://onerecord.iata.org/Person#salutation";
    public final static IRI p_salutation = IRI.create(s_p_salutation);
    /**
     * Ad hoc security statement required by state regulators
     * 
     */
    public final static String s_p_additionalSecurityInfo = "https://onerecord.iata.org/Piece#additionalSecurityInfo";
    public final static IRI p_additionalSecurityInfo = IRI.create(s_p_additionalSecurityInfo);
    /**
     * Coload indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_coload = "https://onerecord.iata.org/Piece#coload";
    public final static IRI p_coload = IRI.create(s_p_coload);
    /**
     * General goods description
     * 
     */
    public final static String s_p_goodsDescription = "https://onerecord.iata.org/Piece#goodsDescription";
    public final static IRI p_goodsDescription = IRI.create(s_p_goodsDescription);
    /**
     * Specify how the piece will be delivered (bulk or ULD)
     * 
     */
    public final static String s_p_loadType = "https://onerecord.iata.org/Piece#loadType";
    public final static IRI p_loadType = IRI.create(s_p_loadType);
    /**
     * Shipper's Load And Count  ( total contained piece count as provided by shipper)
     * 
     */
    public final static String s_p_slac = "https://onerecord.iata.org/Piece#slac";
    public final static IRI p_slac = IRI.create(s_p_slac);
    /**
     * Stackable indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_stackable = "https://onerecord.iata.org/Piece#stackable";
    public final static IRI p_stackable = IRI.create(s_p_stackable);
    /**
     * Turnable indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_turnable = "https://onerecord.iata.org/Piece#turnable";
    public final static IRI p_turnable = IRI.create(s_p_turnable);
    /**
     * Unique Piece Identifier (UPID) of the piece. Refer IATA Recommended Practice 1689
     * 
     */
    public final static String s_p_upid_A = "https://onerecord.iata.org/Piece#upid";
    public final static IRI p_upid_A = IRI.create(s_p_upid_A);
    /**
     * Total price
     * 
     */
    public final static String s_p_grandTotal = "https://onerecord.iata.org/Price#grandTotal";
    public final static IRI p_grandTotal = IRI.create(s_p_grandTotal);
    /**
     * Terms of validity
     * 
     */
    public final static String s_p_validTo = "https://onerecord.iata.org/Price#validTo";
    public final static IRI p_validTo = IRI.create(s_p_validTo);
    /**
     * Unique Commodity Code e.g. 391721 - Tubes, Pipes And Hoses, Rigid, Of Polymers Of Ethylene
     * 
     */
    public final static String s_p_commodityCode = "https://onerecord.iata.org/Product#commodityCode";
    public final static IRI p_commodityCode = IRI.create(s_p_commodityCode);
    /**
     * Commodity description
     * 
     */
    public final static String s_p_commodityDescription = "https://onerecord.iata.org/Product#commodityDescription";
    public final static IRI p_commodityDescription = IRI.create(s_p_commodityDescription);
    /**
     * If no Code provided, name of commodity
     * 
     */
    public final static String s_p_commodityName = "https://onerecord.iata.org/Product#commodityName";
    public final static IRI p_commodityName = IRI.create(s_p_commodityName);
    /**
     * Issuer of the Commodity Code - e.g. Brussels Tariff Nomenclature, EU Harmonized System Code, UN Standard International Trade...
     * 
     */
    public final static String s_p_commodityType = "https://onerecord.iata.org/Product#commodityType";
    public final static IRI p_commodityType = IRI.create(s_p_commodityType);
    /**
     * Product description
     * 
     */
    public final static String s_p_productDescription_A = "https://onerecord.iata.org/Product#productDescription";
    public final static IRI p_productDescription_A = IRI.create(s_p_productDescription_A);
    /**
     * Manufacturer's unique product identifier
     * 
     */
    public final static String s_p_productIdentifier = "https://onerecord.iata.org/Product#productIdentifier";
    public final static IRI p_productIdentifier = IRI.create(s_p_productIdentifier);
    /**
     * Reference identifying the United Nations Dangerous Goods serial number assigned within the UN to substances and articles contained in type list of the dangerous goods most commonly carried. e.g. 1189 - Ethylene glycol monomethyl ether acetate
     * 
     */
    public final static String s_p_unNumber_A = "https://onerecord.iata.org/Product#unNumber";
    public final static IRI p_unNumber_A = IRI.create(s_p_unNumber_A);
    /**
     * Indicate the secruty state of the shipment, screened or not
     * 
     */
    public final static String s_p_shipmentSecurityStatus = "https://onerecord.iata.org/QuoteRequest#shipmentSecurityStatus";
    public final static IRI p_shipmentSecurityStatus = IRI.create(s_p_shipmentSecurityStatus);
    /**
     * Amount
     * 
     */
    public final static String s_p_amount = "https://onerecord.iata.org/Ranges#amount";
    public final static IRI p_amount = IRI.create(s_p_amount);
    /**
     * Maximum quantity
     * 
     */
    public final static String s_p_maximumQuantity = "https://onerecord.iata.org/Ranges#maximumQuantity";
    public final static IRI p_maximumQuantity = IRI.create(s_p_maximumQuantity);
    /**
     * Minimum quantity
     * 
     */
    public final static String s_p_minimumQuantity = "https://onerecord.iata.org/Ranges#minimumQuantity";
    public final static IRI p_minimumQuantity = IRI.create(s_p_minimumQuantity);
    /**
     * rate class code e.g. Q
     * 
     */
    public final static String s_p_rateClassCode = "https://onerecord.iata.org/Ranges#rateClassCode";
    public final static IRI p_rateClassCode = IRI.create(s_p_rateClassCode);
    /**
     * rating type - list uldRatingType
     * 
     */
    public final static String s_p_ratingType = "https://onerecord.iata.org/Ranges#ratingType";
    public final static IRI p_ratingType = IRI.create(s_p_ratingType);
    /**
     * Specific commodity code linked to commodity
     * 
     */
    public final static String s_p_scr = "https://onerecord.iata.org/Ranges#scr";
    public final static IRI p_scr = IRI.create(s_p_scr);
    /**
     * Specific commodity code linked to commodity
     * 
     */
    public final static String s_p_unitBasis = "https://onerecord.iata.org/Ranges#unitBasis";
    public final static IRI p_unitBasis = IRI.create(s_p_unitBasis);
    /**
     * Code of the charge e.g. MY, SC, etc.
     * 
     */
    public final static String s_p_chargeCode = "https://onerecord.iata.org/Ratings#chargeCode";
    public final static IRI p_chargeCode = IRI.create(s_p_chargeCode);
    /**
     * Description of the charge e.g. Airfreight, fuel, etc.
     * 
     */
    public final static String s_p_chargeDescription = "https://onerecord.iata.org/Ratings#chargeDescription";
    public final static IRI p_chargeDescription = IRI.create(s_p_chargeDescription);
    /**
     * Type of charge e.g. Freight, Surcharges, etc.
     * 
     */
    public final static String s_p_chargeType = "https://onerecord.iata.org/Ratings#chargeType";
    public final static IRI p_chargeType = IRI.create(s_p_chargeType);
    /**
     * Specification of the price e.g. Street, Group, Spot, etc.
     * 
     */
    public final static String s_p_priceSpecification = "https://onerecord.iata.org/Ratings#priceSpecification";
    public final static IRI p_priceSpecification = IRI.create(s_p_priceSpecification);
    /**
     * Reference of price specifications
     * 
     */
    public final static String s_p_priceSpecificationRef = "https://onerecord.iata.org/Ratings#priceSpecificationRef";
    public final static IRI p_priceSpecificationRef = IRI.create(s_p_priceSpecificationRef);
    /**
     * Subtotal of the charge
     * 
     */
    public final static String s_p_subTotal = "https://onerecord.iata.org/Ratings#subTotal";
    public final static IRI p_subTotal = IRI.create(s_p_subTotal);
    /**
     * Exemption code - e.g. BIOM- Bio-Medical Samples 
     * 
     */
    public final static String s_p_groundsForExemption = "https://onerecord.iata.org/ReasonsForSecurityStatus#groundsForExemption";
    public final static IRI p_groundsForExemption = IRI.create(s_p_groundsForExemption);
    /**
     * Other methods used to secure the cargo
     * 
     */
    public final static String s_p_otherScreeningMethods = "https://onerecord.iata.org/ReasonsForSecurityStatus#otherScreeningMethods";
    public final static IRI p_otherScreeningMethods = IRI.create(s_p_otherScreeningMethods);
    /**
     * Screening methods which have been used to secure the cargo - e.g. EDS- Explosive Detection System 
     * 
     */
    public final static String s_p_screeningMethod = "https://onerecord.iata.org/ReasonsForSecurityStatus#screeningMethod";
    public final static IRI p_screeningMethod = IRI.create(s_p_screeningMethod);
    /**
     * Expiry date 4 digits month/year
     * 
     */
    public final static String s_p_expiryDate = "https://onerecord.iata.org/ReceivedFrom#expiryDate";
    public final static IRI p_expiryDate = IRI.create(s_p_expiryDate);
    /**
     * Party type - e.g. RA - Regulated Agent, KC - Known Consignor, AO - Aircraft Operator, RC - Regulated Carrier
     * 
     */
    public final static String s_p_regulatedPartyType = "https://onerecord.iata.org/ReceivedFrom#regulatedPartyType";
    public final static IRI p_regulatedPartyType = IRI.create(s_p_regulatedPartyType);
    /**
     * Aircraft possibility code
     * 
     */
    public final static String s_p_aircraftPossibilityCode = "https://onerecord.iata.org/Routing#aircraftPossibilityCode";
    public final static IRI p_aircraftPossibilityCode = IRI.create(s_p_aircraftPossibilityCode);
    /**
     * Latest Arrival date time (requested or proposed)
     * 
     */
    public final static String s_p_latestArrivalDateTime = "https://onerecord.iata.org/Routing#latestArrivalDateTime";
    public final static IRI p_latestArrivalDateTime = IRI.create(s_p_latestArrivalDateTime);
    /**
     * Maximum number of connections of the transport movement (requested or proposed)
     * 
     */
    public final static String s_p_maxConnections = "https://onerecord.iata.org/Routing#maxConnections";
    public final static IRI p_maxConnections = IRI.create(s_p_maxConnections);
    /**
     * Indicates interlining (requested or proposed)
     * 
     */
    public final static String s_p_onlineInd = "https://onerecord.iata.org/Routing#onlineInd";
    public final static IRI p_onlineInd = IRI.create(s_p_onlineInd);
    /**
     * Indicates if RFS (Road Feeder Services) is included (requested or proposed)
     * 
     */
    public final static String s_p_rfsInd = "https://onerecord.iata.org/Routing#rfsInd";
    public final static IRI p_rfsInd = IRI.create(s_p_rfsInd);
    /**
     * Date and time when the security status was issued
     * 
     */
    public final static String s_p_issuedOn = "https://onerecord.iata.org/SecurityStatus#issuedOn";
    public final static IRI p_issuedOn = IRI.create(s_p_issuedOn);
    /**
     * Party type - e.g. RA - Regulated Agent, KC - Known Consignor, AO - Aircraft Operator, RC - Regulated Carrier
     * 
     */
    public final static String s_p_regulatedPartyType_A = "https://onerecord.iata.org/SecurityStatus#regulatedPartyType";
    public final static IRI p_regulatedPartyType_A = IRI.create(s_p_regulatedPartyType_A);
    /**
     * Country ISO code. Refer ISO 3166-2
     * 
     */
    public final static String s_p_regulatingAuthority = "https://onerecord.iata.org/SecurityStatus#regulatingAuthority";
    public final static IRI p_regulatingAuthority = IRI.create(s_p_regulatingAuthority);
    /**
     * Security status indicator - e.g. SPX- Cargo Secure for Passenger and All-Cargo Aircraft 
     * 
     */
    public final static String s_p_statusCode = "https://onerecord.iata.org/SecurityStatus#statusCode";
    public final static IRI p_statusCode = IRI.create(s_p_statusCode);
    /**
     * Service request code
     * 
     */
    public final static String s_p_code_A_A = "https://onerecord.iata.org/ServiceRequest#code";
    public final static IRI p_code_A_A = IRI.create(s_p_code_A_A);
    /**
     * Service request description
     * 
     */
    public final static String s_p_description_A = "https://onerecord.iata.org/ServiceRequest#description";
    public final static IRI p_description_A = IRI.create(s_p_description_A);
    /**
     * Service request statement text
     * 
     */
    public final static String s_p_statementText = "https://onerecord.iata.org/ServiceRequest#statementText";
    public final static IRI p_statementText = IRI.create(s_p_statementText);
    /**
     * Service request statement type - e.g. Dangerous Goods, Lithium Ion Battery, Live Animal Certificate
     * 
     */
    public final static String s_p_statementType = "https://onerecord.iata.org/ServiceRequest#statementType";
    public final static IRI p_statementType = IRI.create(s_p_statementType);
    /**
     * General goods description
     * 
     */
    public final static String s_p_goodsDescription_A = "https://onerecord.iata.org/Shipment#goodsDescription";
    public final static IRI p_goodsDescription_A = IRI.create(s_p_goodsDescription_A);
    public final static String s_p_totalPieceCount = "https://onerecord.iata.org/Shipment#totalPieceCount";
    public final static IRI p_totalPieceCount = IRI.create(s_p_totalPieceCount);
    /**
     * Total SLAC of all piece groups 
     * 
     */
    public final static String s_p_totalSLAC = "https://onerecord.iata.org/Shipment#totalSLAC";
    public final static IRI p_totalSLAC = IRI.create(s_p_totalSLAC);
    /**
     * Special handling code following IATA standards. Refer CXML1.16,  e.g. PEP - Fruits and Vegetables
     * 
     */
    public final static String s_p_code_A_A_A = "https://onerecord.iata.org/SpecialHandling#code";
    public final static IRI p_code_A_A_A = IRI.create(s_p_code_A_A_A);
    /**
     * Vehicle identification - e.g. aircraft registration number
     * 
     */
    public final static String s_p_vehicleRegistration = "https://onerecord.iata.org/TransportMeans#vehicleRegistration";
    public final static IRI p_vehicleRegistration = IRI.create(s_p_vehicleRegistration);
    /**
     * Size of the vehicle - free text
     * 
     */
    public final static String s_p_vehicleSize = "https://onerecord.iata.org/TransportMeans#vehicleSize";
    public final static IRI p_vehicleSize = IRI.create(s_p_vehicleSize);
    /**
     * Vehicle or container type. Refer UNECE28, e.g. 4.00.0 - Aircraft, type unknown
     * 
     */
    public final static String s_p_vehicleType = "https://onerecord.iata.org/TransportMeans#vehicleType";
    public final static IRI p_vehicleType = IRI.create(s_p_vehicleType);
    /**
     * e.g. Kerosene, Diesel, SAF, Electricity [renewable], Electricity [non-renewable]
     * 
     */
    public final static String s_p_fuelType = "https://onerecord.iata.org/TransportSegment#fuelType";
    public final static IRI p_fuelType = IRI.create(s_p_fuelType);
    public final static String s_p_modeCode = "https://onerecord.iata.org/TransportSegment#modeCode";
    public final static IRI p_modeCode = IRI.create(s_p_modeCode);
    /**
     * Seal identifier
     * 
     */
    public final static String s_p_seal = "https://onerecord.iata.org/TransportSegment#seal";
    public final static IRI p_seal = IRI.create(s_p_seal);
    /**
     * Date associated with TransportIdentifier to uniquely identify the transport line 
     * 
     */
    public final static String s_p_transportDate = "https://onerecord.iata.org/TransportSegment#transportDate";
    public final static IRI p_transportDate = IRI.create(s_p_transportDate);
    /**
     * Airline flight number, or rail /  truck / maritime line id
     * 
     */
    public final static String s_p_transportIdentifier = "https://onerecord.iata.org/TransportSegment#transportIdentifier";
    public final static IRI p_transportIdentifier = IRI.create(s_p_transportIdentifier);
    public final static String s_p_SerialNumber = "https://onerecord.iata.org/ULD#SerialNumber";
    public final static IRI p_SerialNumber = IRI.create(s_p_SerialNumber);
    /**
     * US / ATA Unit Load Device type code e.g. M2
     * 
     */
    public final static String s_p_ataDesignator = "https://onerecord.iata.org/ULD#ataDesignator";
    public final static IRI p_ataDesignator = IRI.create(s_p_ataDesignator);
    /**
     * ULD profile, dimensions & shape
     * 
     */
    public final static String s_p_contour = "https://onerecord.iata.org/ULD#contour";
    public final static IRI p_contour = IRI.create(s_p_contour);
    /**
     * Position of the shipment in the aircraft - e.g. lower or main deck 
     * 
     */
    public final static String s_p_deckPosition = "https://onerecord.iata.org/ULD#deckPosition";
    public final static IRI p_deckPosition = IRI.create(s_p_deckPosition);
    /**
     * ULD height or loading limitation code. Refer CXML Code List 1.47,  e.g. R - ULD Height above 244 centimetres
     * 
     */
    public final static String s_p_loadingIndicator = "https://onerecord.iata.org/ULD#loadingIndicator";
    public final static IRI p_loadingIndicator = IRI.create(s_p_loadingIndicator);
    /**
     * Owner code of the ULD in aa, an or na format - owner can be an airline or leasing company
     * 
     */
    public final static String s_p_ownerCode = "https://onerecord.iata.org/ULD#ownerCode";
    public final static IRI p_ownerCode = IRI.create(s_p_ownerCode);
    /**
     * Issuer of the ULD owner code 
     * 
     */
    public final static String s_p_ownerCodeIssuer = "https://onerecord.iata.org/ULD#ownerCodeIssuer";
    public final static IRI p_ownerCodeIssuer = IRI.create(s_p_ownerCodeIssuer);
    /**
     * ULD serial number
     * 
     */
    public final static String s_p_serialNumber = "https://onerecord.iata.org/ULD#serialNumber";
    public final static IRI p_serialNumber = IRI.create(s_p_serialNumber);
    /**
     * Standard Unit Load Device type code e.g. AKE - Certified Container - Contoured
     * 
     */
    public final static String s_p_uldType = "https://onerecord.iata.org/ULD#uldType";
    public final static IRI p_uldType = IRI.create(s_p_uldType);
    /**
     * Unit of measurement/ unit of account e.g. CMT - Centimetre,  LTR - Litre (1 DM3), KGM - Kilogram, CHF - Swiss Franc
     * 
     */
    public final static String s_p_unit = "https://onerecord.iata.org/Value#unit";
    public final static IRI p_unit = IRI.create(s_p_unit);
    /**
     * Value
     * 
     */
    public final static String s_p_value_A = "https://onerecord.iata.org/Value#value";
    public final static IRI p_value_A = IRI.create(s_p_value_A);
    /**
     * House or Master Waybill unique identifier
     * 
     */
    public final static String s_p_waybillNumber_A_A_A = "https://onerecord.iata.org/Waybill#waybillNumber";
    public final static IRI p_waybillNumber_A_A_A = IRI.create(s_p_waybillNumber_A_A_A);
    /**
     * Type of the Waybill: House or Master
     * 
     */
    public final static String s_p_waybillType = "https://onerecord.iata.org/Waybill#waybillType";
    public final static IRI p_waybillType = IRI.create(s_p_waybillType);
    public final static String s_p_description_A_A = "http://purl.org/dc/elements/1.1/description";
    public final static IRI p_description_A_A = IRI.create(s_p_description_A_A);
    public final static String s_p_title = "http://purl.org/dc/elements/1.1/title";
    public final static IRI p_title = IRI.create(s_p_title);
    public final static String s_p_comment = "http://www.w3.org/2000/01/rdf-schema#comment";
    public final static IRI p_comment = IRI.create(s_p_comment);
    public final static String s_p_label = "http://www.w3.org/2000/01/rdf-schema#label";
    public final static IRI p_label = IRI.create(s_p_label);

}
