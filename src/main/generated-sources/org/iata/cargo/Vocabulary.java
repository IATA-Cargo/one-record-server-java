
package org.iata.cargo;

import org.semanticweb.owlapi.model.IRI;


/**
 * This class was generated by OWL2Java 0.15.0
 * 
 */
public class Vocabulary {

    public final static String ONTOLOGY_IRI_onerecord_dot_iata_dot_org_generated = "https://onerecord.iata.org-generated";
    public final static String ONTOLOGY_IRI_ = "https://onerecord.iata.org/";
    public final static String s_c_Thing = "http://www.w3.org/2002/07/owl#Thing";
    public final static IRI c_Thing = IRI.create(s_c_Thing);
    /**
     * Address details
     * 
     */
    public final static String s_c_Address = "https://onerecord.iata.org/Address";
    public final static IRI c_Address = IRI.create(s_c_Address);
    /**
     * Booking details
     * 
     */
    public final static String s_c_Booking = "https://onerecord.iata.org/Booking";
    public final static IRI c_Booking = IRI.create(s_c_Booking);
    /**
     * Company branches
     * 
     */
    public final static String s_c_Branch = "https://onerecord.iata.org/Branch";
    public final static IRI c_Branch = IRI.create(s_c_Branch);
    /**
     * CO2 calculation methods
     * 
     */
    public final static String s_c_CO2CalcMethod = "https://onerecord.iata.org/CO2CalcMethod";
    public final static IRI c_CO2CalcMethod = IRI.create(s_c_CO2CalcMethod);
    /**
     * Carrier product details
     * 
     */
    public final static String s_c_CarrierProduct = "https://onerecord.iata.org/CarrierProduct";
    public final static IRI c_CarrierProduct = IRI.create(s_c_CarrierProduct);
    /**
     * Product additional details
     * 
     */
    public final static String s_c_Characteristics = "https://onerecord.iata.org/Characteristics";
    public final static IRI c_Characteristics = IRI.create(s_c_Characteristics);
    /**
     * Company details
     * 
     */
    public final static String s_c_Company = "https://onerecord.iata.org/Company";
    public final static IRI c_Company = IRI.create(s_c_Company);
    /**
     * Connected Device details
     * 
     */
    public final static String s_c_ConnectedDevice = "https://onerecord.iata.org/ConnectedDevice";
    public final static IRI c_ConnectedDevice = IRI.create(s_c_ConnectedDevice);
    /**
     * Contact details
     * 
     */
    public final static String s_c_Contact = "https://onerecord.iata.org/Contact";
    public final static IRI c_Contact = IRI.create(s_c_Contact);
    /**
     * Other contact options e.g. Skype, Whatsapp, Viber, Fax etc
     * 
     */
    public final static String s_c_ContactOther = "https://onerecord.iata.org/ContactOther";
    public final static IRI c_ContactOther = IRI.create(s_c_ContactOther);
    /**
     * Country details
     * 
     */
    public final static String s_c_Country = "https://onerecord.iata.org/Country";
    public final static IRI c_Country = IRI.create(s_c_Country);
    /**
     * Customs information details
     * 
     */
    public final static String s_c_CustomsInfo = "https://onerecord.iata.org/CustomsInfo";
    public final static IRI c_CustomsInfo = IRI.create(s_c_CustomsInfo);
    /**
     * Dangerous goods declaration
     * 
     */
    public final static String s_c_DgDeclaration = "https://onerecord.iata.org/DgDeclaration";
    public final static IRI c_DgDeclaration = IRI.create(s_c_DgDeclaration);
    /**
     * Details of the radioactive products 
     * 
     */
    public final static String s_c_DgProductRadioactive = "https://onerecord.iata.org/DgProductRadioactive";
    public final static IRI c_DgProductRadioactive = IRI.create(s_c_DgProductRadioactive);
    /**
     * Details of the radioactive isotope contained in the product
     * 
     */
    public final static String s_c_DgRadioactiveIsotope = "https://onerecord.iata.org/DgRadioactiveIsotope";
    public final static IRI c_DgRadioactiveIsotope = IRI.create(s_c_DgRadioactiveIsotope);
    /**
     * Dimension details
     * 
     */
    public final static String s_c_Dimensions = "https://onerecord.iata.org/Dimensions";
    public final static IRI c_Dimensions = IRI.create(s_c_Dimensions);
    /**
     * Event details
     * 
     */
    public final static String s_c_Event = "https://onerecord.iata.org/Event";
    public final static IRI c_Event = IRI.create(s_c_Event);
    /**
     * Subtype of Event
     * 
     */
    public final static String s_c_EventUld = "https://onerecord.iata.org/EventUld";
    public final static IRI c_EventUld = IRI.create(s_c_EventUld);
    /**
     * Reference documents details
     * 
     */
    public final static String s_c_ExternalReference = "https://onerecord.iata.org/ExternalReference";
    public final static IRI c_ExternalReference = IRI.create(s_c_ExternalReference);
    /**
     * Geolocation details - e.g. for drones, automated vehicles...
     * 
     */
    public final static String s_c_Geolocation = "https://onerecord.iata.org/Geolocation";
    public final static IRI c_Geolocation = IRI.create(s_c_Geolocation);
    /**
     * Insurance details
     * 
     */
    public final static String s_c_Insurance = "https://onerecord.iata.org/Insurance";
    public final static IRI c_Insurance = IRI.create(s_c_Insurance);
    /**
     * Item details
     * 
     */
    public final static String s_c_Item = "https://onerecord.iata.org/Item";
    public final static IRI c_Item = IRI.create(s_c_Item);
    /**
     * Dangerous Goods subtype of Item
     * 
     */
    public final static String s_c_ItemDg = "https://onerecord.iata.org/ItemDg";
    public final static IRI c_ItemDg = IRI.create(s_c_ItemDg);
    /**
     * Loading location details
     * 
     */
    public final static String s_c_Location = "https://onerecord.iata.org/Location";
    public final static IRI c_Location = IRI.create(s_c_Location);
    /**
     * Logistics Object prent class, containing all common properties for logistics objects.
     * 
     */
    public final static String s_c_LogisticsObject = "https://onerecord.iata.org/LogisticsObject";
    public final static IRI c_LogisticsObject = IRI.create(s_c_LogisticsObject);
    /**
     * Other identifiers
     * 
     */
    public final static String s_c_OtherIdentifier = "https://onerecord.iata.org/OtherIdentifier";
    public final static IRI c_OtherIdentifier = IRI.create(s_c_OtherIdentifier);
    /**
     * Company details
     * 
     */
    public final static String s_c_OtherParty = "https://onerecord.iata.org/OtherParty";
    public final static IRI c_OtherParty = IRI.create(s_c_OtherParty);
    /**
     * Packaging details 
     * 
     */
    public final static String s_c_PackagingType = "https://onerecord.iata.org/PackagingType";
    public final static IRI c_PackagingType = IRI.create(s_c_PackagingType);
    /**
     * Person details
     * 
     */
    public final static String s_c_Person = "https://onerecord.iata.org/Person";
    public final static IRI c_Person = IRI.create(s_c_Person);
    /**
     * Individual piece or virtual grouping of pieces
     * 
     */
    public final static String s_c_Piece = "https://onerecord.iata.org/Piece";
    public final static IRI c_Piece = IRI.create(s_c_Piece);
    /**
     * Dangerous Goods subtype of Piece
     * 
     */
    public final static String s_c_PieceDg = "https://onerecord.iata.org/PieceDg";
    public final static IRI c_PieceDg = IRI.create(s_c_PieceDg);
    /**
     * Price associated to the offer/booking
     * 
     */
    public final static String s_c_Price = "https://onerecord.iata.org/Price";
    public final static IRI c_Price = IRI.create(s_c_Price);
    /**
     * Product details
     * 
     */
    public final static String s_c_Product = "https://onerecord.iata.org/Product";
    public final static IRI c_Product = IRI.create(s_c_Product);
    /**
     * Dangerous Goods subtype of Product
     * 
     */
    public final static String s_c_ProductDg = "https://onerecord.iata.org/ProductDg";
    public final static IRI c_ProductDg = IRI.create(s_c_ProductDg);
    /**
     * Ranges details
     * 
     */
    public final static String s_c_Ranges = "https://onerecord.iata.org/Ranges";
    public final static IRI c_Ranges = IRI.create(s_c_Ranges);
    /**
     * Ratings details
     * 
     */
    public final static String s_c_Ratings = "https://onerecord.iata.org/Ratings";
    public final static IRI c_Ratings = IRI.create(s_c_Ratings);
    /**
     * Regulated Entity
     * 
     */
    public final static String s_c_RegulatedEntity = "https://onerecord.iata.org/RegulatedEntity";
    public final static IRI c_RegulatedEntity = IRI.create(s_c_RegulatedEntity);
    /**
     * Request object, refers to the Quote request or Booking request 
     * 
     */
    public final static String s_c_Request = "https://onerecord.iata.org/Request";
    public final static IRI c_Request = IRI.create(s_c_Request);
    /**
     * Routing details
     * 
     */
    public final static String s_c_Routing = "https://onerecord.iata.org/Routing";
    public final static IRI c_Routing = IRI.create(s_c_Routing);
    /**
     * Security declaration details
     * 
     */
    public final static String s_c_SecurityDeclaration = "https://onerecord.iata.org/SecurityDeclaration";
    public final static IRI c_SecurityDeclaration = IRI.create(s_c_SecurityDeclaration);
    /**
     * Sensor details and measurements, linked to Connected Devices
     * 
     */
    public final static String s_c_Sensor = "https://onerecord.iata.org/Sensor";
    public final static IRI c_Sensor = IRI.create(s_c_Sensor);
    /**
     * Service request details
     * 
     */
    public final static String s_c_ServiceRequest = "https://onerecord.iata.org/ServiceRequest";
    public final static IRI c_ServiceRequest = IRI.create(s_c_ServiceRequest);
    /**
     * Shipment details
     * 
     */
    public final static String s_c_Shipment = "https://onerecord.iata.org/Shipment";
    public final static IRI c_Shipment = IRI.create(s_c_Shipment);
    /**
     * Special handling details
     * 
     */
    public final static String s_c_SpecialHandling = "https://onerecord.iata.org/SpecialHandling";
    public final static IRI c_SpecialHandling = IRI.create(s_c_SpecialHandling);
    /**
     * Transport means details
     * 
     */
    public final static String s_c_TransportMeans = "https://onerecord.iata.org/TransportMeans";
    public final static IRI c_TransportMeans = IRI.create(s_c_TransportMeans);
    /**
     * Transport segment details
     * 
     */
    public final static String s_c_TransportSegment = "https://onerecord.iata.org/TransportSegment";
    public final static IRI c_TransportSegment = IRI.create(s_c_TransportSegment);
    /**
     * Unit Load Device details
     * 
     */
    public final static String s_c_ULD = "https://onerecord.iata.org/ULD";
    public final static IRI c_ULD = IRI.create(s_c_ULD);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_c_Value = "https://onerecord.iata.org/Value";
    public final static IRI c_Value = IRI.create(s_c_Value);
    /**
     * Unit of measurement details
     * 
     */
    public final static String s_c_VolumetricWeight = "https://onerecord.iata.org/VolumetricWeight";
    public final static IRI c_VolumetricWeight = IRI.create(s_c_VolumetricWeight);
    /**
     * Waybill details
     * 
     */
    public final static String s_c_Waybill = "https://onerecord.iata.org/Waybill";
    public final static IRI c_Waybill = IRI.create(s_c_Waybill);
    /**
     * Country details
     * 
     */
    public final static String s_p_country = "https://onerecord.iata.org/Address#country";
    public final static IRI p_country = IRI.create(s_p_country);
    /**
     * Carrier details
     * 
     */
    public final static String s_p_carrier = "https://onerecord.iata.org/Booking#carrier";
    public final static IRI p_carrier = IRI.create(s_p_carrier);
    /**
     * Reference to the Carrier products included in the offer
     * 
     */
    public final static String s_p_carrierProductInfo = "https://onerecord.iata.org/Booking#carrierProductInfo";
    public final static IRI p_carrierProductInfo = IRI.create(s_p_carrierProductInfo);
    /**
     * Consignee details
     * 
     */
    public final static String s_p_consignee = "https://onerecord.iata.org/Booking#consignee";
    public final static IRI p_consignee = IRI.create(s_p_consignee);
    /**
     * Freight Forwarder details
     * 
     */
    public final static String s_p_freightForwarder = "https://onerecord.iata.org/Booking#freightForwarder";
    public final static IRI p_freightForwarder = IRI.create(s_p_freightForwarder);
    /**
     * Other parties to be notified of the booking evolution
     * 
     */
    public final static String s_p_notifyParty = "https://onerecord.iata.org/Booking#notifyParty";
    public final static IRI p_notifyParty = IRI.create(s_p_notifyParty);
    /**
     * Price of the Booking (if different from the offer)
     * 
     */
    public final static String s_p_price = "https://onerecord.iata.org/Booking#price";
    public final static IRI p_price = IRI.create(s_p_price);
    /**
     * Reference to the Request
     * 
     */
    public final static String s_p_requestRef = "https://onerecord.iata.org/Booking#requestRef";
    public final static IRI p_requestRef = IRI.create(s_p_requestRef);
    /**
     * Routing details of the offer, to be compared with routing preferences of the quote request
     * 
     */
    public final static String s_p_routing = "https://onerecord.iata.org/Booking#routing";
    public final static IRI p_routing = IRI.create(s_p_routing);
    /**
     * Details of the shipement that is to be shipped
     * 
     */
    public final static String s_p_shipmentDetails = "https://onerecord.iata.org/Booking#shipmentDetails";
    public final static IRI p_shipmentDetails = IRI.create(s_p_shipmentDetails);
    /**
     * Shipper information
     * 
     */
    public final static String s_p_shipper = "https://onerecord.iata.org/Booking#shipper";
    public final static IRI p_shipper = IRI.create(s_p_shipper);
    /**
     * Transport segment linked to the offer, including the Departure and Arrival locations
     * 
     */
    public final static String s_p_transportMovement = "https://onerecord.iata.org/Booking#transportMovement";
    public final static IRI p_transportMovement = IRI.create(s_p_transportMovement);
    /**
     * House or Master Waybill unique identifier
     * 
     */
    public final static String s_p_waybillNumber = "https://onerecord.iata.org/Booking#waybillNumber";
    public final static IRI p_waybillNumber = IRI.create(s_p_waybillNumber);
    /**
     * Refers to the mother company of the branch
     * 
     */
    public final static String s_p_company = "https://onerecord.iata.org/Branch#company";
    public final static IRI p_company = IRI.create(s_p_company);
    /**
     * Contact person details
     * 
     */
    public final static String s_p_contactPerson = "https://onerecord.iata.org/Branch#contactPerson";
    public final static IRI p_contactPerson = IRI.create(s_p_contactPerson);
    /**
     * Location and address details
     * 
     */
    public final static String s_p_location = "https://onerecord.iata.org/Branch#location";
    public final static IRI p_location = IRI.create(s_p_location);
    /**
     * Other identifiers (e.g. LEI (Legal Entity Identifier), TIN (Trader Identification Number), PIMA address, Account number, VAT/Tax id, Legal Registration id, DUNS number, etc)
     * 
     */
    public final static String s_p_otherIdentifier = "https://onerecord.iata.org/Branch#otherIdentifier";
    public final static IRI p_otherIdentifier = IRI.create(s_p_otherIdentifier);
    /**
     * Company branches
     * 
     */
    public final static String s_p_branch = "https://onerecord.iata.org/Company#branch";
    public final static IRI p_branch = IRI.create(s_p_branch);
    /**
     * Other contact options e.g. Skype, Whatsapp, Viber, Fax etc
     * 
     */
    public final static String s_p_other = "https://onerecord.iata.org/Contact#other";
    public final static IRI p_other = IRI.create(s_p_other);
    /**
     * DgRadioactiveIsotope.
     * 
     */
    public final static String s_p_isotopes = "https://onerecord.iata.org/DgProductRadioactive#isotopes";
    public final static IRI p_isotopes = IRI.create(s_p_isotopes);
    /**
     * Height
     * 
     */
    public final static String s_p_height = "https://onerecord.iata.org/Dimensions#height";
    public final static IRI p_height = IRI.create(s_p_height);
    /**
     * Length
     * 
     */
    public final static String s_p_length = "https://onerecord.iata.org/Dimensions#length";
    public final static IRI p_length = IRI.create(s_p_length);
    /**
     * Volume
     * 
     */
    public final static String s_p_volume = "https://onerecord.iata.org/Dimensions#volume";
    public final static IRI p_volume = IRI.create(s_p_volume);
    /**
     * Width
     * 
     */
    public final static String s_p_width = "https://onerecord.iata.org/Dimensions#width";
    public final static IRI p_width = IRI.create(s_p_width);
    /**
     * Location of event
     * 
     */
    public final static String s_p_location_A = "https://onerecord.iata.org/Event#location";
    public final static IRI p_location_A = IRI.create(s_p_location_A);
    /**
     * Party performing the event
     * 
     */
    public final static String s_p_performedBy = "https://onerecord.iata.org/Event#performedBy";
    public final static IRI p_performedBy = IRI.create(s_p_performedBy);
    /**
     * Document originator details and contacts
     * 
     */
    public final static String s_p_documentOriginator = "https://onerecord.iata.org/ExternalReference#documentOriginator";
    public final static IRI p_documentOriginator = IRI.create(s_p_documentOriginator);
    /**
     * Elevation from sea level
     * 
     */
    public final static String s_p_elevation = "https://onerecord.iata.org/Geolocation#elevation";
    public final static IRI p_elevation = IRI.create(s_p_elevation);
    /**
     * Location latitude 
     * 
     */
    public final static String s_p_latitude = "https://onerecord.iata.org/Geolocation#latitude";
    public final static IRI p_latitude = IRI.create(s_p_latitude);
    /**
     * Location longitude 
     * 
     */
    public final static String s_p_longitude = "https://onerecord.iata.org/Geolocation#longitude";
    public final static IRI p_longitude = IRI.create(s_p_longitude);
    /**
     * Party covering the insurance 
     * 
     */
    public final static String s_p_coveringParty = "https://onerecord.iata.org/Insurance#coveringParty";
    public final static IRI p_coveringParty = IRI.create(s_p_coveringParty);
    /**
     * Insured amount - amount covered by the insurance policy
     * 
     */
    public final static String s_p_insuranceAmount = "https://onerecord.iata.org/Insurance#insuranceAmount";
    public final static IRI p_insuranceAmount = IRI.create(s_p_insuranceAmount);
    /**
     * Reference to the shipment insured
     * 
     */
    public final static String s_p_insuranceShipment = "https://onerecord.iata.org/Insurance#insuranceShipment";
    public final static IRI p_insuranceShipment = IRI.create(s_p_insuranceShipment);
    /**
     * Dimensions of the item
     * 
     */
    public final static String s_p_dimensions = "https://onerecord.iata.org/Item#dimensions";
    public final static IRI p_dimensions = IRI.create(s_p_dimensions);
    /**
     * URI of the PIECE that contains the Item
     * 
     */
    public final static String s_p_isInPiece = "https://onerecord.iata.org/Item#isInPiece";
    public final static IRI p_isInPiece = IRI.create(s_p_isInPiece);
    /**
     * Other identifier details
     * 
     */
    public final static String s_p_otherIdentifier_A = "https://onerecord.iata.org/Item#otherIdentifier";
    public final static IRI p_otherIdentifier_A = IRI.create(s_p_otherIdentifier_A);
    /**
     * URI of the product
     * 
     */
    public final static String s_p_product = "https://onerecord.iata.org/Item#product";
    public final static IRI p_product = IRI.create(s_p_product);
    /**
     * Production country details
     * 
     */
    public final static String s_p_productionCountry = "https://onerecord.iata.org/Item#productionCountry";
    public final static IRI p_productionCountry = IRI.create(s_p_productionCountry);
    /**
     * Item target country
     * 
     */
    public final static String s_p_targetCountry = "https://onerecord.iata.org/Item#targetCountry";
    public final static IRI p_targetCountry = IRI.create(s_p_targetCountry);
    /**
     * Product price per unit in the base
     * 
     */
    public final static String s_p_unitPrice = "https://onerecord.iata.org/Item#unitPrice";
    public final static IRI p_unitPrice = IRI.create(s_p_unitPrice);
    /**
     * Weight of the item
     * 
     */
    public final static String s_p_weight = "https://onerecord.iata.org/Item#weight";
    public final static IRI p_weight = IRI.create(s_p_weight);
    /**
     * Contains the Emergency contact name (e.g. the name of the agency) and phone number (min required)
     * 
     */
    public final static String s_p_emergencyContact = "https://onerecord.iata.org/ItemDg#emergencyContact";
    public final static IRI p_emergencyContact = IRI.create(s_p_emergencyContact);
    /**
     * The total net weight of dangerous goods transported of this line item. For air transport the value must be the volume or mass in each package.
     * 
     */
    public final static String s_p_netWeightMeasure = "https://onerecord.iata.org/ItemDg#netWeightMeasure";
    public final static IRI p_netWeightMeasure = IRI.create(s_p_netWeightMeasure);
    /**
     * Address details
     * 
     */
    public final static String s_p_address = "https://onerecord.iata.org/Location#address";
    public final static IRI p_address = IRI.create(s_p_address);
    /**
     * Geolocation details
     * 
     */
    public final static String s_p_geolocation = "https://onerecord.iata.org/Location#geolocation";
    public final static IRI p_geolocation = IRI.create(s_p_geolocation);
    /**
     * Events object
     * 
     */
    public final static String s_p_event = "https://onerecord.iata.org/LogisticsObject#event";
    public final static IRI p_event = IRI.create(s_p_event);
    /**
     * Company details
     * 
     */
    public final static String s_p_companyDetails = "https://onerecord.iata.org/OtherParty#companyDetails";
    public final static IRI p_companyDetails = IRI.create(s_p_companyDetails);
    /**
     * Refers to the Branch the person is associated with
     * 
     */
    public final static String s_p_associatedBranch = "https://onerecord.iata.org/Person#associatedBranch";
    public final static IRI p_associatedBranch = IRI.create(s_p_associatedBranch);
    /**
     * Contact details
     * 
     */
    public final static String s_p_contact = "https://onerecord.iata.org/Person#contact";
    public final static IRI p_contact = IRI.create(s_p_contact);
    /**
     * Reference to the item(s) contained in the piece
     * 
     */
    public final static String s_p_containedItems = "https://onerecord.iata.org/Piece#containedItems";
    public final static IRI p_containedItems = IRI.create(s_p_containedItems);
    /**
     * Details of contained piece(s)
     * 
     */
    public final static String s_p_containedPiece = "https://onerecord.iata.org/Piece#containedPiece";
    public final static IRI p_containedPiece = IRI.create(s_p_containedPiece);
    /**
     * Customs details
     * 
     */
    public final static String s_p_customsInfo = "https://onerecord.iata.org/Piece#customsInfo";
    public final static IRI p_customsInfo = IRI.create(s_p_customsInfo);
    /**
     * Reference to the Dangerous Goods declaration
     * 
     */
    public final static String s_p_dgDeclaration = "https://onerecord.iata.org/Piece#dgDeclaration";
    public final static IRI p_dgDeclaration = IRI.create(s_p_dgDeclaration);
    /**
     * Dimensions details
     * 
     */
    public final static String s_p_dimensions_A = "https://onerecord.iata.org/Piece#dimensions";
    public final static IRI p_dimensions_A = IRI.create(s_p_dimensions_A);
    /**
     * Reference documents details
     * 
     */
    public final static String s_p_externalReference = "https://onerecord.iata.org/Piece#externalReference";
    public final static IRI p_externalReference = IRI.create(s_p_externalReference);
    /**
     * Weight details
     * 
     */
    public final static String s_p_grossWeight = "https://onerecord.iata.org/Piece#grossWeight";
    public final static IRI p_grossWeight = IRI.create(s_p_grossWeight);
    /**
     * Other piece identification ( e.g. Shipping Marks, Seal)
     * 
     */
    public final static String s_p_otherIdentifier_A_A = "https://onerecord.iata.org/Piece#otherIdentifier";
    public final static IRI p_otherIdentifier_A_A = IRI.create(s_p_otherIdentifier_A_A);
    /**
     * Other party company details - e.g. the party to be notified
     * 
     */
    public final static String s_p_otherParty = "https://onerecord.iata.org/Piece#otherParty";
    public final static IRI p_otherParty = IRI.create(s_p_otherParty);
    /**
     * Packaging details 
     * 
     */
    public final static String s_p_packagingType = "https://onerecord.iata.org/Piece#packagingType";
    public final static IRI p_packagingType = IRI.create(s_p_packagingType);
    /**
     * Product of the piece, mandatory when there are no items
     * 
     */
    public final static String s_p_product_A = "https://onerecord.iata.org/Piece#product";
    public final static IRI p_product_A = IRI.create(s_p_product_A);
    /**
     * Goods production country, mandatory when there are no Items
     * 
     */
    public final static String s_p_productionCountry_A = "https://onerecord.iata.org/Piece#productionCountry";
    public final static IRI p_productionCountry_A = IRI.create(s_p_productionCountry_A);
    /**
     * Security details
     * 
     */
    public final static String s_p_securityStatus = "https://onerecord.iata.org/Piece#securityStatus";
    public final static IRI p_securityStatus = IRI.create(s_p_securityStatus);
    /**
     * Security requests
     * 
     */
    public final static String s_p_serviceRequest = "https://onerecord.iata.org/Piece#serviceRequest";
    public final static IRI p_serviceRequest = IRI.create(s_p_serviceRequest);
    /**
     * Shipper company details - e.g. the party shipping the piece
     * 
     */
    public final static String s_p_shipper_A = "https://onerecord.iata.org/Piece#shipper";
    public final static IRI p_shipper_A = IRI.create(s_p_shipper_A);
    /**
     * Special Handling details
     * 
     */
    public final static String s_p_specialHandling = "https://onerecord.iata.org/Piece#specialHandling";
    public final static IRI p_specialHandling = IRI.create(s_p_specialHandling);
    /**
     * Segment related to the transport status
     * 
     */
    public final static String s_p_transportSegment = "https://onerecord.iata.org/Piece#transportSegment";
    public final static IRI p_transportSegment = IRI.create(s_p_transportSegment);
    /**
     * ULD on which the (virtual) piece has been loaded into - URIs of the ULD
     * 
     */
    public final static String s_p_uldReference = "https://onerecord.iata.org/Piece#uldReference";
    public final static IRI p_uldReference = IRI.create(s_p_uldReference);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_p_volumetricWeight = "https://onerecord.iata.org/Piece#volumetricWeight";
    public final static IRI p_volumetricWeight = IRI.create(s_p_volumetricWeight);
    /**
     * Reference to the Booking or Offer
     * 
     */
    public final static String s_p_bookingRef = "https://onerecord.iata.org/Price#bookingRef";
    public final static IRI p_bookingRef = IRI.create(s_p_bookingRef);
    /**
     * Rating used for pricing
     * 
     */
    public final static String s_p_ratings = "https://onerecord.iata.org/Price#ratings";
    public final static IRI p_ratings = IRI.create(s_p_ratings);
    /**
     * Charateristics of the product
     * 
     */
    public final static String s_p_characteristics = "https://onerecord.iata.org/Product#characteristics";
    public final static IRI p_characteristics = IRI.create(s_p_characteristics);
    /**
     * Manufacturing company details and contacts
     * 
     */
    public final static String s_p_manufacturer = "https://onerecord.iata.org/Product#manufacturer";
    public final static IRI p_manufacturer = IRI.create(s_p_manufacturer);
    /**
     * Other product identifier (e.g. Bar code, UPC, EAN, Amazon)
     * 
     */
    public final static String s_p_otherIdentifier_A_A_A = "https://onerecord.iata.org/Product#otherIdentifier";
    public final static IRI p_otherIdentifier_A_A_A = IRI.create(s_p_otherIdentifier_A_A_A);
    /**
     * Dg Radioactive Material
     * 
     */
    public final static String s_p_dgRadioactiveMaterial = "https://onerecord.iata.org/ProductDg#dgRadioactiveMaterial";
    public final static IRI p_dgRadioactiveMaterial = IRI.create(s_p_dgRadioactiveMaterial);
    /**
     * Reference to the ranges
     * 
     */
    public final static String s_p_ranges = "https://onerecord.iata.org/Ratings#ranges";
    public final static IRI p_ranges = IRI.create(s_p_ranges);
    /**
     * Branch/Company
     * 
     */
    public final static String s_p_entity = "https://onerecord.iata.org/RegulatedEntity#entity";
    public final static IRI p_entity = IRI.create(s_p_entity);
    /**
     * Regulated entity identifier (e.g. Regulated Agent Identifier) is mandatory
     * 
     */
    public final static String s_p_regulatedEntityIdentifier = "https://onerecord.iata.org/RegulatedEntity#regulatedEntityIdentifier";
    public final static IRI p_regulatedEntityIdentifier = IRI.create(s_p_regulatedEntityIdentifier);
    /**
     * Parties involved if known
     * 
     */
    public final static String s_p_parties = "https://onerecord.iata.org/Request#parties";
    public final static IRI p_parties = IRI.create(s_p_parties);
    /**
     * Ratings preferences of the request
     * 
     */
    public final static String s_p_ratingsPreference = "https://onerecord.iata.org/Request#ratingsPreference";
    public final static IRI p_ratingsPreference = IRI.create(s_p_ratingsPreference);
    /**
     * Routing details that are part of the request, these details will be used to determine if the offer is a perfect match
     * 
     */
    public final static String s_p_routingPreferences = "https://onerecord.iata.org/Request#routingPreferences";
    public final static IRI p_routingPreferences = IRI.create(s_p_routingPreferences);
    /**
     * Details of the shipement that is to be shipped
     * 
     */
    public final static String s_p_shipmentDetails_A = "https://onerecord.iata.org/Request#shipmentDetails";
    public final static IRI p_shipmentDetails_A = IRI.create(s_p_shipmentDetails_A);
    /**
     * Transport segment linked to the request, including the Departure and Arrival locations requested
     * 
     */
    public final static String s_p_transportMovement_A = "https://onerecord.iata.org/Request#transportMovement";
    public final static IRI p_transportMovement_A = IRI.create(s_p_transportMovement_A);
    /**
     * Unit preferences of the request (e.g. kg or cm)
     * 
     */
    public final static String s_p_unitsPreference = "https://onerecord.iata.org/Request#unitsPreference";
    public final static IRI p_unitsPreference = IRI.create(s_p_unitsPreference);
    /**
     * Name of person (or employee ID) who issued the security status
     * 
     */
    public final static String s_p_issuedBy = "https://onerecord.iata.org/SecurityDeclaration#issuedBy";
    public final static IRI p_issuedBy = IRI.create(s_p_issuedBy);
    /**
     * Any other regulated entity that accepts custody of the cargo and accepts the security status originally issued
     * 
     */
    public final static String s_p_otherRegulatedEntity = "https://onerecord.iata.org/SecurityDeclaration#otherRegulatedEntity";
    public final static IRI p_otherRegulatedEntity = IRI.create(s_p_otherRegulatedEntity);
    /**
     * Piece linked to the Security Declaration
     * 
     */
    public final static String s_p_piece = "https://onerecord.iata.org/SecurityDeclaration#piece";
    public final static IRI p_piece = IRI.create(s_p_piece);
    /**
     * Regulated entity that tendered the consignment
     * 
     */
    public final static String s_p_receivedFrom = "https://onerecord.iata.org/SecurityDeclaration#receivedFrom";
    public final static IRI p_receivedFrom = IRI.create(s_p_receivedFrom);
    /**
     * Regulated entity issuing the Security Declaration
     * 
     */
    public final static String s_p_regulatedEntityIssuer = "https://onerecord.iata.org/SecurityDeclaration#regulatedEntityIssuer";
    public final static IRI p_regulatedEntityIssuer = IRI.create(s_p_regulatedEntityIssuer);
    /**
     * Details of contained piece(s)
     * 
     */
    public final static String s_p_containedPiece_A = "https://onerecord.iata.org/Shipment#containedPiece";
    public final static IRI p_containedPiece_A = IRI.create(s_p_containedPiece_A);
    /**
     * Dimensions details
     * 
     */
    public final static String s_p_dimensions_A_A = "https://onerecord.iata.org/Shipment#dimensions";
    public final static IRI p_dimensions_A_A = IRI.create(s_p_dimensions_A_A);
    /**
     * Reference document details
     * 
     */
    public final static String s_p_externalReference_A = "https://onerecord.iata.org/Shipment#externalReference";
    public final static IRI p_externalReference_A = IRI.create(s_p_externalReference_A);
    /**
     * Insurance details
     * 
     */
    public final static String s_p_insurance = "https://onerecord.iata.org/Shipment#insurance";
    public final static IRI p_insurance = IRI.create(s_p_insurance);
    /**
     * Weight details
     * 
     */
    public final static String s_p_totalGrossWeight = "https://onerecord.iata.org/Shipment#totalGrossWeight";
    public final static IRI p_totalGrossWeight = IRI.create(s_p_totalGrossWeight);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_p_volumetricWeight_A = "https://onerecord.iata.org/Shipment#volumetricWeight";
    public final static IRI p_volumetricWeight_A = IRI.create(s_p_volumetricWeight_A);
    /**
     * Waybill unique identifier (AWB or HWB)
     * 
     */
    public final static String s_p_waybillNumber_A = "https://onerecord.iata.org/Shipment#waybillNumber";
    public final static IRI p_waybillNumber_A = IRI.create(s_p_waybillNumber_A);
    /**
     * Company operating the transport means
     * 
     */
    public final static String s_p_transportCompany = "https://onerecord.iata.org/TransportMeans#transportCompany";
    public final static IRI p_transportCompany = IRI.create(s_p_transportCompany);
    /**
     * Associated transport segment
     * 
     */
    public final static String s_p_transportSegment_A = "https://onerecord.iata.org/TransportMeans#transportSegment";
    public final static IRI p_transportSegment_A = IRI.create(s_p_transportSegment_A);
    /**
     * Required for some CO2 calculations
     * 
     */
    public final static String s_p_typicalCO2Coefficient = "https://onerecord.iata.org/TransportMeans#typicalCO2Coefficient";
    public final static IRI p_typicalCO2Coefficient = IRI.create(s_p_typicalCO2Coefficient);
    /**
     * Typical fuel comsumption (e.g. 20 000L / 1 000nm)
     * 
     */
    public final static String s_p_typicalFuelConsumption = "https://onerecord.iata.org/TransportMeans#typicalFuelConsumption";
    public final static IRI p_typicalFuelConsumption = IRI.create(s_p_typicalFuelConsumption);
    /**
     * Arrival details including time and date
     * 
     */
    public final static String s_p_arrivalLocation = "https://onerecord.iata.org/TransportSegment#arrivalLocation";
    public final static IRI p_arrivalLocation = IRI.create(s_p_arrivalLocation);
    /**
     * Method of calculation of the CO2 emissions
     * 
     */
    public final static String s_p_co2CalculationMethod = "https://onerecord.iata.org/TransportSegment#co2CalculationMethod";
    public final static IRI p_co2CalculationMethod = IRI.create(s_p_co2CalculationMethod);
    /**
     * Amount of CO2 emitted (e.g. 34 kg/km)
     * 
     */
    public final static String s_p_co2Emissions = "https://onerecord.iata.org/TransportSegment#co2Emissions";
    public final static IRI p_co2Emissions = IRI.create(s_p_co2Emissions);
    /**
     * Departure details including time and date
     * 
     */
    public final static String s_p_departureLocation = "https://onerecord.iata.org/TransportSegment#departureLocation";
    public final static IRI p_departureLocation = IRI.create(s_p_departureLocation);
    /**
     * Distance calculated if distance measured is not available
     * 
     */
    public final static String s_p_distanceCalculated = "https://onerecord.iata.org/TransportSegment#distanceCalculated";
    public final static IRI p_distanceCalculated = IRI.create(s_p_distanceCalculated);
    /**
     * Distance based on actual measured distance (with IOT-devices), or is it a calculated value?
     * 
     */
    public final static String s_p_distanceMeasured = "https://onerecord.iata.org/TransportSegment#distanceMeasured";
    public final static IRI p_distanceMeasured = IRI.create(s_p_distanceMeasured);
    /**
     * Reference to document or logistics object (URI)
     * 
     */
    public final static String s_p_externalReference_A_A = "https://onerecord.iata.org/TransportSegment#externalReference";
    public final static IRI p_externalReference_A_A = IRI.create(s_p_externalReference_A_A);
    /**
     * calculated fuel consumption, if measured not available
     * 
     */
    public final static String s_p_fuelAmountCalculated = "https://onerecord.iata.org/TransportSegment#fuelAmountCalculated";
    public final static IRI p_fuelAmountCalculated = IRI.create(s_p_fuelAmountCalculated);
    /**
     * actual measured fuel consumption
     * 
     */
    public final static String s_p_fuelAmountMeasured = "https://onerecord.iata.org/TransportSegment#fuelAmountMeasured";
    public final static IRI p_fuelAmountMeasured = IRI.create(s_p_fuelAmountMeasured);
    /**
     * Transport means details
     * 
     */
    public final static String s_p_transportMeans = "https://onerecord.iata.org/TransportSegment#transportMeans";
    public final static IRI p_transportMeans = IRI.create(s_p_transportMeans);
    /**
     * Name of the person operating the transport means (e.g. aircraft captain, truck driver)
     * 
     */
    public final static String s_p_transportMeansOperator = "https://onerecord.iata.org/TransportSegment#transportMeansOperator";
    public final static IRI p_transportMeansOperator = IRI.create(s_p_transportMeansOperator);
    /**
     * Pieces assigned to the transport segment
     * 
     */
    public final static String s_p_transportedPieces = "https://onerecord.iata.org/TransportSegment#transportedPieces";
    public final static IRI p_transportedPieces = IRI.create(s_p_transportedPieces);
    /**
     * ULDs assigned to the transport segment
     * 
     */
    public final static String s_p_transportedUlds = "https://onerecord.iata.org/TransportSegment#transportedUlds";
    public final static IRI p_transportedUlds = IRI.create(s_p_transportedUlds);
    /**
     * Reference documents details 
     * 
     */
    public final static String s_p_externalReference_A_A_A = "https://onerecord.iata.org/ULD#externalReference";
    public final static IRI p_externalReference_A_A_A = IRI.create(s_p_externalReference_A_A_A);
    /**
     * Tare weight of the empty ULD
     * 
     */
    public final static String s_p_tareWeight = "https://onerecord.iata.org/ULD#tareWeight";
    public final static IRI p_tareWeight = IRI.create(s_p_tareWeight);
    /**
     * Segment related to the ULD movement
     * 
     */
    public final static String s_p_transportSegment_A_A = "https://onerecord.iata.org/ULD#transportSegment";
    public final static IRI p_transportSegment_A_A = IRI.create(s_p_transportSegment_A_A);
    /**
     * Details of contained (virtual) piece(s)
     * 
     */
    public final static String s_p_upid = "https://onerecord.iata.org/ULD#upid";
    public final static IRI p_upid = IRI.create(s_p_upid);
    /**
     * Chargeable weight
     * 
     */
    public final static String s_p_chargeableWeight = "https://onerecord.iata.org/VolumetricWeight#chargeableWeight";
    public final static IRI p_chargeableWeight = IRI.create(s_p_chargeableWeight);
    /**
     * Volume to weight conversion factor
     * 
     */
    public final static String s_p_conversionFactor = "https://onerecord.iata.org/VolumetricWeight#conversionFactor";
    public final static IRI p_conversionFactor = IRI.create(s_p_conversionFactor);
    /**
     * Refers to the Booking 
     * 
     */
    public final static String s_p_bookingRef_A = "https://onerecord.iata.org/Waybill#bookingRef";
    public final static IRI p_bookingRef_A = IRI.create(s_p_bookingRef_A);
    /**
     * Refers to the Waybill(s) contained
     * 
     */
    public final static String s_p_containedWaybill = "https://onerecord.iata.org/Waybill#containedWaybill";
    public final static IRI p_containedWaybill = IRI.create(s_p_containedWaybill);
    /**
     * Address identifier using special coding systems e.g. US CBP FIRMS code
     * 
     */
    public final static String s_p_addressCode = "https://onerecord.iata.org/Address#addressCode";
    public final static IRI p_addressCode = IRI.create(s_p_addressCode);
    /**
     * Type of address code e.g. US CBP FIRMS
     * 
     */
    public final static String s_p_addressCodeType = "https://onerecord.iata.org/Address#addressCodeType";
    public final static IRI p_addressCodeType = IRI.create(s_p_addressCodeType);
    /**
     * UN/LOCODE city code (5 letter) or IATA city code (3 letter)
     * 
     */
    public final static String s_p_cityCode = "https://onerecord.iata.org/Address#cityCode";
    public final static IRI p_cityCode = IRI.create(s_p_cityCode);
    /**
     * If no CityCode provided, full name of the city 
     * 
     */
    public final static String s_p_cityName = "https://onerecord.iata.org/Address#cityName";
    public final static IRI p_cityName = IRI.create(s_p_cityName);
    /**
     * Post Office box number / code
     * 
     */
    public final static String s_p_poBox = "https://onerecord.iata.org/Address#poBox";
    public final static IRI p_poBox = IRI.create(s_p_poBox);
    /**
     * Postal / ZIP code
     * 
     */
    public final static String s_p_postalCode = "https://onerecord.iata.org/Address#postalCode";
    public final static IRI p_postalCode = IRI.create(s_p_postalCode);
    /**
     * Region/ State / Department. Refer ISO 3166-2
     * 
     */
    public final static String s_p_regionCode = "https://onerecord.iata.org/Address#regionCode";
    public final static IRI p_regionCode = IRI.create(s_p_regionCode);
    /**
     * If no StateCode provided, full name of the region / state / province / canton
     * 
     */
    public final static String s_p_regionName = "https://onerecord.iata.org/Address#regionName";
    public final static IRI p_regionName = IRI.create(s_p_regionName);
    /**
     * Street address including street name, street number, building number, apartment etc
     * 
     */
    public final static String s_p_street = "https://onerecord.iata.org/Address#street";
    public final static IRI p_street = IRI.create(s_p_street);
    /**
     * Status of the Booking with regards to the step in the Quote & Book process: Quoted, Booked
     * 
     */
    public final static String s_p_bookingStatus = "https://onerecord.iata.org/Booking#bookingStatus";
    public final static IRI p_bookingStatus = IRI.create(s_p_bookingStatus);
    /**
     * Latest Acceptance time as per CargoIQ definition
     * 
     */
    public final static String s_p_latestAcceptanceTime = "https://onerecord.iata.org/Booking#latestAcceptanceTime";
    public final static IRI p_latestAcceptanceTime = IRI.create(s_p_latestAcceptanceTime);
    /**
     * Indicates if the offer is a perfect match to the quote request (boolean)
     * 
     */
    public final static String s_p_requestMatchInd = "https://onerecord.iata.org/Booking#requestMatchInd";
    public final static IRI p_requestMatchInd = IRI.create(s_p_requestMatchInd);
    /**
     * Indicate the secruty state of the shipment, screened or not
     * 
     */
    public final static String s_p_shipmentSecurityStatus = "https://onerecord.iata.org/Booking#shipmentSecurityStatus";
    public final static IRI p_shipmentSecurityStatus = IRI.create(s_p_shipmentSecurityStatus);
    /**
     * Time of availability of the shipment as per CargoIQ definition
     * 
     */
    public final static String s_p_timeOfAvailability = "https://onerecord.iata.org/Booking#timeOfAvailability";
    public final static IRI p_timeOfAvailability = IRI.create(s_p_timeOfAvailability);
    /**
     * Total transit time as per CargoIQ definition
     * 
     */
    public final static String s_p_totalTransitTime = "https://onerecord.iata.org/Booking#totalTransitTime";
    public final static IRI p_totalTransitTime = IRI.create(s_p_totalTransitTime);
    /**
     * Company branch name
     * 
     */
    public final static String s_p_branchName = "https://onerecord.iata.org/Branch#branchName";
    public final static IRI p_branchName = IRI.create(s_p_branchName);
    /**
     * IATA CASS cargo agent 4 digit branch number / location identifier
     * 
     */
    public final static String s_p_iataCargoAgentLocationIdentifier = "https://onerecord.iata.org/Branch#iataCargoAgentLocationIdentifier";
    public final static IRI p_iataCargoAgentLocationIdentifier = IRI.create(s_p_iataCargoAgentLocationIdentifier);
    /**
     * Name of the CO2 calculation method
     * 
     */
    public final static String s_p_methodName = "https://onerecord.iata.org/CO2CalcMethod#methodName";
    public final static IRI p_methodName = IRI.create(s_p_methodName);
    /**
     * Version of the CO2 calculation method
     * 
     */
    public final static String s_p_methodVersion = "https://onerecord.iata.org/CO2CalcMethod#methodVersion";
    public final static IRI p_methodVersion = IRI.create(s_p_methodVersion);
    /**
     * Carrier's product code
     * 
     */
    public final static String s_p_productCode = "https://onerecord.iata.org/CarrierProduct#productCode";
    public final static IRI p_productCode = IRI.create(s_p_productCode);
    /**
     * Carrier's product description
     * 
     */
    public final static String s_p_productDescription = "https://onerecord.iata.org/CarrierProduct#productDescription";
    public final static IRI p_productDescription = IRI.create(s_p_productDescription);
    /**
     * Product characteristics code - e.g. CLR - Color
     * 
     */
    public final static String s_p_characteristicsType = "https://onerecord.iata.org/Characteristics#characteristicsType";
    public final static IRI p_characteristicsType = IRI.create(s_p_characteristicsType);
    /**
     * Product characteristics value / attribute - e.g. Blue...
     * 
     */
    public final static String s_p_value = "https://onerecord.iata.org/Characteristics#value";
    public final static IRI p_value = IRI.create(s_p_value);
    /**
     * IATA two-character airline code 
     * 
     */
    public final static String s_p_airlineCode = "https://onerecord.iata.org/Company#airlineCode";
    public final static IRI p_airlineCode = IRI.create(s_p_airlineCode);
    /**
     * IATA three-numeric airline prefix number 
     * 
     */
    public final static String s_p_airlinePrefix = "https://onerecord.iata.org/Company#airlinePrefix";
    public final static IRI p_airlinePrefix = IRI.create(s_p_airlinePrefix);
    /**
     * Name of company or organization
     * 
     */
    public final static String s_p_companyName = "https://onerecord.iata.org/Company#companyName";
    public final static IRI p_companyName = IRI.create(s_p_companyName);
    /**
     * IATA accredited cargo agent 7 digit number
     * 
     */
    public final static String s_p_iataCargoAgentCode = "https://onerecord.iata.org/Company#iataCargoAgentCode";
    public final static IRI p_iataCargoAgentCode = IRI.create(s_p_iataCargoAgentCode);
    /**
     * E-mail address
     * 
     */
    public final static String s_p_emailAddress = "https://onerecord.iata.org/Contact#emailAddress";
    public final static IRI p_emailAddress = IRI.create(s_p_emailAddress);
    /**
     * Phone number
     * 
     */
    public final static String s_p_phoneNumber = "https://onerecord.iata.org/Contact#phoneNumber";
    public final static IRI p_phoneNumber = IRI.create(s_p_phoneNumber);
    /**
     * Contact details e.g. Skype ID 
     * 
     */
    public final static String s_p_detail = "https://onerecord.iata.org/ContactOther#detail";
    public final static IRI p_detail = IRI.create(s_p_detail);
    /**
     * Contact type - e.g. Skype
     * 
     */
    public final static String s_p_otherType = "https://onerecord.iata.org/ContactOther#otherType";
    public final static IRI p_otherType = IRI.create(s_p_otherType);
    /**
     * Country ISO code. Refer ISO 3166-2
     * 
     */
    public final static String s_p_countryCode = "https://onerecord.iata.org/Country#countryCode";
    public final static IRI p_countryCode = IRI.create(s_p_countryCode);
    /**
     * Full country name
     * 
     */
    public final static String s_p_countryName = "https://onerecord.iata.org/Country#countryName";
    public final static IRI p_countryName = IRI.create(s_p_countryName);
    /**
     * Customs content code. Refer CXML Code List 1.100, e.g. IST - Security Textual StatementNumber, M - Movement Reference Number
     * 
     */
    public final static String s_p_customsInfoContentCode = "https://onerecord.iata.org/CustomsInfo#customsInfoContentCode";
    public final static IRI p_customsInfoContentCode = IRI.create(s_p_customsInfoContentCode);
    /**
     * Customs country code.
     * 
     */
    public final static String s_p_customsInfoCountryCode = "https://onerecord.iata.org/CustomsInfo#customsInfoCountryCode";
    public final static IRI p_customsInfoCountryCode = IRI.create(s_p_customsInfoCountryCode);
    /**
     * Free text for customs remarks
     * 
     */
    public final static String s_p_customsInfoNote = "https://onerecord.iata.org/CustomsInfo#customsInfoNote";
    public final static IRI p_customsInfoNote = IRI.create(s_p_customsInfoNote);
    /**
     * Customs subject code. Refer CXML Code List 1.19, e.g. IMP for import, EXP for export, AGT for Agent, ISS for The Regulated Agent Issuing the Security Status for rdf:type Consignment etc.   At least one of the three elements (Country Code, Information Identifier or Customs, Security and Regulatory Control Information Identifier) must be completed
     * 
     */
    public final static String s_p_customsInfoSubjectCode = "https://onerecord.iata.org/CustomsInfo#customsInfoSubjectCode";
    public final static IRI p_customsInfoSubjectCode = IRI.create(s_p_customsInfoSubjectCode);
    /**
     * Information for customs submission
     * 
     */
    public final static String s_p_customsInformation = "https://onerecord.iata.org/CustomsInfo#customsInformation";
    public final static IRI p_customsInformation = IRI.create(s_p_customsInformation);
    /**
     * Contains the Special Handling Code related to the prescribed limitation. Hardcoded to PASSENGER AND CARGO AIRCRAFT or CARGO AIRCRAFT ONLY. This field is mandatory for air (Air) 
     * 
     */
    public final static String s_p_aircraftLimitationInformation = "https://onerecord.iata.org/DgDeclaration#aircraftLimitationInformation";
    public final static IRI p_aircraftLimitationInformation = IRI.create(s_p_aircraftLimitationInformation);
    /**
     * Contains the warning message complying with the regulations text note. This field is mandatory for air (Air) 
     * 
     */
    public final static String s_p_complianceDeclarationText = "https://onerecord.iata.org/DgDeclaration#complianceDeclarationText";
    public final static IRI p_complianceDeclarationText = IRI.create(s_p_complianceDeclarationText);
    /**
     * Indicates an exclusive use shipment
     * 
     */
    public final static String s_p_exclusiveUseIndicator = "https://onerecord.iata.org/DgDeclaration#exclusiveUseIndicator";
    public final static IRI p_exclusiveUseIndicator = IRI.create(s_p_exclusiveUseIndicator);
    /**
     * Free text. This may include items such as Control temperature for substances stabilized by temperature control, name and telephone number of a responsible person for infectious substances. 
     * 
     */
    public final static String s_p_handlingInformation = "https://onerecord.iata.org/DgDeclaration#handlingInformation";
    public final static IRI p_handlingInformation = IRI.create(s_p_handlingInformation);
    /**
     * Contains the shipper's declaration to comply with the regulations text note. Free text . This field is mandatory for air (Air)
     * 
     */
    public final static String s_p_shipperDeclarationText = "https://onerecord.iata.org/DgDeclaration#shipperDeclarationText";
    public final static IRI p_shipperDeclarationText = IRI.create(s_p_shipperDeclarationText);
    /**
     * The category of the package or all packed in one. Complete text to be transmitted: I-White, II-Yellow, III-Yellow instead of I, II, III
     * 
     */
    public final static String s_p_dgRaTypeCode = "https://onerecord.iata.org/DgProductRadioactive#dgRaTypeCode";
    public final static IRI p_dgRaTypeCode = IRI.create(s_p_dgRaTypeCode);
    /**
     * Indicates if Fissile is excepted
     * 
     */
    public final static String s_p_fissileExceptionIndicator = "https://onerecord.iata.org/DgProductRadioactive#fissileExceptionIndicator";
    public final static IRI p_fissileExceptionIndicator = IRI.create(s_p_fissileExceptionIndicator);
    /**
     * Fissile exception reference, mandatory if Fissile Exception Indicator is true.
     * 
     */
    public final static String s_p_fissileExceptionReference = "https://onerecord.iata.org/DgProductRadioactive#fissileExceptionReference";
    public final static IRI p_fissileExceptionReference = IRI.create(s_p_fissileExceptionReference);
    /**
     * Radioactive Transport-Index value of the package or all packed in one. Conditionally mandator and applies to categories II-Yellow and III-Yellow only; field only contains the value, if printed, TI must be added as a prefix to the value  to be printed in the Packing Instructions column
     * 
     */
    public final static String s_p_transportIndexNumeric = "https://onerecord.iata.org/DgProductRadioactive#transportIndexNumeric";
    public final static IRI p_transportIndexNumeric = IRI.create(s_p_transportIndexNumeric);
    /**
     * Numeric expression of the activity of a radioactive Item
     * 
     */
    public final static String s_p_activityLevelMeasure = "https://onerecord.iata.org/DgRadioactiveIsotope#activityLevelMeasure";
    public final static IRI p_activityLevelMeasure = IRI.create(s_p_activityLevelMeasure);
    /**
     * Applies to fissile material only, other than fissile excepted. A numeric value expressed to one decimal place preceded by the letters CSI.
     * 
     */
    public final static String s_p_criticalitySafetyIndexNumeric = "https://onerecord.iata.org/DgRadioactiveIsotope#criticalitySafetyIndexNumeric";
    public final static IRI p_criticalitySafetyIndexNumeric = IRI.create(s_p_criticalitySafetyIndexNumeric);
    /**
     * Id of each radionuclide or for mixtures of radionuclides.
     * 
     */
    public final static String s_p_isotopeId = "https://onerecord.iata.org/DgRadioactiveIsotope#isotopeId";
    public final static IRI p_isotopeId = IRI.create(s_p_isotopeId);
    /**
     * The name or symbol of each radionuclide or for mixtures of radionuclides, an appropriate general description, or a list of the most restrictive radionuclides. 
     * 
     */
    public final static String s_p_isotopeName = "https://onerecord.iata.org/DgRadioactiveIsotope#isotopeName";
    public final static IRI p_isotopeName = IRI.create(s_p_isotopeName);
    /**
     * A notation that the material is low dispersible radioactive material.
     * 
     */
    public final static String s_p_lowDispersibleIndicator = "https://onerecord.iata.org/DgRadioactiveIsotope#lowDispersibleIndicator";
    public final static IRI p_lowDispersibleIndicator = IRI.create(s_p_lowDispersibleIndicator);
    /**
     * A description of the physical and chemical form of the material.
     * 
     */
    public final static String s_p_physicalChemicalForm = "https://onerecord.iata.org/DgRadioactiveIsotope#physicalChemicalForm";
    public final static IRI p_physicalChemicalForm = IRI.create(s_p_physicalChemicalForm);
    /**
     * A notation that the material is special form
     * 
     */
    public final static String s_p_specialFormIndicator = "https://onerecord.iata.org/DgRadioactiveIsotope#specialFormIndicator";
    public final static IRI p_specialFormIndicator = IRI.create(s_p_specialFormIndicator);
    /**
     * Date and time of the event
     * 
     */
    public final static String s_p_dateTime = "https://onerecord.iata.org/Event#dateTime";
    public final static IRI p_dateTime = IRI.create(s_p_dateTime);
    /**
     * Movement or milestone code. Refer CXML Code List 1.18, e.g. DEP, ARR, FOH, RCS
     * 
     */
    public final static String s_p_eventCode = "https://onerecord.iata.org/Event#eventCode";
    public final static IRI p_eventCode = IRI.create(s_p_eventCode);
    /**
     * If no EventCode provided, event name - e.g. Security clearance
     * 
     */
    public final static String s_p_eventName = "https://onerecord.iata.org/Event#eventName";
    public final static IRI p_eventName = IRI.create(s_p_eventName);
    /**
     * Indicates type of event e.g.  Scheduled, Estimated, Actual
     * 
     */
    public final static String s_p_eventTypeIndicator = "https://onerecord.iata.org/Event#eventTypeIndicator";
    public final static IRI p_eventTypeIndicator = IRI.create(s_p_eventTypeIndicator);
    /**
     * Refers to the URI of the linked object(s)
     * 
     */
    public final static String s_p_linkedObject = "https://onerecord.iata.org/Event#linkedObject";
    public final static IRI p_linkedObject = IRI.create(s_p_linkedObject);
    /**
     * Position of the shipment in the aircraft - e.g. lower or main deck
     * 
     */
    public final static String s_p_loadingPosition = "https://onerecord.iata.org/EventUld#loadingPosition";
    public final static IRI p_loadingPosition = IRI.create(s_p_loadingPosition);
    /**
     * Unique document identifier
     * 
     */
    public final static String s_p_documentId = "https://onerecord.iata.org/ExternalReference#documentId";
    public final static IRI p_documentId = IRI.create(s_p_documentId);
    /**
     * If no DocumentType provided, name of the referenced document 
     * 
     */
    public final static String s_p_documentName = "https://onerecord.iata.org/ExternalReference#documentName";
    public final static IRI p_documentName = IRI.create(s_p_documentName);
    /**
     * Type of the referenced document . Refer UNEDIFACT 1001  e.g. 740 - Air Waybill
     * 
     */
    public final static String s_p_documentType = "https://onerecord.iata.org/ExternalReference#documentType";
    public final static IRI p_documentType = IRI.create(s_p_documentType);
    /**
     * Document version number
     * 
     */
    public final static String s_p_documentVersion = "https://onerecord.iata.org/ExternalReference#documentVersion";
    public final static IRI p_documentVersion = IRI.create(s_p_documentVersion);
    /**
     * Production batch number / reference
     * 
     */
    public final static String s_p_batchNumber = "https://onerecord.iata.org/Item#batchNumber";
    public final static IRI p_batchNumber = IRI.create(s_p_batchNumber);
    /**
     * Production lot number / reference
     * 
     */
    public final static String s_p_lotNumber = "https://onerecord.iata.org/Item#lotNumber";
    public final static IRI p_lotNumber = IRI.create(s_p_lotNumber);
    /**
     * Product expiry date - e.g. for perishables goods or goods with programmed obsolescence
     * 
     */
    public final static String s_p_productExpiryDate = "https://onerecord.iata.org/Item#productExpiryDate";
    public final static IRI p_productExpiryDate = IRI.create(s_p_productExpiryDate);
    /**
     * Production date
     * 
     */
    public final static String s_p_productionDate = "https://onerecord.iata.org/Item#productionDate";
    public final static IRI p_productionDate = IRI.create(s_p_productionDate);
    /**
     * Product quantity for unit price - e.g. 12 (eggs for one USD 1)
     * 
     */
    public final static String s_p_quantityForUnitPrice = "https://onerecord.iata.org/Item#quantityForUnitPrice";
    public final static IRI p_quantityForUnitPrice = IRI.create(s_p_quantityForUnitPrice);
    /**
     * Reportable quantities, To and from the USA only
     * 
     */
    public final static String s_p_reportableQuantity = "https://onerecord.iata.org/ItemDg#reportableQuantity";
    public final static IRI p_reportableQuantity = IRI.create(s_p_reportableQuantity);
    /**
     * Additional information that may be added in addition to the proper shipping name to more fully describe the goods or to identify a particular condition
     * 
     */
    public final static String s_p_supplementaryInfoPrefix = "https://onerecord.iata.org/ItemDg#supplementaryInfoPrefix";
    public final static IRI p_supplementaryInfoPrefix = IRI.create(s_p_supplementaryInfoPrefix);
    /**
     * Additional information that may be added in addition to the proper shipping to more fully describe the goods or to identify a particular condition
     * 
     */
    public final static String s_p_supplementaryInfoSuffix = "https://onerecord.iata.org/ItemDg#supplementaryInfoSuffix";
    public final static IRI p_supplementaryInfoSuffix = IRI.create(s_p_supplementaryInfoSuffix);
    /**
     * Location code of airport, freight terminal, seaport, rail station. UN/LOCODE city code (5 letter) or IATA airport code (3 letter)
     * 
     */
    public final static String s_p_code = "https://onerecord.iata.org/Location#code";
    public final static IRI p_code = IRI.create(s_p_code);
    /**
     * Full name of the location
     * 
     */
    public final static String s_p_locationName = "https://onerecord.iata.org/Location#locationName";
    public final static IRI p_locationName = IRI.create(s_p_locationName);
    /**
     * Location type - e.g. Airport, Freight terminal, Rail station, Seaport, etc
     * 
     */
    public final static String s_p_locationType = "https://onerecord.iata.org/Location#locationType";
    public final static IRI p_locationType = IRI.create(s_p_locationType);
    /**
     * Company identifier from the Internet of Logistics of the entity that hosts the Logistics Object.
     * 
     */
    public final static String s_p_companyIdentifier = "https://onerecord.iata.org/LogisticsObject#companyIdentifier";
    public final static IRI p_companyIdentifier = IRI.create(s_p_companyIdentifier);
    /**
     * Item identifier
     * 
     */
    public final static String s_p_identifier = "https://onerecord.iata.org/OtherIdentifier#identifier";
    public final static IRI p_identifier = IRI.create(s_p_identifier);
    /**
     * Identifier type or description
     * 
     */
    public final static String s_p_otherIdentifierType = "https://onerecord.iata.org/OtherIdentifier#otherIdentifierType";
    public final static IRI p_otherIdentifierType = IRI.create(s_p_otherIdentifierType);
    /**
     * Role of other party - e.g. Notify party, Nominated agent, Customs broker, Manufacturer, Importer, Payer, Payee, ShipTo, ShipFrom, BillTo, BillFrom, RemitTo, RemitFrom 
     * 
     */
    public final static String s_p_roleName = "https://onerecord.iata.org/OtherParty#roleName";
    public final static IRI p_roleName = IRI.create(s_p_roleName);
    /**
     * Free Text. Describes the package type.
     * 
     */
    public final static String s_p_packagingTypeDescription = "https://onerecord.iata.org/PackagingType#packagingTypeDescription";
    public final static IRI p_packagingTypeDescription = IRI.create(s_p_packagingTypeDescription);
    /**
     * Packaging type identifier as per UNECE Rec 21 Annex V and VI e.g. 1A - Drum, steel - Packaging material code. Identifies the Logistic Unit package type. UN Recommendation on Transport of Dangerous Goods, Model Regulations 
     * 
     */
    public final static String s_p_typeCode = "https://onerecord.iata.org/PackagingType#typeCode";
    public final static IRI p_typeCode = IRI.create(s_p_typeCode);
    /**
     * Contact type - e.g. Emergency contact, Customs contact, Customer contact
     * 
     */
    public final static String s_p_contactType = "https://onerecord.iata.org/Person#contactType";
    public final static IRI p_contactType = IRI.create(s_p_contactType);
    /**
     * Department / Division / Unit
     * 
     */
    public final static String s_p_department = "https://onerecord.iata.org/Person#department";
    public final static IRI p_department = IRI.create(s_p_department);
    /**
     * Employee ID
     * 
     */
    public final static String s_p_employeeId = "https://onerecord.iata.org/Person#employeeId";
    public final static IRI p_employeeId = IRI.create(s_p_employeeId);
    /**
     * First name / given name
     * 
     */
    public final static String s_p_firstName = "https://onerecord.iata.org/Person#firstName";
    public final static IRI p_firstName = IRI.create(s_p_firstName);
    /**
     * Job title / position
     * 
     */
    public final static String s_p_jobTitle = "https://onerecord.iata.org/Person#jobTitle";
    public final static IRI p_jobTitle = IRI.create(s_p_jobTitle);
    /**
     * Last name / family name / surname
     * 
     */
    public final static String s_p_lastName = "https://onerecord.iata.org/Person#lastName";
    public final static IRI p_lastName = IRI.create(s_p_lastName);
    /**
     * Middle name/ other name
     * 
     */
    public final static String s_p_middleName = "https://onerecord.iata.org/Person#middleName";
    public final static IRI p_middleName = IRI.create(s_p_middleName);
    /**
     * Salutation 
     * 
     */
    public final static String s_p_salutation = "https://onerecord.iata.org/Person#salutation";
    public final static IRI p_salutation = IRI.create(s_p_salutation);
    /**
     * Coload indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_coload = "https://onerecord.iata.org/Piece#coload";
    public final static IRI p_coload = IRI.create(s_p_coload);
    /**
     * General goods description
     * 
     */
    public final static String s_p_goodsDescription = "https://onerecord.iata.org/Piece#goodsDescription";
    public final static IRI p_goodsDescription = IRI.create(s_p_goodsDescription);
    /**
     * Specify how the piece will be delivered (bulk or ULD)
     * 
     */
    public final static String s_p_loadType = "https://onerecord.iata.org/Piece#loadType";
    public final static IRI p_loadType = IRI.create(s_p_loadType);
    /**
     * Shipper's Load And Count  ( total contained piece count as provided by shipper)
     * 
     */
    public final static String s_p_slac = "https://onerecord.iata.org/Piece#slac";
    public final static IRI p_slac = IRI.create(s_p_slac);
    /**
     * Stackable indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_stackable = "https://onerecord.iata.org/Piece#stackable";
    public final static IRI p_stackable = IRI.create(s_p_stackable);
    /**
     * Turnable indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_turnable = "https://onerecord.iata.org/Piece#turnable";
    public final static IRI p_turnable = IRI.create(s_p_turnable);
    /**
     * Unique Piece Identifier (UPID) of the piece. Refer IATA Recommended Practice 1689
     * 
     */
    public final static String s_p_upid_A = "https://onerecord.iata.org/Piece#upid";
    public final static IRI p_upid_A = IRI.create(s_p_upid_A);
    /**
     * A statement identifying that the dangerous goods listed above are all contained in the same outer packaging. Takes the form All packed in one aaaa (description of packaging type) x nn (number of packages). Applies to air transport only. (Air) 
     * 
     */
    public final static String s_p_allPackedInOneIndicator = "https://onerecord.iata.org/PieceDg#allPackedInOneIndicator";
    public final static IRI p_allPackedInOneIndicator = IRI.create(s_p_allPackedInOneIndicator);
    /**
     * Applies to fissile material only, other than fissile excepted. A numeric value expressed to one decimal place preceded by the letters CSI. 
     * 
     */
    public final static String s_p_overpackCriticalitySafetyIndexNumeric = "https://onerecord.iata.org/PieceDg#overpackCriticalitySafetyIndexNumeric";
    public final static IRI p_overpackCriticalitySafetyIndexNumeric = IRI.create(s_p_overpackCriticalitySafetyIndexNumeric);
    /**
     * Overpack indicator 
     * 
     */
    public final static String s_p_overpackIndicator = "https://onerecord.iata.org/PieceDg#overpackIndicator";
    public final static IRI p_overpackIndicator = IRI.create(s_p_overpackIndicator);
    /**
     * A single number assigned to a package, overpack or freight container to provide control over radiation exposure. 
     * 
     */
    public final static String s_p_overpackT1 = "https://onerecord.iata.org/PieceDg#overpackT1";
    public final static IRI p_overpackT1 = IRI.create(s_p_overpackT1);
    /**
     * Identifies the Logistic Unit package type. UN Recommendation on Transport of Dangerous Goods, Model Regulations 
     * 
     */
    public final static String s_p_overpackTypeCode = "https://onerecord.iata.org/PieceDg#overpackTypeCode";
    public final static IRI p_overpackTypeCode = IRI.create(s_p_overpackTypeCode);
    /**
     * Most instances of all packed in one will require the addition of the Q value which  1. Applies to air transport only. (Air)  
     * 
     */
    public final static String s_p_qValueNumeric = "https://onerecord.iata.org/PieceDg#qValueNumeric";
    public final static IRI p_qValueNumeric = IRI.create(s_p_qValueNumeric);
    /**
     * Total price
     * 
     */
    public final static String s_p_grandTotal = "https://onerecord.iata.org/Price#grandTotal";
    public final static IRI p_grandTotal = IRI.create(s_p_grandTotal);
    /**
     * Terms of validity
     * 
     */
    public final static String s_p_validTo = "https://onerecord.iata.org/Price#validTo";
    public final static IRI p_validTo = IRI.create(s_p_validTo);
    /**
     * Indicates the specific commodity on which the rate class code is applied
     * 
     */
    public final static String s_p_commodityItemNumber = "https://onerecord.iata.org/Product#commodityItemNumber";
    public final static IRI p_commodityItemNumber = IRI.create(s_p_commodityItemNumber);
    /**
     * Reference identifying the type of standard code to be used for the Commodity Classification (Brussels Tariff Nomenclature, EU Harmonized System Code, UN Standard International Trade Classification). Mandatory if the commodity code is more than 6 digits
     * 
     */
    public final static String s_p_hsCode = "https://onerecord.iata.org/Product#hsCode";
    public final static IRI p_hsCode = IRI.create(s_p_hsCode);
    /**
     * Commodity description
     * 
     */
    public final static String s_p_hsCommodityDescription = "https://onerecord.iata.org/Product#hsCommodityDescription";
    public final static IRI p_hsCommodityDescription = IRI.create(s_p_hsCommodityDescription);
    /**
     * If no Code provided, name of commodity
     * 
     */
    public final static String s_p_hsCommodityName = "https://onerecord.iata.org/Product#hsCommodityName";
    public final static IRI p_hsCommodityName = IRI.create(s_p_hsCommodityName);
    /**
     * Issuer of the Commodity Code - e.g. Brussels Tariff Nomenclature, EU Harmonized System Code, UN Standard International Trade, etc.
     * 
     */
    public final static String s_p_hsType = "https://onerecord.iata.org/Product#hsType";
    public final static IRI p_hsType = IRI.create(s_p_hsType);
    /**
     * Product description
     * 
     */
    public final static String s_p_productDescription_A = "https://onerecord.iata.org/Product#productDescription";
    public final static IRI p_productDescription_A = IRI.create(s_p_productDescription_A);
    /**
     * Manufacturer's unique product identifier
     * 
     */
    public final static String s_p_productIdentifier = "https://onerecord.iata.org/Product#productIdentifier";
    public final static IRI p_productIdentifier = IRI.create(s_p_productIdentifier);
    /**
     * Identifies the subsidiary hazard class / division identification containing a numeric field separated by a decimal. There may be 0, 1 or 2 subsidiary risk classes or divisions. If there is more than one, each should be separated by a comma. The subsidiary risk must be shown in parentheses. 
     * 
     */
    public final static String s_p_additionalHazardClassificationId = "https://onerecord.iata.org/ProductDg#additionalHazardClassificationId";
    public final static IRI p_additionalHazardClassificationId = IRI.create(s_p_additionalHazardClassificationId);
    /**
     * Contains additional information relating to an approval, permission or other specific detail applicable to the commodity (e.g. Dangerous Goods in excepted quantities) 
     * 
     */
    public final static String s_p_authorizationInformation = "https://onerecord.iata.org/ProductDg#authorizationInformation";
    public final static IRI p_authorizationInformation = IRI.create(s_p_authorizationInformation);
    /**
     * Specifies the reference to the group which identifies the kind of substances and articles that are deemed to be compatible. Mandatory field in case of transport of explosive articles or substances
     * 
     */
    public final static String s_p_explosiveCompatibilityGroupCode = "https://onerecord.iata.org/ProductDg#explosiveCompatibilityGroupCode";
    public final static IRI p_explosiveCompatibilityGroupCode = IRI.create(s_p_explosiveCompatibilityGroupCode);
    /**
     * Identifies the hazard class / division identification containing a numeric field separated by a decimal
     * 
     */
    public final static String s_p_hazardClassificationId = "https://onerecord.iata.org/ProductDg#hazardClassificationId";
    public final static IRI p_hazardClassificationId = IRI.create(s_p_hazardClassificationId);
    /**
     * Packing group, If used must reference I, II or III
     * 
     */
    public final static String s_p_packagingDangerLevelCode = "https://onerecord.iata.org/ProductDg#packagingDangerLevelCode";
    public final static IRI p_packagingDangerLevelCode = IRI.create(s_p_packagingDangerLevelCode);
    /**
     * The packing instruction number applicable to the UN number / proper shipping name entry. A three-numeric value which may be preceded by the letter Y.  Mandatory field for air transport (Air) 
     * 
     */
    public final static String s_p_packingInstructionNumber = "https://onerecord.iata.org/ProductDg#packingInstructionNumber";
    public final static IRI p_packingInstructionNumber = IRI.create(s_p_packingInstructionNumber);
    /**
     * The name used to describe the particular article or substance as shown in the UN Model Regulations Dangerous Goods List
     * 
     */
    public final static String s_p_properShippingName = "https://onerecord.iata.org/ProductDg#properShippingName";
    public final static IRI p_properShippingName = IRI.create(s_p_properShippingName);
    /**
     * For Air Mode: Special Provision may show a single, double or triple digit number preceded by the letter A, against appropriate entries in the List of Dangerous Goods
     * 
     */
    public final static String s_p_specialProvisionId = "https://onerecord.iata.org/ProductDg#specialProvisionId";
    public final static IRI p_specialProvisionId = IRI.create(s_p_specialProvisionId);
    /**
     * This is additional chemical name(s) required for some proper shipping names. When added the technical must be shown in parentheses immediately following the proper shipping name. 
     * 
     */
    public final static String s_p_technicalName = "https://onerecord.iata.org/ProductDg#technicalName";
    public final static IRI p_technicalName = IRI.create(s_p_technicalName);
    /**
     * Reference identifying the United Nations Dangerous Goods serial number assigned within the UN to substances and articles contained in a list of the dangerous goods most commonly carried. e.g. 1189 - Ethylene glycol monomethyl ether acetate
     * 
     */
    public final static String s_p_unNumber = "https://onerecord.iata.org/ProductDg#unNumber";
    public final static IRI p_unNumber = IRI.create(s_p_unNumber);
    /**
     * Amount
     * 
     */
    public final static String s_p_amount = "https://onerecord.iata.org/Ranges#amount";
    public final static IRI p_amount = IRI.create(s_p_amount);
    /**
     * Maximum quantity
     * 
     */
    public final static String s_p_maximumQuantity = "https://onerecord.iata.org/Ranges#maximumQuantity";
    public final static IRI p_maximumQuantity = IRI.create(s_p_maximumQuantity);
    /**
     * Minimum quantity
     * 
     */
    public final static String s_p_minimumQuantity = "https://onerecord.iata.org/Ranges#minimumQuantity";
    public final static IRI p_minimumQuantity = IRI.create(s_p_minimumQuantity);
    /**
     * rate class code e.g. Q
     * 
     */
    public final static String s_p_rateClassCode = "https://onerecord.iata.org/Ranges#rateClassCode";
    public final static IRI p_rateClassCode = IRI.create(s_p_rateClassCode);
    /**
     * rating type - list uldRatingType
     * 
     */
    public final static String s_p_ratingType = "https://onerecord.iata.org/Ranges#ratingType";
    public final static IRI p_ratingType = IRI.create(s_p_ratingType);
    /**
     * Specific commodity code linked to commodity
     * 
     */
    public final static String s_p_scr = "https://onerecord.iata.org/Ranges#scr";
    public final static IRI p_scr = IRI.create(s_p_scr);
    /**
     * Specific commodity code linked to commodity
     * 
     */
    public final static String s_p_unitBasis = "https://onerecord.iata.org/Ranges#unitBasis";
    public final static IRI p_unitBasis = IRI.create(s_p_unitBasis);
    /**
     * Code of the charge e.g. MY, SC, etc.
     * 
     */
    public final static String s_p_chargeCode = "https://onerecord.iata.org/Ratings#chargeCode";
    public final static IRI p_chargeCode = IRI.create(s_p_chargeCode);
    /**
     * Description of the charge e.g. Airfreight, fuel, etc.
     * 
     */
    public final static String s_p_chargeDescription = "https://onerecord.iata.org/Ratings#chargeDescription";
    public final static IRI p_chargeDescription = IRI.create(s_p_chargeDescription);
    /**
     * Type of charge e.g. Freight, Surcharges, etc.
     * 
     */
    public final static String s_p_chargeType = "https://onerecord.iata.org/Ratings#chargeType";
    public final static IRI p_chargeType = IRI.create(s_p_chargeType);
    /**
     * Specification of the price e.g. Street, Group, Spot, etc.
     * 
     */
    public final static String s_p_priceSpecification = "https://onerecord.iata.org/Ratings#priceSpecification";
    public final static IRI p_priceSpecification = IRI.create(s_p_priceSpecification);
    /**
     * Reference of price specifications
     * 
     */
    public final static String s_p_priceSpecificationRef = "https://onerecord.iata.org/Ratings#priceSpecificationRef";
    public final static IRI p_priceSpecificationRef = IRI.create(s_p_priceSpecificationRef);
    /**
     * Subtotal of the charge
     * 
     */
    public final static String s_p_subTotal = "https://onerecord.iata.org/Ratings#subTotal";
    public final static IRI p_subTotal = IRI.create(s_p_subTotal);
    /**
     * Expiry date 4 digits month/year
     * 
     */
    public final static String s_p_expiryDate = "https://onerecord.iata.org/RegulatedEntity#expiryDate";
    public final static IRI p_expiryDate = IRI.create(s_p_expiryDate);
    /**
     * Party type - e.g. RA - Regulated Agent, KC - Known Consignor, AO - Aircraft Operator, RC - Regulated Carrier
     * 
     */
    public final static String s_p_regulatedEntityCategory = "https://onerecord.iata.org/RegulatedEntity#regulatedEntityCategory";
    public final static IRI p_regulatedEntityCategory = IRI.create(s_p_regulatedEntityCategory);
    /**
     * Reference to the Allotment as per the contracts between forwarders and carriers
     * 
     */
    public final static String s_p_allotment = "https://onerecord.iata.org/Request#allotment";
    public final static IRI p_allotment = IRI.create(s_p_allotment);
    /**
     * Identification of the request type: Quote or Booking
     * 
     */
    public final static String s_p_requestType = "https://onerecord.iata.org/Request#requestType";
    public final static IRI p_requestType = IRI.create(s_p_requestType);
    /**
     * Indicate the security state of the shipment, screened or not
     * 
     */
    public final static String s_p_shipmentSecurityStatus_A = "https://onerecord.iata.org/Request#shipmentSecurityStatus";
    public final static IRI p_shipmentSecurityStatus_A = IRI.create(s_p_shipmentSecurityStatus_A);
    /**
     * Aircraft possibility code
     * 
     */
    public final static String s_p_aircraftPossibilityCode = "https://onerecord.iata.org/Routing#aircraftPossibilityCode";
    public final static IRI p_aircraftPossibilityCode = IRI.create(s_p_aircraftPossibilityCode);
    /**
     * Latest Arrival date time (requested or proposed)
     * 
     */
    public final static String s_p_latestArrivalDateTime = "https://onerecord.iata.org/Routing#latestArrivalDateTime";
    public final static IRI p_latestArrivalDateTime = IRI.create(s_p_latestArrivalDateTime);
    /**
     * Maximum number of connections of the transport movement (requested or proposed)
     * 
     */
    public final static String s_p_maxConnections = "https://onerecord.iata.org/Routing#maxConnections";
    public final static IRI p_maxConnections = IRI.create(s_p_maxConnections);
    /**
     * Indicates interlining (requested or proposed)
     * 
     */
    public final static String s_p_onlineInd = "https://onerecord.iata.org/Routing#onlineInd";
    public final static IRI p_onlineInd = IRI.create(s_p_onlineInd);
    /**
     * Indicates if RFS (Road Feeder Services) is included (requested or proposed)
     * 
     */
    public final static String s_p_rfsInd = "https://onerecord.iata.org/Routing#rfsInd";
    public final static IRI p_rfsInd = IRI.create(s_p_rfsInd);
    /**
     * Any additional information that may be required by an ICAO Member State
     * 
     */
    public final static String s_p_additionalSecurityInformation = "https://onerecord.iata.org/SecurityDeclaration#additionalSecurityInformation";
    public final static IRI p_additionalSecurityInformation = IRI.create(s_p_additionalSecurityInformation);
    /**
     * Exemption code - e.g. BIOM- Bio-Medical Samples 
     * 
     */
    public final static String s_p_groundsForExemption = "https://onerecord.iata.org/SecurityDeclaration#groundsForExemption";
    public final static IRI p_groundsForExemption = IRI.create(s_p_groundsForExemption);
    /**
     * Date and time when the security status was issued
     * 
     */
    public final static String s_p_issuedOn = "https://onerecord.iata.org/SecurityDeclaration#issuedOn";
    public final static IRI p_issuedOn = IRI.create(s_p_issuedOn);
    /**
     * Other methods used to secure the cargo
     * 
     */
    public final static String s_p_otherScreeningMethods = "https://onerecord.iata.org/SecurityDeclaration#otherScreeningMethods";
    public final static IRI p_otherScreeningMethods = IRI.create(s_p_otherScreeningMethods);
    /**
     * Screening methods which have been used to secure the cargo - e.g. EDS- Explosive Detection System  
     * 
     */
    public final static String s_p_screeningMethod = "https://onerecord.iata.org/SecurityDeclaration#screeningMethod";
    public final static IRI p_screeningMethod = IRI.create(s_p_screeningMethod);
    /**
     * Security status indicator (CXML 1.103) - e.g. SPX- Cargo Secure for Passenger and All-Cargo Aircraft 
     * 
     */
    public final static String s_p_securityStatus_A = "https://onerecord.iata.org/SecurityDeclaration#securityStatus";
    public final static IRI p_securityStatus_A = IRI.create(s_p_securityStatus_A);
    /**
     * Service request code
     * 
     */
    public final static String s_p_code_A = "https://onerecord.iata.org/ServiceRequest#code";
    public final static IRI p_code_A = IRI.create(s_p_code_A);
    /**
     * Service request description
     * 
     */
    public final static String s_p_serviceRequestDescription = "https://onerecord.iata.org/ServiceRequest#serviceRequestDescription";
    public final static IRI p_serviceRequestDescription = IRI.create(s_p_serviceRequestDescription);
    /**
     * Service request statement text
     * 
     */
    public final static String s_p_statementText = "https://onerecord.iata.org/ServiceRequest#statementText";
    public final static IRI p_statementText = IRI.create(s_p_statementText);
    /**
     * Service request statement type - e.g. Dangerous Goods, Lithium Ion Battery, Live Animal Certificate
     * 
     */
    public final static String s_p_statementType = "https://onerecord.iata.org/ServiceRequest#statementType";
    public final static IRI p_statementType = IRI.create(s_p_statementType);
    /**
     * General goods description
     * 
     */
    public final static String s_p_goodsDescription_A = "https://onerecord.iata.org/Shipment#goodsDescription";
    public final static IRI p_goodsDescription_A = IRI.create(s_p_goodsDescription_A);
    /**
     * Total Piece Count
     * 
     */
    public final static String s_p_totalPieceCount = "https://onerecord.iata.org/Shipment#totalPieceCount";
    public final static IRI p_totalPieceCount = IRI.create(s_p_totalPieceCount);
    /**
     * Total SLAC of all piece groups 
     * 
     */
    public final static String s_p_totalSLAC = "https://onerecord.iata.org/Shipment#totalSLAC";
    public final static IRI p_totalSLAC = IRI.create(s_p_totalSLAC);
    /**
     * Special handling code following IATA standards. Refer CXML1.16,  e.g. PEP - Fruits and Vegetables
     * 
     */
    public final static String s_p_code_A_A = "https://onerecord.iata.org/SpecialHandling#code";
    public final static IRI p_code_A_A = IRI.create(s_p_code_A_A);
    /**
     * Vehicle identification - e.g. aircraft registration number
     * 
     */
    public final static String s_p_vehicleRegistration = "https://onerecord.iata.org/TransportMeans#vehicleRegistration";
    public final static IRI p_vehicleRegistration = IRI.create(s_p_vehicleRegistration);
    /**
     * Size of the vehicle - free text
     * 
     */
    public final static String s_p_vehicleSize = "https://onerecord.iata.org/TransportMeans#vehicleSize";
    public final static IRI p_vehicleSize = IRI.create(s_p_vehicleSize);
    /**
     * Vehicle or container type. Refer UNECE28, e.g. 4.00.0 - Aircraft, type unknown
     * 
     */
    public final static String s_p_vehicleType = "https://onerecord.iata.org/TransportMeans#vehicleType";
    public final static IRI p_vehicleType = IRI.create(s_p_vehicleType);
    /**
     * Arrival date and time. Actual or planned depends on the movementType property
     * 
     */
    public final static String s_p_arrivalDate = "https://onerecord.iata.org/TransportSegment#arrivalDate";
    public final static IRI p_arrivalDate = IRI.create(s_p_arrivalDate);
    /**
     * Departure date and time. Actual or planned depends on the movementType property
     * 
     */
    public final static String s_p_departureDate = "https://onerecord.iata.org/TransportSegment#departureDate";
    public final static IRI p_departureDate = IRI.create(s_p_departureDate);
    /**
     * e.g. Kerosene, Diesel, SAF, Electricity [renewable], Electricity [non-renewable]
     * 
     */
    public final static String s_p_fuelType = "https://onerecord.iata.org/TransportSegment#fuelType";
    public final static IRI p_fuelType = IRI.create(s_p_fuelType);
    /**
     * Mode Code
     * 
     */
    public final static String s_p_modeCode = "https://onerecord.iata.org/TransportSegment#modeCode";
    public final static IRI p_modeCode = IRI.create(s_p_modeCode);
    /**
     * Refers to the type of movement: Actual or planned
     * 
     */
    public final static String s_p_movementType = "https://onerecord.iata.org/TransportSegment#movementType";
    public final static IRI p_movementType = IRI.create(s_p_movementType);
    /**
     * Seal identifier
     * 
     */
    public final static String s_p_seal = "https://onerecord.iata.org/TransportSegment#seal";
    public final static IRI p_seal = IRI.create(s_p_seal);
    /**
     * Identification of the segment level in the movement of the pieces: contractual, flight leg, truck movement, etc.
     * 
     */
    public final static String s_p_segmentLevel = "https://onerecord.iata.org/TransportSegment#segmentLevel";
    public final static IRI p_segmentLevel = IRI.create(s_p_segmentLevel);
    /**
     * Airline flight number, or rail /  truck / maritime line id
     * 
     */
    public final static String s_p_transportIdentifier = "https://onerecord.iata.org/TransportSegment#transportIdentifier";
    public final static IRI p_transportIdentifier = IRI.create(s_p_transportIdentifier);
    /**
     * US / ATA Unit Load Device type code e.g. M2
     * 
     */
    public final static String s_p_ataDesignator = "https://onerecord.iata.org/ULD#ataDesignator";
    public final static IRI p_ataDesignator = IRI.create(s_p_ataDesignator);
    /**
     * Indicates if the ULD is Damaged
     * 
     */
    public final static String s_p_damageFlag = "https://onerecord.iata.org/ULD#damageFlag";
    public final static IRI p_damageFlag = IRI.create(s_p_damageFlag);
    /**
     * Contains three designator of demurrage code, refer to RP 1654 (BCC, HHH, XXX, ZZZ)
     * 
     */
    public final static String s_p_demurrageCode = "https://onerecord.iata.org/ULD#demurrageCode";
    public final static IRI p_demurrageCode = IRI.create(s_p_demurrageCode);
    /**
     * ULD height or loading limitation code. Refer CXML Code List 1.47,  e.g. R - ULD Height above 244 centimetres
     * 
     */
    public final static String s_p_loadingIndicator = "https://onerecord.iata.org/ULD#loadingIndicator";
    public final static IRI p_loadingIndicator = IRI.create(s_p_loadingIndicator);
    /**
     * Number of doors
     * 
     */
    public final static String s_p_nbDoor = "https://onerecord.iata.org/ULD#nbDoor";
    public final static IRI p_nbDoor = IRI.create(s_p_nbDoor);
    /**
     * Number of fittings
     * 
     */
    public final static String s_p_nbFittings = "https://onerecord.iata.org/ULD#nbFittings";
    public final static IRI p_nbFittings = IRI.create(s_p_nbFittings);
    /**
     * Number of nets
     * 
     */
    public final static String s_p_nbNets = "https://onerecord.iata.org/ULD#nbNets";
    public final static IRI p_nbNets = IRI.create(s_p_nbNets);
    /**
     * Number of straps
     * 
     */
    public final static String s_p_nbStraps = "https://onerecord.iata.org/ULD#nbStraps";
    public final static IRI p_nbStraps = IRI.create(s_p_nbStraps);
    /**
     * Contains two designator codes of ODLN or Operational Damage Limit Notices. ODLN code is used to define type of damage after visually check the serviceability of ULDs section 7, Standard Specifications 40/3 or 40/4 in ULD Regulations
     * 
     */
    public final static String s_p_odlnCode = "https://onerecord.iata.org/ULD#odlnCode";
    public final static IRI p_odlnCode = IRI.create(s_p_odlnCode);
    /**
     * Owner code of the ULD in aa, an or na format - owner can be an airline or leasing company
     * 
     */
    public final static String s_p_ownerCode = "https://onerecord.iata.org/ULD#ownerCode";
    public final static IRI p_ownerCode = IRI.create(s_p_ownerCode);
    /**
     * ULD serial number
     * 
     */
    public final static String s_p_serialNumber = "https://onerecord.iata.org/ULD#serialNumber";
    public final static IRI p_serialNumber = IRI.create(s_p_serialNumber);
    /**
     * Designator of serviceablity condition e.g. SER or DAM 
     * 
     */
    public final static String s_p_serviceabilityCode = "https://onerecord.iata.org/ULD#serviceabilityCode";
    public final static IRI p_serviceabilityCode = IRI.create(s_p_serviceabilityCode);
    /**
     * Remarks or Supplement Information
     * 
     */
    public final static String s_p_uldRemarks = "https://onerecord.iata.org/ULD#uldRemarks";
    public final static IRI p_uldRemarks = IRI.create(s_p_uldRemarks);
    /**
     * ULD seal number if applicable
     * 
     */
    public final static String s_p_uldSealNumber = "https://onerecord.iata.org/ULD#uldSealNumber";
    public final static IRI p_uldSealNumber = IRI.create(s_p_uldSealNumber);
    /**
     * Standard Unit Load Device type code e.g. AKE - Certified Container - Contoured
     * 
     */
    public final static String s_p_uldTypeCode = "https://onerecord.iata.org/ULD#uldTypeCode";
    public final static IRI p_uldTypeCode = IRI.create(s_p_uldTypeCode);
    /**
     * Unit of measurement/ unit of account e.g. CMT - Centimetre,  LTR - Litre (1 DM3), KGM - Kilogram, CHF - Swiss Franc
     * 
     */
    public final static String s_p_unit = "https://onerecord.iata.org/Value#unit";
    public final static IRI p_unit = IRI.create(s_p_unit);
    /**
     * Value
     * 
     */
    public final static String s_p_value_A = "https://onerecord.iata.org/Value#value";
    public final static IRI p_value_A = IRI.create(s_p_value_A);
    /**
     * House or Master Waybill unique identifier
     * 
     */
    public final static String s_p_waybillNumber_A_A = "https://onerecord.iata.org/Waybill#waybillNumber";
    public final static IRI p_waybillNumber_A_A = IRI.create(s_p_waybillNumber_A_A);
    /**
     * Prefix used for the Waybill Number
     * 
     */
    public final static String s_p_waybillPrefix = "https://onerecord.iata.org/Waybill#waybillPrefix";
    public final static IRI p_waybillPrefix = IRI.create(s_p_waybillPrefix);
    /**
     * Type of the Waybill: House or Master
     * 
     */
    public final static String s_p_waybillType = "https://onerecord.iata.org/Waybill#waybillType";
    public final static IRI p_waybillType = IRI.create(s_p_waybillType);
    public final static String s_p_description = "http://purl.org/dc/elements/1.1/description";
    public final static IRI p_description = IRI.create(s_p_description);
    public final static String s_p_title = "http://purl.org/dc/elements/1.1/title";
    public final static IRI p_title = IRI.create(s_p_title);
    public final static String s_p__abstract = "http://purl.org/dc/terms/abstract";
    public final static IRI p__abstract = IRI.create(s_p__abstract);
    public final static String s_p_modified = "http://purl.org/dc/terms/modified";
    public final static IRI p_modified = IRI.create(s_p_modified);
    public final static String s_p_title_A = "http://purl.org/dc/terms/title";
    public final static IRI p_title_A = IRI.create(s_p_title_A);
    public final static String s_p_comment = "http://www.w3.org/2000/01/rdf-schema#comment";
    public final static IRI p_comment = IRI.create(s_p_comment);
    public final static String s_p_label = "http://www.w3.org/2000/01/rdf-schema#label";
    public final static IRI p_label = IRI.create(s_p_label);

}
