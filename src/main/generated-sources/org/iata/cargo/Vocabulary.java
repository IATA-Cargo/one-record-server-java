
package org.iata.cargo;

import org.semanticweb.owlapi.model.IRI;


/**
 * This class was generated by OWL2Java 0.20.2
 * 
 */
public class Vocabulary {

    public final static String ONTOLOGY_IRI_cargo = "https://onerecord.iata.org/ns/cargo";
    public final static String ONTOLOGY_IRI_cargo_generated = "https://onerecord.iata.org/ns/cargo-generated";
    public final static String s_c_Thing = "http://www.w3.org/2002/07/owl#Thing";
    public final static IRI c_Thing = IRI.create(s_c_Thing);
    /**
     * Embedded object to create a sequence of Activities in the context of a Service
     * 
     */
    public final static String s_c_ActivitySequence = "https://onerecord.iata.org/ns/cargo#ActivitySequence";
    public final static IRI c_ActivitySequence = IRI.create(s_c_ActivitySequence);
    /**
     * Superclass: Actors are Persons or entities acting like a single person
     * 
     */
    public final static String s_c_Actor = "https://onerecord.iata.org/ns/cargo#Actor";
    public final static IRI c_Actor = IRI.create(s_c_Actor);
    /**
     * Address details
     * 
     */
    public final static String s_c_Address = "https://onerecord.iata.org/ns/cargo#Address";
    public final static IRI c_Address = IRI.create(s_c_Address);
    /**
     * Adjustments in the context of CASS records
     * 
     */
    public final static String s_c_Adjustments = "https://onerecord.iata.org/ns/cargo#Adjustments";
    public final static IRI c_Adjustments = IRI.create(s_c_Adjustments);
    /**
     * Answer holds the answer to one Question and is provided by the executioner of the check
     * 
     */
    public final static String s_c_Answer = "https://onerecord.iata.org/ns/cargo#Answer";
    public final static IRI c_Answer = IRI.create(s_c_Answer);
    /**
     * In the context of CASS2.0 process, BillingDetails object is used to integrate specific Billing and Settlement data requirements
     * 
     */
    public final static String s_c_BillingDetails = "https://onerecord.iata.org/ns/cargo#BillingDetails";
    public final static IRI c_BillingDetails = IRI.create(s_c_BillingDetails);
    /**
     * Booking object refers to a confirmed booking
     * 
     */
    public final static String s_c_Booking = "https://onerecord.iata.org/ns/cargo#Booking";
    public final static IRI c_Booking = IRI.create(s_c_Booking);
    /**
     * Booking details
     * 
     */
    public final static String s_c_BookingOption = "https://onerecord.iata.org/ns/cargo#BookingOption";
    public final static IRI c_BookingOption = IRI.create(s_c_BookingOption);
    /**
     * Request object, refers to the Quote request or Booking request 
     * 
     */
    public final static String s_c_BookingOptionRequest = "https://onerecord.iata.org/ns/cargo#BookingOptionRequest";
    public final static IRI c_BookingOptionRequest = IRI.create(s_c_BookingOptionRequest);
    /**
     * A party, ususally the freight forwarder, creates the BookingRequest in order to inform the Carrier that h wants to confirm a Booking
     * 
     */
    public final static String s_c_BookingRequest = "https://onerecord.iata.org/ns/cargo#BookingRequest";
    public final static IRI c_BookingRequest = IRI.create(s_c_BookingRequest);
    /**
     * Booking Segment refers to the arrival and location details of a Booking Option Request or a Booking Option (offer or actual booking)
     * 
     */
    public final static String s_c_BookingSegment = "https://onerecord.iata.org/ns/cargo#BookingSegment";
    public final static IRI c_BookingSegment = IRI.create(s_c_BookingSegment);
    /**
     * Simplified shipment object that is to be used only for the distribution scope where only a subset of data is known priori to operational phase.
     * 
     */
    public final static String s_c_BookingShipment = "https://onerecord.iata.org/ns/cargo#BookingShipment";
    public final static IRI c_BookingShipment = IRI.create(s_c_BookingShipment);
    /**
     * Previsouly called Schedule. This object refers to times used for the Booking Option Request (preferences part of the request) or the Booking Option (times sur as LAT where there is a commitment from the carrier)
     * 
     */
    public final static String s_c_BookingTimes = "https://onerecord.iata.org/ns/cargo#BookingTimes";
    public final static IRI c_BookingTimes = IRI.create(s_c_BookingTimes);
    /**
     * CO2 Calculation
     * 
     */
    public final static String s_c_CO2Emissions = "https://onerecord.iata.org/ns/cargo#CO2Emissions";
    public final static IRI c_CO2Emissions = IRI.create(s_c_CO2Emissions);
    /**
     * Company details of carriers
     * 
     */
    public final static String s_c_Carrier = "https://onerecord.iata.org/ns/cargo#Carrier";
    public final static IRI c_Carrier = IRI.create(s_c_Carrier);
    /**
     * Carrier product details
     * 
     */
    public final static String s_c_CarrierProduct = "https://onerecord.iata.org/ns/cargo#CarrierProduct";
    public final static IRI c_CarrierProduct = IRI.create(s_c_CarrierProduct);
    /**
     * Product additional details
     * 
     */
    public final static String s_c_Characteristic = "https://onerecord.iata.org/ns/cargo#Characteristic";
    public final static IRI c_Characteristic = IRI.create(s_c_Characteristic);
    /**
     * Action to describe a check
     * 
     */
    public final static String s_c_Check = "https://onerecord.iata.org/ns/cargo#Check";
    public final static IRI c_Check = IRI.create(s_c_Check);
    /**
     * CheckTemplate is the body of a check, holding links to multiple Question LOs and is provided by the party in charge of the template that is used
     * 
     * 
     */
    public final static String s_c_CheckTemplate = "https://onerecord.iata.org/ns/cargo#CheckTemplate";
    public final static IRI c_CheckTemplate = IRI.create(s_c_CheckTemplate);
    /**
     * CheckTotalResult holds the result of a Check and should be provided by the party executing and accounting for the check result
     * 
     */
    public final static String s_c_CheckTotalResult = "https://onerecord.iata.org/ns/cargo#CheckTotalResult";
    public final static IRI c_CheckTotalResult = IRI.create(s_c_CheckTotalResult);
    public final static String s_c_CommonObjects = "https://onerecord.iata.org/ns/cargo#CommonObjects";
    public final static IRI c_CommonObjects = IRI.create(s_c_CommonObjects);
    /**
     * Company details
     * 
     */
    public final static String s_c_Company = "https://onerecord.iata.org/ns/cargo#Company";
    public final static IRI c_Company = IRI.create(s_c_Company);
    /**
     * Company branches
     * 
     */
    public final static String s_c_CompanyBranch = "https://onerecord.iata.org/ns/cargo#CompanyBranch";
    public final static IRI c_CompanyBranch = IRI.create(s_c_CompanyBranch);
    /**
     * Action to describe build-up or break-down of LoadingUnits
     * 
     */
    public final static String s_c_Composing = "https://onerecord.iata.org/ns/cargo#Composing";
    public final static IRI c_Composing = IRI.create(s_c_Composing);
    /**
     * Contact details
     * 
     */
    public final static String s_c_ContactDetail = "https://onerecord.iata.org/ns/cargo#ContactDetail";
    public final static IRI c_ContactDetail = IRI.create(s_c_ContactDetail);
    /**
     * Country details
     * 
     */
    public final static String s_c_Country = "https://onerecord.iata.org/ns/cargo#Country";
    public final static IRI c_Country = IRI.create(s_c_Country);
    /**
     * Customs information details
     * 
     */
    public final static String s_c_CustomsInformation = "https://onerecord.iata.org/ns/cargo#CustomsInformation";
    public final static IRI c_CustomsInformation = IRI.create(s_c_CustomsInformation);
    /**
     * Dangerous goods declaration
     * 
     */
    public final static String s_c_DgDeclaration = "https://onerecord.iata.org/ns/cargo#DgDeclaration";
    public final static IRI c_DgDeclaration = IRI.create(s_c_DgDeclaration);
    /**
     * Details of the radioactive products 
     * 
     */
    public final static String s_c_DgProductRadioactive = "https://onerecord.iata.org/ns/cargo#DgProductRadioactive";
    public final static IRI c_DgProductRadioactive = IRI.create(s_c_DgProductRadioactive);
    /**
     * Details of the radioactive isotope contained in the product
     * 
     */
    public final static String s_c_DgRadioactiveIsotope = "https://onerecord.iata.org/ns/cargo#DgRadioactiveIsotope";
    public final static IRI c_DgRadioactiveIsotope = IRI.create(s_c_DgRadioactiveIsotope);
    /**
     * Dimension details
     * 
     */
    public final static String s_c_Dimensions = "https://onerecord.iata.org/ns/cargo#Dimensions";
    public final static IRI c_Dimensions = IRI.create(s_c_Dimensions);
    /**
     * Embedded Object parent class, containing all common properties for Embedded Object
     * 
     */
    public final static String s_c_EmbeddedObject = "https://onerecord.iata.org/ns/cargo#EmbeddedObject";
    public final static IRI c_EmbeddedObject = IRI.create(s_c_EmbeddedObject);
    /**
     * Details of the pieces (Live animals) of the permit and specific information such as quantity measured and used to date quota
     * 
     */
    public final static String s_c_EpermitConsignment = "https://onerecord.iata.org/ns/cargo#EpermitConsignment";
    public final static IRI c_EpermitConsignment = IRI.create(s_c_EpermitConsignment);
    /**
     * Signature details of the Epermit for Live Animals
     * 
     */
    public final static String s_c_EpermitSignature = "https://onerecord.iata.org/ns/cargo#EpermitSignature";
    public final static IRI c_EpermitSignature = IRI.create(s_c_EpermitSignature);
    /**
     * Subtype of Event
     * 
     */
    public final static String s_c_EventUld = "https://onerecord.iata.org/ns/cargo#EventUld";
    public final static IRI c_EventUld = IRI.create(s_c_EventUld);
    /**
     * Reference documents details
     * 
     */
    public final static String s_c_ExternalReference = "https://onerecord.iata.org/ns/cargo#ExternalReference";
    public final static IRI c_ExternalReference = IRI.create(s_c_ExternalReference);
    /**
     * Geolocation details - e.g. for drones, automated vehicles...
     * 
     */
    public final static String s_c_Geolocation = "https://onerecord.iata.org/ns/cargo#Geolocation";
    public final static IRI c_Geolocation = IRI.create(s_c_Geolocation);
    /**
     * Used to provide handling instructions such as Special service request (SSR), Special handling codes (SPH) or Other service information (OSI)
     * 
     */
    public final static String s_c_HandlingInstructions = "https://onerecord.iata.org/ns/cargo#HandlingInstructions";
    public final static IRI c_HandlingInstructions = IRI.create(s_c_HandlingInstructions);
    /**
     * Insurance details
     * 
     */
    public final static String s_c_Insurance = "https://onerecord.iata.org/ns/cargo#Insurance";
    public final static IRI c_Insurance = IRI.create(s_c_Insurance);
    /**
     * IoT Device details
     * 
     */
    public final static String s_c_IotDevice = "https://onerecord.iata.org/ns/cargo#IotDevice";
    public final static IRI c_IotDevice = IRI.create(s_c_IotDevice);
    /**
     * Item details
     * 
     */
    public final static String s_c_Item = "https://onerecord.iata.org/ns/cargo#Item";
    public final static IRI c_Item = IRI.create(s_c_Item);
    /**
     * Dangerous Goods subtype of Item
     * 
     */
    public final static String s_c_ItemDg = "https://onerecord.iata.org/ns/cargo#ItemDg";
    public final static IRI c_ItemDg = IRI.create(s_c_ItemDg);
    /**
     * Epermit for Live Animals details
     * 
     */
    public final static String s_c_LiveAnimalsEpermit = "https://onerecord.iata.org/ns/cargo#LiveAnimalsEpermit";
    public final static IRI c_LiveAnimalsEpermit = IRI.create(s_c_LiveAnimalsEpermit);
    /**
     * Action to describe onloading or offloading TransportMeans
     * 
     */
    public final static String s_c_Loading = "https://onerecord.iata.org/ns/cargo#Loading";
    public final static IRI c_Loading = IRI.create(s_c_Loading);
    /**
     * Activity to describe onloading and offloading processes
     * 
     */
    public final static String s_c_LoadingActivity = "https://onerecord.iata.org/ns/cargo#LoadingActivity";
    public final static IRI c_LoadingActivity = IRI.create(s_c_LoadingActivity);
    /**
     * LoadingMaterial describes transportable, complementary non-Piece objects such as dry ice or nets
     * 
     */
    public final static String s_c_LoadingMaterial = "https://onerecord.iata.org/ns/cargo#LoadingMaterial";
    public final static IRI c_LoadingMaterial = IRI.create(s_c_LoadingMaterial);
    /**
     * Unit Load Device details
     * 
     */
    public final static String s_c_LoadingUnit = "https://onerecord.iata.org/ns/cargo#LoadingUnit";
    public final static IRI c_LoadingUnit = IRI.create(s_c_LoadingUnit);
    /**
     * Loading location details
     * 
     */
    public final static String s_c_Location = "https://onerecord.iata.org/ns/cargo#Location";
    public final static IRI c_Location = IRI.create(s_c_Location);
    /**
     * Superclass: LogisticsAction is a specific task with a specific result performed on one or more physical LOs by one party in the context of an Activity
     * 
     */
    public final static String s_c_LogisticsAction = "https://onerecord.iata.org/ns/cargo#LogisticsAction";
    public final static IRI c_LogisticsAction = IRI.create(s_c_LogisticsAction);
    /**
     * Superclass: LogisticsActivity is a scheduled set of tasks that is executed as part of one or more Services
     * 
     */
    public final static String s_c_LogisticsActivity = "https://onerecord.iata.org/ns/cargo#LogisticsActivity";
    public final static IRI c_LogisticsActivity = IRI.create(s_c_LogisticsActivity);
    /**
     * Superclass: LogisticsAgents describe acting entities in the logistics supply chain such as persons and organizations
     * 
     */
    public final static String s_c_LogisticsAgent = "https://onerecord.iata.org/ns/cargo#LogisticsAgent";
    public final static IRI c_LogisticsAgent = IRI.create(s_c_LogisticsAgent);
    /**
     * Event details
     * 
     */
    public final static String s_c_LogisticsEvent = "https://onerecord.iata.org/ns/cargo#LogisticsEvent";
    public final static IRI c_LogisticsEvent = IRI.create(s_c_LogisticsEvent);
    /**
     * Logistics Object parent class, containing all common properties for logistics objects.
     * 
     */
    public final static String s_c_LogisticsObject = "https://onerecord.iata.org/ns/cargo#LogisticsObject";
    public final static IRI c_LogisticsObject = IRI.create(s_c_LogisticsObject);
    /**
     * Superclass: LogisticsService is a sequence of Activities provided by one Party to another
     * 
     */
    public final static String s_c_LogisticsService = "https://onerecord.iata.org/ns/cargo#LogisticsService";
    public final static IRI c_LogisticsService = IRI.create(s_c_LogisticsService);
    /**
     * Measurements details for Sensors, either generic or geolocation measurements are recorded
     * 
     */
    public final static String s_c_Measurement = "https://onerecord.iata.org/ns/cargo#Measurement";
    public final static IRI c_Measurement = IRI.create(s_c_Measurement);
    /**
     * Measurements details for Geolocation sensors
     * 
     */
    public final static String s_c_MeasurementsGeoloc = "https://onerecord.iata.org/ns/cargo#MeasurementsGeoloc";
    public final static IRI c_MeasurementsGeoloc = IRI.create(s_c_MeasurementsGeoloc);
    /**
     * Measurements details for sensors that are not geolocation sensors
     * 
     */
    public final static String s_c_MeasurementsOther = "https://onerecord.iata.org/ns/cargo#MeasurementsOther";
    public final static IRI c_MeasurementsOther = IRI.create(s_c_MeasurementsOther);
    /**
     * Times refering to Transport Movements, used to describe specfic times such as Actual Departure time, etc.
     * 
     */
    public final static String s_c_MovementTimes = "https://onerecord.iata.org/ns/cargo#MovementTimes";
    public final static IRI c_MovementTimes = IRI.create(s_c_MovementTimes);
    /**
     * Action to describe movements of TransportMeans
     * 
     */
    public final static String s_c_Moving = "https://onerecord.iata.org/ns/cargo#Moving";
    public final static IRI c_Moving = IRI.create(s_c_Moving);
    /**
     * Non-human actors are actors which are not a person, such as robots
     * 
     */
    public final static String s_c_NonHumanActor = "https://onerecord.iata.org/ns/cargo#NonHumanActor";
    public final static IRI c_NonHumanActor = IRI.create(s_c_NonHumanActor);
    /**
     * Superclass: Organizations represent a kind of Agent corresponding to social instititutions such as companies, societies, etc
     * 
     */
    public final static String s_c_Organization = "https://onerecord.iata.org/ns/cargo#Organization";
    public final static IRI c_Organization = IRI.create(s_c_Organization);
    /**
     * Other identifiers
     * 
     */
    public final static String s_c_OtherIdentifier = "https://onerecord.iata.org/ns/cargo#OtherIdentifier";
    public final static IRI c_OtherIdentifier = IRI.create(s_c_OtherIdentifier);
    /**
     * Packaging details 
     * 
     */
    public final static String s_c_PackagingType = "https://onerecord.iata.org/ns/cargo#PackagingType";
    public final static IRI c_PackagingType = IRI.create(s_c_PackagingType);
    /**
     * Refers to a Company and its role in a specific context, e.g Company A as shipper. Cargo-XML Code List 1.15 can be used as a reference with the addition of "Notify Party"
     * 
     */
    public final static String s_c_Party = "https://onerecord.iata.org/ns/cargo#Party";
    public final static IRI c_Party = IRI.create(s_c_Party);
    /**
     * Person details
     * 
     */
    public final static String s_c_Person = "https://onerecord.iata.org/ns/cargo#Person";
    public final static IRI c_Person = IRI.create(s_c_Person);
    /**
     * Superclass: PhysicalLogisticObjects represent the digital twin of an object in the logistics suppy chain that physically exist
     * 
     */
    public final static String s_c_PhysicalLogisticsObject = "https://onerecord.iata.org/ns/cargo#PhysicalLogisticsObject";
    public final static IRI c_PhysicalLogisticsObject = IRI.create(s_c_PhysicalLogisticsObject);
    /**
     * Individual piece or virtual grouping of pieces
     * 
     */
    public final static String s_c_Piece = "https://onerecord.iata.org/ns/cargo#Piece";
    public final static IRI c_Piece = IRI.create(s_c_Piece);
    /**
     * Dangerous Goods subtype of Piece
     * 
     */
    public final static String s_c_PieceDg = "https://onerecord.iata.org/ns/cargo#PieceDg";
    public final static IRI c_PieceDg = IRI.create(s_c_PieceDg);
    /**
     * LiveAnimals subclass of Piece
     * 
     */
    public final static String s_c_PieceLiveAnimals = "https://onerecord.iata.org/ns/cargo#PieceLiveAnimals";
    public final static IRI c_PieceLiveAnimals = IRI.create(s_c_PieceLiveAnimals);
    /**
     * Price associated to the offer/booking
     * 
     */
    public final static String s_c_Price = "https://onerecord.iata.org/ns/cargo#Price";
    public final static IRI c_Price = IRI.create(s_c_Price);
    /**
     * Product details
     * 
     */
    public final static String s_c_Product = "https://onerecord.iata.org/ns/cargo#Product";
    public final static IRI c_Product = IRI.create(s_c_Product);
    /**
     * Dangerous Goods subtype of Product
     * 
     */
    public final static String s_c_ProductDg = "https://onerecord.iata.org/ns/cargo#ProductDg";
    public final static IRI c_ProductDg = IRI.create(s_c_ProductDg);
    /**
     * PublicAuthorities are Organizations of the state on public interests, such as customs
     * 
     */
    public final static String s_c_PublicAuthority = "https://onerecord.iata.org/ns/cargo#PublicAuthority";
    public final static IRI c_PublicAuthority = IRI.create(s_c_PublicAuthority);
    /**
     * Question holds one question and a link to an Answer The Question is provided by the party in charge of the template used
     * 
     */
    public final static String s_c_Question = "https://onerecord.iata.org/ns/cargo#Question";
    public final static IRI c_Question = IRI.create(s_c_Question);
    /**
     * Ranges details
     * 
     */
    public final static String s_c_Ranges = "https://onerecord.iata.org/ns/cargo#Ranges";
    public final static IRI c_Ranges = IRI.create(s_c_Ranges);
    /**
     * Ratings details
     * 
     */
    public final static String s_c_Ratings = "https://onerecord.iata.org/ns/cargo#Ratings";
    public final static IRI c_Ratings = IRI.create(s_c_Ratings);
    /**
     * Regulated Entity
     * 
     */
    public final static String s_c_RegulatedEntity = "https://onerecord.iata.org/ns/cargo#RegulatedEntity";
    public final static IRI c_RegulatedEntity = IRI.create(s_c_RegulatedEntity);
    /**
     * Routing details
     * 
     */
    public final static String s_c_Routing = "https://onerecord.iata.org/ns/cargo#Routing";
    public final static IRI c_Routing = IRI.create(s_c_Routing);
    /**
     * Scheduled Legs class to be used to identify legs. Can be used with Booking Option Request as an indicator of preferred Routing or with Booking Option when a carrier proposes a specific Routing.
     * 
     */
    public final static String s_c_ScheduledLegs = "https://onerecord.iata.org/ns/cargo#ScheduledLegs";
    public final static IRI c_ScheduledLegs = IRI.create(s_c_ScheduledLegs);
    /**
     * Security declaration details
     * 
     */
    public final static String s_c_SecurityDeclaration = "https://onerecord.iata.org/ns/cargo#SecurityDeclaration";
    public final static IRI c_SecurityDeclaration = IRI.create(s_c_SecurityDeclaration);
    /**
     * Sensor details and measurements, linked to Connected Devices
     * 
     */
    public final static String s_c_Sensor = "https://onerecord.iata.org/ns/cargo#Sensor";
    public final static IRI c_Sensor = IRI.create(s_c_Sensor);
    /**
     * Sensor measurements details for Geolocation sensors (sensorType = "Geolocation")
     * 
     */
    public final static String s_c_SensorGeoloc = "https://onerecord.iata.org/ns/cargo#SensorGeoloc";
    public final static IRI c_SensorGeoloc = IRI.create(s_c_SensorGeoloc);
    /**
     * Sensor measurements details for sensors other than Geolocation sensors (sensorType != "Geolocation")
     * 
     */
    public final static String s_c_SensorOther = "https://onerecord.iata.org/ns/cargo#SensorOther";
    public final static IRI c_SensorOther = IRI.create(s_c_SensorOther);
    /**
     * Shipment details
     * 
     */
    public final static String s_c_Shipment = "https://onerecord.iata.org/ns/cargo#Shipment";
    public final static IRI c_Shipment = IRI.create(s_c_Shipment);
    /**
     * Activity to describe storing processes
     * 
     */
    public final static String s_c_Storage = "https://onerecord.iata.org/ns/cargo#Storage";
    public final static IRI c_Storage = IRI.create(s_c_Storage);
    /**
     * Action to describe store-in or store-out
     * 
     */
    public final static String s_c_Storing = "https://onerecord.iata.org/ns/cargo#Storing";
    public final static IRI c_Storing = IRI.create(s_c_Storing);
    /**
     * Transport means details
     * 
     */
    public final static String s_c_TransportMeans = "https://onerecord.iata.org/ns/cargo#TransportMeans";
    public final static IRI c_TransportMeans = IRI.create(s_c_TransportMeans);
    /**
     * Activity to describe transports, replaces the TransportSegment in v1.1 and above
     * 
     */
    public final static String s_c_TransportMovement = "https://onerecord.iata.org/ns/cargo#TransportMovement";
    public final static IRI c_TransportMovement = IRI.create(s_c_TransportMovement);
    /**
     * Activity to describe build-up and break-down processes
     * 
     */
    public final static String s_c_UnitComposition = "https://onerecord.iata.org/ns/cargo#UnitComposition";
    public final static IRI c_UnitComposition = IRI.create(s_c_UnitComposition);
    /**
     * Unit of measurement details
     * 
     */
    public final static String s_c_Value = "https://onerecord.iata.org/ns/cargo#Value";
    public final static IRI c_Value = IRI.create(s_c_Value);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_c_VolumetricWeight = "https://onerecord.iata.org/ns/cargo#VolumetricWeight";
    public final static IRI c_VolumetricWeight = IRI.create(s_c_VolumetricWeight);
    /**
     * Waybill details
     * 
     */
    public final static String s_c_Waybill = "https://onerecord.iata.org/ns/cargo#Waybill";
    public final static IRI c_Waybill = IRI.create(s_c_Waybill);
    /**
     * Reference to the LiveAnimalsEpermit this Signature applies to
     * 
     */
    public final static String s_p_appliesToEpermit = "https://onerecord.iata.org/ns/cargo#appliesToEpermit";
    public final static IRI p_appliesToEpermit = IRI.create(s_p_appliesToEpermit);
    /**
     * Reference to the product
     * 
     */
    public final static String s_p_appliesToProduct = "https://onerecord.iata.org/ns/cargo#appliesToProduct";
    public final static IRI p_appliesToProduct = IRI.create(s_p_appliesToProduct);
    /**
     * Reference to the Organization for which the RegulatedEntity information is valid
     * 
     */
    public final static String s_p_belongsToOrganization = "https://onerecord.iata.org/ns/cargo#belongsToOrganization";
    public final static IRI p_belongsToOrganization = IRI.create(s_p_belongsToOrganization);
    /**
     * Reference to the TransportMovement the CO2Emissions have been calculated for
     * 
     */
    public final static String s_p_calculatesEmissionsForTransportMovement = "https://onerecord.iata.org/ns/cargo#calculatesEmissionsForTransportMovement";
    public final static IRI p_calculatesEmissionsForTransportMovement = IRI.create(s_p_calculatesEmissionsForTransportMovement);
    /**
     * Transport Movement linked to the CO2 Emissions object
     * 
     */
    public final static String s_p_calculatesEmissionsOfTransportMovement = "https://onerecord.iata.org/ns/cargo#calculatesEmissionsOfTransportMovement";
    public final static IRI p_calculatesEmissionsOfTransportMovement = IRI.create(s_p_calculatesEmissionsOfTransportMovement);
    /**
     * References to the Materials being built-up or broken-down
     * 
     */
    public final static String s_p_composesLoadingMaterial = "https://onerecord.iata.org/ns/cargo#composesLoadingMaterial";
    public final static IRI p_composesLoadingMaterial = IRI.create(s_p_composesLoadingMaterial);
    /**
     * Reference to the LoadingUnit being built-up or broken-down
     * 
     */
    public final static String s_p_composesOnLoadingUnit = "https://onerecord.iata.org/ns/cargo#composesOnLoadingUnit";
    public final static IRI p_composesOnLoadingUnit = IRI.create(s_p_composesOnLoadingUnit);
    /**
     * References to the Pieces being built-up or broken-down
     * 
     */
    public final static String s_p_composesPiece = "https://onerecord.iata.org/ns/cargo#composesPiece";
    public final static IRI p_composesPiece = IRI.create(s_p_composesPiece);
    /**
     * Reference to the item(s) contained in the piece
     * 
     */
    public final static String s_p_containsItem = "https://onerecord.iata.org/ns/cargo#containsItem";
    public final static IRI p_containsItem = IRI.create(s_p_containsItem);
    /**
     * Details of contained piece(s)
     * 
     */
    public final static String s_p_containsPiece = "https://onerecord.iata.org/ns/cargo#containsPiece";
    public final static IRI p_containsPiece = IRI.create(s_p_containsPiece);
    /**
     * Insured amount - amount covered by the insurance policy
     * 
     */
    public final static String s_p_coversAmount = "https://onerecord.iata.org/ns/cargo#coversAmount";
    public final static IRI p_coversAmount = IRI.create(s_p_coversAmount);
    /**
     * Reference to the Organization acting in the role of this Party
     * 
     */
    public final static String s_p_describesRoleOfOrganization = "https://onerecord.iata.org/ns/cargo#describesRoleOfOrganization";
    public final static IRI p_describesRoleOfOrganization = IRI.create(s_p_describesRoleOfOrganization);
    /**
     * Reference to the Waybill
     * 
     */
    public final static String s_p_detailsBillingOfWaybill = "https://onerecord.iata.org/ns/cargo#detailsBillingOfWaybill";
    public final static IRI p_detailsBillingOfWaybill = IRI.create(s_p_detailsBillingOfWaybill);
    /**
     * Reference to the ProductDg this DgProductRadiosctive details
     * 
     */
    public final static String s_p_detailsProductDg = "https://onerecord.iata.org/ns/cargo#detailsProductDg";
    public final static IRI p_detailsProductDg = IRI.create(s_p_detailsProductDg);
    /**
     * Address details
     * 
     */
    public final static String s_p_hasAddress = "https://onerecord.iata.org/ns/cargo#hasAddress";
    public final static IRI p_hasAddress = IRI.create(s_p_hasAddress);
    /**
     * Information about Adjustments performed on the BillingDetails
     * 
     */
    public final static String s_p_hasAdjustment = "https://onerecord.iata.org/ns/cargo#hasAdjustment";
    public final static IRI p_hasAdjustment = IRI.create(s_p_hasAdjustment);
    /**
     * Reference to the Answer to the Question
     * 
     */
    public final static String s_p_hasAnswer = "https://onerecord.iata.org/ns/cargo#hasAnswer";
    public final static IRI p_hasAnswer = IRI.create(s_p_hasAnswer);
    /**
     * Information about an answer Value of any kind of the Answer
     * 
     */
    public final static String s_p_hasAnswerValue = "https://onerecord.iata.org/ns/cargo#hasAnswerValue";
    public final static IRI p_hasAnswerValue = IRI.create(s_p_hasAnswerValue);
    /**
     * Reference to the arrival Location
     * 
     */
    public final static String s_p_hasArrivalLocation = "https://onerecord.iata.org/ns/cargo#hasArrivalLocation";
    public final static IRI p_hasArrivalLocation = IRI.create(s_p_hasArrivalLocation);
    /**
     * Reference to the permits associated with the Live Animals
     * 
     */
    public final static String s_p_hasAssociatedEpermit = "https://onerecord.iata.org/ns/cargo#hasAssociatedEpermit";
    public final static IRI p_hasAssociatedEpermit = IRI.create(s_p_hasAssociatedEpermit);
    /**
     * References to all connected IotDevices
     * 
     */
    public final static String s_p_hasAttachedIotDevice = "https://onerecord.iata.org/ns/cargo#hasAttachedIotDevice";
    public final static IRI p_hasAttachedIotDevice = IRI.create(s_p_hasAttachedIotDevice);
    /**
     * Reference to the BillingDetails of the Waybill
     * 
     */
    public final static String s_p_hasBillingDetails = "https://onerecord.iata.org/ns/cargo#hasBillingDetails";
    public final static IRI p_hasBillingDetails = IRI.create(s_p_hasBillingDetails);
    /**
     * Reference to the Booking
     * 
     */
    public final static String s_p_hasBooking = "https://onerecord.iata.org/ns/cargo#hasBooking";
    public final static IRI p_hasBooking = IRI.create(s_p_hasBooking);
    /**
     * Reference to the BookingOptions
     * 
     */
    public final static String s_p_hasBookingOption = "https://onerecord.iata.org/ns/cargo#hasBookingOption";
    public final static IRI p_hasBookingOption = IRI.create(s_p_hasBookingOption);
    /**
     * Reference to the BookingOptionRequest
     * 
     */
    public final static String s_p_hasBookingOptionRequest = "https://onerecord.iata.org/ns/cargo#hasBookingOptionRequest";
    public final static IRI p_hasBookingOptionRequest = IRI.create(s_p_hasBookingOptionRequest);
    /**
     * Reference to the Booking Segment
     * 
     */
    public final static String s_p_hasBookingSegment = "https://onerecord.iata.org/ns/cargo#hasBookingSegment";
    public final static IRI p_hasBookingSegment = IRI.create(s_p_hasBookingSegment);
    /**
     * Reference to the BookingShipment if required
     * 
     */
    public final static String s_p_hasBookingShipment = "https://onerecord.iata.org/ns/cargo#hasBookingShipment";
    public final static IRI p_hasBookingShipment = IRI.create(s_p_hasBookingShipment);
    /**
     * booking times details of the Booking Option (proposed or actual)
     * 
     */
    public final static String s_p_hasBookingTime = "https://onerecord.iata.org/ns/cargo#hasBookingTime";
    public final static IRI p_hasBookingTime = IRI.create(s_p_hasBookingTime);
    /**
     * Company branches
     * 
     */
    public final static String s_p_hasBranch = "https://onerecord.iata.org/ns/cargo#hasBranch";
    public final static IRI p_hasBranch = IRI.create(s_p_hasBranch);
    /**
     * Required for some CO2 calculations
     * 
     */
    public final static String s_p_hasCO2Coefficient = "https://onerecord.iata.org/ns/cargo#hasCO2Coefficient";
    public final static IRI p_hasCO2Coefficient = IRI.create(s_p_hasCO2Coefficient);
    /**
     * Information about the calculated distance
     * 
     */
    public final static String s_p_hasCalculatedDistance = "https://onerecord.iata.org/ns/cargo#hasCalculatedDistance";
    public final static IRI p_hasCalculatedDistance = IRI.create(s_p_hasCalculatedDistance);
    /**
     * CO2 emissions calculated
     * 
     */
    public final static String s_p_hasCalculatedEmissions = "https://onerecord.iata.org/ns/cargo#hasCalculatedEmissions";
    public final static IRI p_hasCalculatedEmissions = IRI.create(s_p_hasCalculatedEmissions);
    /**
     * Information about the calculated fuel amount
     * 
     */
    public final static String s_p_hasCalculatedFuelAmount = "https://onerecord.iata.org/ns/cargo#hasCalculatedFuelAmount";
    public final static IRI p_hasCalculatedFuelAmount = IRI.create(s_p_hasCalculatedFuelAmount);
    /**
     * Reference to the Organization that fulfills the role of the carrier in this Waybill
     * 
     */
    public final static String s_p_hasCarrier = "https://onerecord.iata.org/ns/cargo#hasCarrier";
    public final static IRI p_hasCarrier = IRI.create(s_p_hasCarrier);
    /**
     * Location of individual or company involved in the movement of a consignment or Coded representation of a specific airport/city code
     * 
     */
    public final static String s_p_hasCarrierDeclarationPlace = "https://onerecord.iata.org/ns/cargo#hasCarrierDeclarationPlace";
    public final static IRI p_hasCarrierDeclarationPlace = IRI.create(s_p_hasCarrierDeclarationPlace);
    /**
     * Charateristics of the product
     * 
     */
    public final static String s_p_hasCharacteristic = "https://onerecord.iata.org/ns/cargo#hasCharacteristic";
    public final static IRI p_hasCharacteristic = IRI.create(s_p_hasCharacteristic);
    /**
     * Chargeable weight
     * 
     */
    public final static String s_p_hasChargeableWeight = "https://onerecord.iata.org/ns/cargo#hasChargeableWeight";
    public final static IRI p_hasChargeableWeight = IRI.create(s_p_hasChargeableWeight);
    /**
     * References to the CheckActions performed on the object
     * 
     */
    public final static String s_p_hasCheck = "https://onerecord.iata.org/ns/cargo#hasCheck";
    public final static IRI p_hasCheck = IRI.create(s_p_hasCheck);
    /**
     * References to CheckActions performed for the Activity
     * 
     */
    public final static String s_p_hasCheckActions = "https://onerecord.iata.org/ns/cargo#hasCheckActions";
    public final static IRI p_hasCheckActions = IRI.create(s_p_hasCheckActions);
    /**
     * References to CO2Emissions
     * 
     */
    public final static String s_p_hasCo2Emissions = "https://onerecord.iata.org/ns/cargo#hasCo2Emissions";
    public final static IRI p_hasCo2Emissions = IRI.create(s_p_hasCo2Emissions);
    /**
     * References to all CompositionActions performed for the UnitComposition
     * 
     */
    public final static String s_p_hasCompositionActions = "https://onerecord.iata.org/ns/cargo#hasCompositionActions";
    public final static IRI p_hasCompositionActions = IRI.create(s_p_hasCompositionActions);
    /**
     * Reference to the sensors linked to the device
     * 
     */
    public final static String s_p_hasConnectedSensor = "https://onerecord.iata.org/ns/cargo#hasConnectedSensor";
    public final static IRI p_hasConnectedSensor = IRI.create(s_p_hasConnectedSensor);
    /**
     * Reference to the Organization that fulfills the role of the consignee, for a LiveAnimalsEpermit it has to include complete name and address (box 3)
     * 
     */
    public final static String s_p_hasConsignee = "https://onerecord.iata.org/ns/cargo#hasConsignee";
    public final static IRI p_hasConsignee = IRI.create(s_p_hasConsignee);
    /**
     * Reference to te pieces (Live Animals) of the permit
     * 
     */
    public final static String s_p_hasConsignmentItems = "https://onerecord.iata.org/ns/cargo#hasConsignmentItems";
    public final static IRI p_hasConsignmentItems = IRI.create(s_p_hasConsignmentItems);
    /**
     * Information about contacts
     * 
     */
    public final static String s_p_hasContactDetail = "https://onerecord.iata.org/ns/cargo#hasContactDetail";
    public final static IRI p_hasContactDetail = IRI.create(s_p_hasContactDetail);
    /**
     * References to Actors (Person, NonHumanActor) acting as contacts
     * 
     */
    public final static String s_p_hasContactPerson = "https://onerecord.iata.org/ns/cargo#hasContactPerson";
    public final static IRI p_hasContactPerson = IRI.create(s_p_hasContactPerson);
    /**
     * Product of the piece, mandatory when there are no items
     * 
     */
    public final static String s_p_hasContentDescribedByProduct = "https://onerecord.iata.org/ns/cargo#hasContentDescribedByProduct";
    public final static IRI p_hasContentDescribedByProduct = IRI.create(s_p_hasContentDescribedByProduct);
    /**
     * Goods production country, mandatory when there are no Items
     * 
     */
    public final static String s_p_hasContentProductionCountry = "https://onerecord.iata.org/ns/cargo#hasContentProductionCountry";
    public final static IRI p_hasContentProductionCountry = IRI.create(s_p_hasContentProductionCountry);
    /**
     * Volume to weight conversion factor
     * 
     */
    public final static String s_p_hasConversionFactor = "https://onerecord.iata.org/ns/cargo#hasConversionFactor";
    public final static IRI p_hasConversionFactor = IRI.create(s_p_hasConversionFactor);
    /**
     * Country details
     * 
     */
    public final static String s_p_hasCountry = "https://onerecord.iata.org/ns/cargo#hasCountry";
    public final static IRI p_hasCountry = IRI.create(s_p_hasCountry);
    /**
     * Customs details
     * 
     */
    public final static String s_p_hasCustomsInformation = "https://onerecord.iata.org/ns/cargo#hasCustomsInformation";
    public final static IRI p_hasCustomsInformation = IRI.create(s_p_hasCustomsInformation);
    /**
     * Name and UN/LOCODE code of the point or port of departure, shipment or destination, as required under the applicable delivery term
     * 
     */
    public final static String s_p_hasDeliveryLocation = "https://onerecord.iata.org/ns/cargo#hasDeliveryLocation";
    public final static IRI p_hasDeliveryLocation = IRI.create(s_p_hasDeliveryLocation);
    /**
     * Reference to the depature Location
     * 
     */
    public final static String s_p_hasDepartureLocation = "https://onerecord.iata.org/ns/cargo#hasDepartureLocation";
    public final static IRI p_hasDepartureLocation = IRI.create(s_p_hasDepartureLocation);
    /**
     * Reference to the Items in which the product can be found.
     * 
     */
    public final static String s_p_hasDescriptionForItems = "https://onerecord.iata.org/ns/cargo#hasDescriptionForItems";
    public final static IRI p_hasDescriptionForItems = IRI.create(s_p_hasDescriptionForItems);
    /**
     * Reference to the pieces where the product can be found. This needs to be filled in case there is no Item
     * 
     */
    public final static String s_p_hasDescriptionForPieces = "https://onerecord.iata.org/ns/cargo#hasDescriptionForPieces";
    public final static IRI p_hasDescriptionForPieces = IRI.create(s_p_hasDescriptionForPieces);
    /**
     * Reference to the Dangerous Goods declaration
     * 
     */
    public final static String s_p_hasDgDeclaration = "https://onerecord.iata.org/ns/cargo#hasDgDeclaration";
    public final static IRI p_hasDgDeclaration = IRI.create(s_p_hasDgDeclaration);
    /**
     * Dimensions details
     * 
     */
    public final static String s_p_hasDimensions = "https://onerecord.iata.org/ns/cargo#hasDimensions";
    public final static IRI p_hasDimensions = IRI.create(s_p_hasDimensions);
    /**
     * Linked documents to the person, e.g. driver's license, ID, etc.
     * 
     */
    public final static String s_p_hasDocument = "https://onerecord.iata.org/ns/cargo#hasDocument";
    public final static IRI p_hasDocument = IRI.create(s_p_hasDocument);
    /**
     * Elevation from sea level - Change of data type to Value as of ontology v1.1
     * 
     */
    public final static String s_p_hasElevation = "https://onerecord.iata.org/ns/cargo#hasElevation";
    public final static IRI p_hasElevation = IRI.create(s_p_hasElevation);
    /**
     * Contains the Emergency contact name (e.g. the name of the agency) and phone number (min required)
     * 
     */
    public final static String s_p_hasEmergencyContact = "https://onerecord.iata.org/ns/cargo#hasEmergencyContact";
    public final static IRI p_hasEmergencyContact = IRI.create(s_p_hasEmergencyContact);
    /**
     * Branch/Company
     * 
     */
    public final static String s_p_hasEntity = "https://onerecord.iata.org/ns/cargo#hasEntity";
    public final static IRI p_hasEntity = IRI.create(s_p_hasEntity);
    /**
     * Reference to the Epermit of the consignment
     * 
     */
    public final static String s_p_hasEpermit = "https://onerecord.iata.org/ns/cargo#hasEpermit";
    public final static IRI p_hasEpermit = IRI.create(s_p_hasEpermit);
    /**
     * Reference to the pieces and properties linked to the Permit (box 7 to 12)
     * 
     */
    public final static String s_p_hasEpermitConsignment = "https://onerecord.iata.org/ns/cargo#hasEpermitConsignment";
    public final static IRI p_hasEpermitConsignment = IRI.create(s_p_hasEpermitConsignment);
    /**
     * List of all the signatures of the Epermit (applicant box 4, issuing authority box 6, issuer box 13 and examining authority box 14)
     * 
     */
    public final static String s_p_hasEpermitSignature = "https://onerecord.iata.org/ns/cargo#hasEpermitSignature";
    public final static IRI p_hasEpermitSignature = IRI.create(s_p_hasEpermitSignature);
    /**
     * Quatity measured by the examining authority (box 14)
     * 
     */
    public final static String s_p_hasExaminingQuantity = "https://onerecord.iata.org/ns/cargo#hasExaminingQuantity";
    public final static IRI p_hasExaminingQuantity = IRI.create(s_p_hasExaminingQuantity);
    /**
     * Locations of excluded Via Points
     * 
     */
    public final static String s_p_hasExcludedViaPoint = "https://onerecord.iata.org/ns/cargo#hasExcludedViaPoint";
    public final static IRI p_hasExcludedViaPoint = IRI.create(s_p_hasExcludedViaPoint);
    /**
     * Country of last re-export (box 12a)
     * 
     */
    public final static String s_p_hasExportTradeCountry = "https://onerecord.iata.org/ns/cargo#hasExportTradeCountry";
    public final static IRI p_hasExportTradeCountry = IRI.create(s_p_hasExportTradeCountry);
    /**
     * References to all associated ExternalReferences
     * 
     */
    public final static String s_p_hasExternalReference = "https://onerecord.iata.org/ns/cargo#hasExternalReference";
    public final static IRI p_hasExternalReference = IRI.create(s_p_hasExternalReference);
    /**
     * Reference to the Organization that fulfills the role of the freight forwarder
     * 
     */
    public final static String s_p_hasFreightForwarder = "https://onerecord.iata.org/ns/cargo#hasFreightForwarder";
    public final static IRI p_hasFreightForwarder = IRI.create(s_p_hasFreightForwarder);
    /**
     * Typical fuel comsumption (e.g. 20 000L / 1 000nm)
     * 
     */
    public final static String s_p_hasFuelConsumption = "https://onerecord.iata.org/ns/cargo#hasFuelConsumption";
    public final static IRI p_hasFuelConsumption = IRI.create(s_p_hasFuelConsumption);
    /**
     * Geolocation details
     * 
     */
    public final static String s_p_hasGeolocation = "https://onerecord.iata.org/ns/cargo#hasGeolocation";
    public final static IRI p_hasGeolocation = IRI.create(s_p_hasGeolocation);
    /**
     * Weight details
     * 
     */
    public final static String s_p_hasGrossWeight = "https://onerecord.iata.org/ns/cargo#hasGrossWeight";
    public final static IRI p_hasGrossWeight = IRI.create(s_p_hasGrossWeight);
    /**
     * Links to Handling instructions / service requests of the piece
     * 
     */
    public final static String s_p_hasHandlingInstructions = "https://onerecord.iata.org/ns/cargo#hasHandlingInstructions";
    public final static IRI p_hasHandlingInstructions = IRI.create(s_p_hasHandlingInstructions);
    /**
     * Information about preferred HandlingInstructions for the BookingShipment
     * 
     */
    public final static String s_p_hasHandlingPreference = "https://onerecord.iata.org/ns/cargo#hasHandlingPreference";
    public final static IRI p_hasHandlingPreference = IRI.create(s_p_hasHandlingPreference);
    /**
     * Height
     * 
     */
    public final static String s_p_hasHeight = "https://onerecord.iata.org/ns/cargo#hasHeight";
    public final static IRI p_hasHeight = IRI.create(s_p_hasHeight);
    /**
     * Refers to the Waybill(s) contained
     * 
     */
    public final static String s_p_hasHouseWaybill = "https://onerecord.iata.org/ns/cargo#hasHouseWaybill";
    public final static IRI p_hasHouseWaybill = IRI.create(s_p_hasHouseWaybill);
    /**
     * Insurance details
     * 
     */
    public final static String s_p_hasInsurance = "https://onerecord.iata.org/ns/cargo#hasInsurance";
    public final static IRI p_hasInsurance = IRI.create(s_p_hasInsurance);
    /**
     * DgRadioactiveIsotope.
     * 
     */
    public final static String s_p_hasIsotope = "https://onerecord.iata.org/ns/cargo#hasIsotope";
    public final static IRI p_hasIsotope = IRI.create(s_p_hasIsotope);
    /**
     * Regulated entity issuing the Security Declaration
     * 
     */
    public final static String s_p_hasIssuingRegulatedEntity = "https://onerecord.iata.org/ns/cargo#hasIssuingRegulatedEntity";
    public final static IRI p_hasIssuingRegulatedEntity = IRI.create(s_p_hasIssuingRegulatedEntity);
    /**
     * Quantity of the item when applicable, with associated units of measure
     * 
     */
    public final static String s_p_hasItemQuantity = "https://onerecord.iata.org/ns/cargo#hasItemQuantity";
    public final static IRI p_hasItemQuantity = IRI.create(s_p_hasItemQuantity);
    /**
     * Reference to an ExternalReference holding a legacy templats outside of ONE Record, such as a photo or pdf of a checksheet
     * 
     */
    public final static String s_p_hasLegacyTemplate = "https://onerecord.iata.org/ns/cargo#hasLegacyTemplate";
    public final static IRI p_hasLegacyTemplate = IRI.create(s_p_hasLegacyTemplate);
    /**
     * Length
     * 
     */
    public final static String s_p_hasLength = "https://onerecord.iata.org/ns/cargo#hasLength";
    public final static IRI p_hasLength = IRI.create(s_p_hasLength);
    /**
     * Details of contained (virtual) piece(s)
     * 
     */
    public final static String s_p_hasLoadedPiece = "https://onerecord.iata.org/ns/cargo#hasLoadedPiece";
    public final static IRI p_hasLoadedPiece = IRI.create(s_p_hasLoadedPiece);
    /**
     * References to all LoadingActions performed for the Loading Activity
     * 
     */
    public final static String s_p_hasLoadingAction = "https://onerecord.iata.org/ns/cargo#hasLoadingAction";
    public final static IRI p_hasLoadingAction = IRI.create(s_p_hasLoadingAction);
    /**
     * References to all Actions performed for the TransportMovement
     * 
     */
    public final static String s_p_hasLogisticsAction = "https://onerecord.iata.org/ns/cargo#hasLogisticsAction";
    public final static IRI p_hasLogisticsAction = IRI.create(s_p_hasLogisticsAction);
    /**
     * Events object
     * 
     */
    public final static String s_p_hasLogisticsEvent = "https://onerecord.iata.org/ns/cargo#hasLogisticsEvent";
    public final static IRI p_hasLogisticsEvent = IRI.create(s_p_hasLogisticsEvent);
    /**
     * Reference to the master Waybill if it is contained in one
     * 
     */
    public final static String s_p_hasMasterWaybill = "https://onerecord.iata.org/ns/cargo#hasMasterWaybill";
    public final static IRI p_hasMasterWaybill = IRI.create(s_p_hasMasterWaybill);
    /**
     * Information about the measured distance
     * 
     */
    public final static String s_p_hasMeasuredDistance = "https://onerecord.iata.org/ns/cargo#hasMeasuredDistance";
    public final static IRI p_hasMeasuredDistance = IRI.create(s_p_hasMeasuredDistance);
    /**
     * Information about the measured fuel amount
     * 
     */
    public final static String s_p_hasMeasuredFuelAmount = "https://onerecord.iata.org/ns/cargo#hasMeasuredFuelAmount";
    public final static IRI p_hasMeasuredFuelAmount = IRI.create(s_p_hasMeasuredFuelAmount);
    /**
     * Value for measurements other than Geolocation, includes value and unit of measure as described in the Interactive Cargo RP
     * 
     */
    public final static String s_p_hasMeasurement = "https://onerecord.iata.org/ns/cargo#hasMeasurement";
    public final static IRI p_hasMeasurement = IRI.create(s_p_hasMeasurement);
    /**
     * Information about all non-Geolocation values of the measurement
     * 
     */
    public final static String s_p_hasMeasurementValue = "https://onerecord.iata.org/ns/cargo#hasMeasurementValue";
    public final static IRI p_hasMeasurementValue = IRI.create(s_p_hasMeasurementValue);
    /**
     * Reference to all Movement Times such as Departure, Arrival, etc.
     * 
     */
    public final static String s_p_hasMovementTimes = "https://onerecord.iata.org/ns/cargo#hasMovementTimes";
    public final static IRI p_hasMovementTimes = IRI.create(s_p_hasMovementTimes);
    /**
     * The total net weight of dangerous goods transported of this line item. For air transport the value must be the volume or mass in each package.
     * 
     */
    public final static String s_p_hasNetWeightMeasure = "https://onerecord.iata.org/ns/cargo#hasNetWeightMeasure";
    public final static IRI p_hasNetWeightMeasure = IRI.create(s_p_hasNetWeightMeasure);
    /**
     * Reference to the Company
     * 
     */
    public final static String s_p_hasOrganization = "https://onerecord.iata.org/ns/cargo#hasOrganization";
    public final static IRI p_hasOrganization = IRI.create(s_p_hasOrganization);
    /**
     * country of origin (box 12)
     * 
     */
    public final static String s_p_hasOriginTradeCountry = "https://onerecord.iata.org/ns/cargo#hasOriginTradeCountry";
    public final static IRI p_hasOriginTradeCountry = IRI.create(s_p_hasOriginTradeCountry);
    /**
     * Document originator details and contacts
     * 
     */
    public final static String s_p_hasOriginator = "https://onerecord.iata.org/ns/cargo#hasOriginator";
    public final static IRI p_hasOriginator = IRI.create(s_p_hasOriginator);
    public final static String s_p_hasOtherIdentifier = "https://onerecord.iata.org/ns/cargo#hasOtherIdentifier";
    public final static IRI p_hasOtherIdentifier = IRI.create(s_p_hasOtherIdentifier);
    /**
     * Any other regulated entity that accepts custody of the cargo and accepts the security status originally issued
     * 
     */
    public final static String s_p_hasOtherRegulatedEntity = "https://onerecord.iata.org/ns/cargo#hasOtherRegulatedEntity";
    public final static IRI p_hasOtherRegulatedEntity = IRI.create(s_p_hasOtherRegulatedEntity);
    /**
     * Packaging details 
     * 
     */
    public final static String s_p_hasPackagingType = "https://onerecord.iata.org/ns/cargo#hasPackagingType";
    public final static IRI p_hasPackagingType = IRI.create(s_p_hasPackagingType);
    /**
     * Reference to the parent Organization
     * 
     */
    public final static String s_p_hasParentOrganization = "https://onerecord.iata.org/ns/cargo#hasParentOrganization";
    public final static IRI p_hasParentOrganization = IRI.create(s_p_hasParentOrganization);
    /**
     * Actual payload for the transport
     * 
     */
    public final static String s_p_hasPayload = "https://onerecord.iata.org/ns/cargo#hasPayload";
    public final static IRI p_hasPayload = IRI.create(s_p_hasPayload);
    /**
     * Price of the Booking (if different from the offer)
     * 
     */
    public final static String s_p_hasPrice = "https://onerecord.iata.org/ns/cargo#hasPrice";
    public final static IRI p_hasPrice = IRI.create(s_p_hasPrice);
    /**
     * Production country details
     * 
     */
    public final static String s_p_hasProductionCountry = "https://onerecord.iata.org/ns/cargo#hasProductionCountry";
    public final static IRI p_hasProductionCountry = IRI.create(s_p_hasProductionCountry);
    /**
     * References to all Questions that are part of this template
     * 
     */
    public final static String s_p_hasQuestion = "https://onerecord.iata.org/ns/cargo#hasQuestion";
    public final static IRI p_hasQuestion = IRI.create(s_p_hasQuestion);
    /**
     * Reference to the ranges
     * 
     */
    public final static String s_p_hasRange = "https://onerecord.iata.org/ns/cargo#hasRange";
    public final static IRI p_hasRange = IRI.create(s_p_hasRange);
    /**
     * Rating used for pricing
     * 
     */
    public final static String s_p_hasRatings = "https://onerecord.iata.org/ns/cargo#hasRatings";
    public final static IRI p_hasRatings = IRI.create(s_p_hasRatings);
    /**
     * Ratings preferences of the request
     * 
     */
    public final static String s_p_hasRatingsPreference = "https://onerecord.iata.org/ns/cargo#hasRatingsPreference";
    public final static IRI p_hasRatingsPreference = IRI.create(s_p_hasRatingsPreference);
    /**
     * Reference to the Geolocation recorded of the measurement
     * 
     */
    public final static String s_p_hasRecordedGeolocation = "https://onerecord.iata.org/ns/cargo#hasRecordedGeolocation";
    public final static IRI p_hasRecordedGeolocation = IRI.create(s_p_hasRecordedGeolocation);
    /**
     * Reference to the Measurements recorded by the Sensor
     * 
     */
    public final static String s_p_hasRecordedMeasurement = "https://onerecord.iata.org/ns/cargo#hasRecordedMeasurement";
    public final static IRI p_hasRecordedMeasurement = IRI.create(s_p_hasRecordedMeasurement);
    /**
     * Reference to the measurements recorded by the geolocation sensor
     * 
     */
    public final static String s_p_hasRecordedMeasurementGeoloc = "https://onerecord.iata.org/ns/cargo#hasRecordedMeasurementGeoloc";
    public final static IRI p_hasRecordedMeasurementGeoloc = IRI.create(s_p_hasRecordedMeasurementGeoloc);
    /**
     * Reference to the measurements recorded by the sensor
     * 
     */
    public final static String s_p_hasRecordedMeasurementOther = "https://onerecord.iata.org/ns/cargo#hasRecordedMeasurementOther";
    public final static IRI p_hasRecordedMeasurementOther = IRI.create(s_p_hasRecordedMeasurementOther);
    /**
     * Regulated entity identifier (e.g. Regulated Agent Identifier) is mandatory
     * 
     */
    public final static String s_p_hasRegulatedEntityIdentifier = "https://onerecord.iata.org/ns/cargo#hasRegulatedEntityIdentifier";
    public final static IRI p_hasRegulatedEntityIdentifier = IRI.create(s_p_hasRegulatedEntityIdentifier);
    /**
     * Information about a result Value of any kind of the Check
     * 
     */
    public final static String s_p_hasResultValue = "https://onerecord.iata.org/ns/cargo#hasResultValue";
    public final static IRI p_hasResultValue = IRI.create(s_p_hasResultValue);
    /**
     * Routing details of the offer, to be compared with routing preferences of the quote request
     * 
     */
    public final static String s_p_hasRoutingDetails = "https://onerecord.iata.org/ns/cargo#hasRoutingDetails";
    public final static IRI p_hasRoutingDetails = IRI.create(s_p_hasRoutingDetails);
    /**
     * Routing details that are part of the request, these details will be used to determine if the offer is a perfect match
     * 
     */
    public final static String s_p_hasRoutingPreference = "https://onerecord.iata.org/ns/cargo#hasRoutingPreference";
    public final static IRI p_hasRoutingPreference = IRI.create(s_p_hasRoutingPreference);
    /**
     * Scheduled Legs class to be used to identify legs. Can be used with Booking Option Request as an indicator of preferred Routing or with Booking Option when a carrier proposes a specific Routing.
     * 
     */
    public final static String s_p_hasScheduledLegs = "https://onerecord.iata.org/ns/cargo#hasScheduledLegs";
    public final static IRI p_hasScheduledLegs = IRI.create(s_p_hasScheduledLegs);
    /**
     * Security details of the piece
     * 
     */
    public final static String s_p_hasSecurityDetails = "https://onerecord.iata.org/ns/cargo#hasSecurityDetails";
    public final static IRI p_hasSecurityDetails = IRI.create(s_p_hasSecurityDetails);
    /**
     * Information about the Activities that are part of the Service and their sequence
     * 
     */
    public final static String s_p_hasSequencedActivity = "https://onerecord.iata.org/ns/cargo#hasSequencedActivity";
    public final static IRI p_hasSequencedActivity = IRI.create(s_p_hasSequencedActivity);
    /**
     * Security requests
     * 
     */
    public final static String s_p_hasServiceRequest = "https://onerecord.iata.org/ns/cargo#hasServiceRequest";
    public final static IRI p_hasServiceRequest = IRI.create(s_p_hasServiceRequest);
    /**
     * Reference to the Shipment
     * 
     */
    public final static String s_p_hasShipment = "https://onerecord.iata.org/ns/cargo#hasShipment";
    public final static IRI p_hasShipment = IRI.create(s_p_hasShipment);
    /**
     * Details of the shipment that is to be shipped
     * 
     */
    public final static String s_p_hasShipmentDetails = "https://onerecord.iata.org/ns/cargo#hasShipmentDetails";
    public final static IRI p_hasShipmentDetails = IRI.create(s_p_hasShipmentDetails);
    /**
     * Reference to the Organization that fulfills the role of the shipper
     * 
     */
    public final static String s_p_hasShipper = "https://onerecord.iata.org/ns/cargo#hasShipper";
    public final static IRI p_hasShipper = IRI.create(s_p_hasShipper);
    /**
     * Signatory company name
     * 
     */
    public final static String s_p_hasSignatoryCompany = "https://onerecord.iata.org/ns/cargo#hasSignatoryCompany";
    public final static IRI p_hasSignatoryCompany = IRI.create(s_p_hasSignatoryCompany);
    /**
     * References to all StoringActions performed for the Storing Activity
     * 
     */
    public final static String s_p_hasStoringActions = "https://onerecord.iata.org/ns/cargo#hasStoringActions";
    public final static IRI p_hasStoringActions = IRI.create(s_p_hasStoringActions);
    /**
     * References to all sub-Organizations
     * 
     */
    public final static String s_p_hasSubOrganization = "https://onerecord.iata.org/ns/cargo#hasSubOrganization";
    public final static IRI p_hasSubOrganization = IRI.create(s_p_hasSubOrganization);
    /**
     * Tare weight of the empty ULD
     * 
     */
    public final static String s_p_hasTareWeight = "https://onerecord.iata.org/ns/cargo#hasTareWeight";
    public final static IRI p_hasTareWeight = IRI.create(s_p_hasTareWeight);
    /**
     * Item target country
     * 
     */
    public final static String s_p_hasTargetCountry = "https://onerecord.iata.org/ns/cargo#hasTargetCountry";
    public final static IRI p_hasTargetCountry = IRI.create(s_p_hasTargetCountry);
    /**
     * Tax due Agent (VAT/GST on Commission). Total VAT/TAX amount payable by airline to agent
     * 
     */
    public final static String s_p_hasTaxDueAgent = "https://onerecord.iata.org/ns/cargo#hasTaxDueAgent";
    public final static IRI p_hasTaxDueAgent = IRI.create(s_p_hasTaxDueAgent);
    /**
     * Tax due Airline (as per AWB, or VAT/GST as per invoice). Total VAT/TAX amount payable by agent to airline
     * 
     */
    public final static String s_p_hasTaxDueAirline = "https://onerecord.iata.org/ns/cargo#hasTaxDueAirline";
    public final static IRI p_hasTaxDueAirline = IRI.create(s_p_hasTaxDueAirline);
    /**
     * Regulated entity that tendered the consignment
     * 
     */
    public final static String s_p_hasTenderingRegulatedEntity = "https://onerecord.iata.org/ns/cargo#hasTenderingRegulatedEntity";
    public final static IRI p_hasTenderingRegulatedEntity = IRI.create(s_p_hasTenderingRegulatedEntity);
    /**
     * Schedule preferences of the request
     * 
     */
    public final static String s_p_hasTimePreferences = "https://onerecord.iata.org/ns/cargo#hasTimePreferences";
    public final static IRI p_hasTimePreferences = IRI.create(s_p_hasTimePreferences);
    /**
     * Dimensions of the whole shipment
     * 
     */
    public final static String s_p_hasTotalDimensions = "https://onerecord.iata.org/ns/cargo#hasTotalDimensions";
    public final static IRI p_hasTotalDimensions = IRI.create(s_p_hasTotalDimensions);
    /**
     * Total gross weight of the whole shipment
     * 
     */
    public final static String s_p_hasTotalGrossWeight = "https://onerecord.iata.org/ns/cargo#hasTotalGrossWeight";
    public final static IRI p_hasTotalGrossWeight = IRI.create(s_p_hasTotalGrossWeight);
    /**
     * Reference to the result of the Check
     * 
     */
    public final static String s_p_hasTotalResult = "https://onerecord.iata.org/ns/cargo#hasTotalResult";
    public final static IRI p_hasTotalResult = IRI.create(s_p_hasTotalResult);
    /**
     * Volumetric weight of the whole shipment
     * 
     */
    public final static String s_p_hasTotalVolumetricWeight = "https://onerecord.iata.org/ns/cargo#hasTotalVolumetricWeight";
    public final static IRI p_hasTotalVolumetricWeight = IRI.create(s_p_hasTotalVolumetricWeight);
    /**
     * Product price per unit in the base
     * 
     */
    public final static String s_p_hasUnitPrice = "https://onerecord.iata.org/ns/cargo#hasUnitPrice";
    public final static IRI p_hasUnitPrice = IRI.create(s_p_hasUnitPrice);
    /**
     * Unit preferences of the request (e.g. kg or cm)
     * 
     */
    public final static String s_p_hasUnitsPreference = "https://onerecord.iata.org/ns/cargo#hasUnitsPreference";
    public final static IRI p_hasUnitsPreference = IRI.create(s_p_hasUnitsPreference);
    /**
     * Volume
     * 
     */
    public final static String s_p_hasVolume = "https://onerecord.iata.org/ns/cargo#hasVolume";
    public final static IRI p_hasVolume = IRI.create(s_p_hasVolume);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_p_hasVolumetricWeight = "https://onerecord.iata.org/ns/cargo#hasVolumetricWeight";
    public final static IRI p_hasVolumetricWeight = IRI.create(s_p_hasVolumetricWeight);
    /**
     * Reference to the Waybill of the shipment
     * 
     */
    public final static String s_p_hasWaybill = "https://onerecord.iata.org/ns/cargo#hasWaybill";
    public final static IRI p_hasWaybill = IRI.create(s_p_hasWaybill);
    /**
     * Weight of the item
     * 
     */
    public final static String s_p_hasWeight = "https://onerecord.iata.org/ns/cargo#hasWeight";
    public final static IRI p_hasWeight = IRI.create(s_p_hasWeight);
    /**
     * Width
     * 
     */
    public final static String s_p_hasWidth = "https://onerecord.iata.org/ns/cargo#hasWidth";
    public final static IRI p_hasWidth = IRI.create(s_p_hasWidth);
    /**
     * Dg Radioactive Material
     * 
     */
    public final static String s_p_includesDgRadioactiveMaterial = "https://onerecord.iata.org/ns/cargo#includesDgRadioactiveMaterial";
    public final static IRI p_includesDgRadioactiveMaterial = IRI.create(s_p_includesDgRadioactiveMaterial);
    /**
     * Reference to the shipment insured
     * 
     */
    public final static String s_p_insuresShipment = "https://onerecord.iata.org/ns/cargo#insuresShipment";
    public final static IRI p_insuresShipment = IRI.create(s_p_insuresShipment);
    /**
     * Information about other Parties involved depending on the context of use
     * 
     */
    public final static String s_p_involvesParty = "https://onerecord.iata.org/ns/cargo#involvesParty";
    public final static IRI p_involvesParty = IRI.create(s_p_involvesParty);
    /**
     * Reference to the Question the Answer is for
     * 
     */
    public final static String s_p_isAnswerFor = "https://onerecord.iata.org/ns/cargo#isAnswerFor";
    public final static IRI p_isAnswerFor = IRI.create(s_p_isAnswerFor);
    /**
     * Reference to the Booking option request
     * 
     */
    public final static String s_p_isAnsweringToRequest = "https://onerecord.iata.org/ns/cargo#isAnsweringToRequest";
    public final static IRI p_isAnsweringToRequest = IRI.create(s_p_isAnsweringToRequest);
    /**
     * Piece on which the Packaging type is applicable
     * 
     */
    public final static String s_p_isAppliedOnPiece = "https://onerecord.iata.org/ns/cargo#isAppliedOnPiece";
    public final static IRI p_isAppliedOnPiece = IRI.create(s_p_isAppliedOnPiece);
    /**
     * Refers to the Branch the person is associated with
     * 
     */
    public final static String s_p_isAssociatedWithBranch = "https://onerecord.iata.org/ns/cargo#isAssociatedWithBranch";
    public final static IRI p_isAssociatedWithBranch = IRI.create(s_p_isAssociatedWithBranch);
    /**
     * Reference to the Organization the Actor is associated with
     * 
     */
    public final static String s_p_isAssociatedWithOrganization = "https://onerecord.iata.org/ns/cargo#isAssociatedWithOrganization";
    public final static IRI p_isAssociatedWithOrganization = IRI.create(s_p_isAssociatedWithOrganization);
    /**
     * Reference to the PhysicalLogisticsObject the IotDevice is attached to
     * 
     */
    public final static String s_p_isAttachedToObject = "https://onerecord.iata.org/ns/cargo#isAttachedToObject";
    public final static IRI p_isAttachedToObject = IRI.create(s_p_isAttachedToObject);
    /**
     * Reference to the Location where the Organization is based at or headquartered
     * 
     */
    public final static String s_p_isBasedAt = "https://onerecord.iata.org/ns/cargo#isBasedAt";
    public final static IRI p_isBasedAt = IRI.create(s_p_isBasedAt);
    /**
     * Reference to the Actor certifying the result of the Check if required
     * 
     */
    public final static String s_p_isCertifiedByActor = "https://onerecord.iata.org/ns/cargo#isCertifiedByActor";
    public final static IRI p_isCertifiedByActor = IRI.create(s_p_isCertifiedByActor);
    /**
     * Reference to the DgProductRadioactive this Isotope is contained in
     * 
     */
    public final static String s_p_isContainedInDgProductRadioactive = "https://onerecord.iata.org/ns/cargo#isContainedInDgProductRadioactive";
    public final static IRI p_isContainedInDgProductRadioactive = IRI.create(s_p_isContainedInDgProductRadioactive);
    /**
     * URI of the PIECE that contains the Item
     * 
     */
    public final static String s_p_isContainedItemInPiece = "https://onerecord.iata.org/ns/cargo#isContainedItemInPiece";
    public final static IRI p_isContainedItemInPiece = IRI.create(s_p_isContainedItemInPiece);
    /**
     * Reference to the parent Piece if the Piece is contained within another Piece
     * 
     */
    public final static String s_p_isContainedPieceInPiece = "https://onerecord.iata.org/ns/cargo#isContainedPieceInPiece";
    public final static IRI p_isContainedPieceInPiece = IRI.create(s_p_isContainedPieceInPiece);
    /**
     * Party covering the insurance 
     * 
     */
    public final static String s_p_isCoveredBy = "https://onerecord.iata.org/ns/cargo#isCoveredBy";
    public final static IRI p_isCoveredBy = IRI.create(s_p_isCoveredBy);
    /**
     * Location of the document, e.g. location where the document was emitted
     * 
     */
    public final static String s_p_isCreatedAt = "https://onerecord.iata.org/ns/cargo#isCreatedAt";
    public final static IRI p_isCreatedAt = IRI.create(s_p_isCreatedAt);
    /**
     * URI of the product
     * 
     */
    public final static String s_p_isDescribedByProduct = "https://onerecord.iata.org/ns/cargo#isDescribedByProduct";
    public final static IRI p_isDescribedByProduct = IRI.create(s_p_isDescribedByProduct);
    /**
     * Refers to the URI of the linked object(s)
     * 
     */
    public final static String s_p_isEventForObject = "https://onerecord.iata.org/ns/cargo#isEventForObject";
    public final static IRI p_isEventForObject = IRI.create(s_p_isEventForObject);
    /**
     * Reference to the Booking or Offer
     * 
     */
    public final static String s_p_isForBooking = "https://onerecord.iata.org/ns/cargo#isForBooking";
    public final static IRI p_isForBooking = IRI.create(s_p_isForBooking);
    /**
     * Reference to the BookingOptionRequest the LogisticsObject is detailling
     * 
     */
    public final static String s_p_isForBookingOption = "https://onerecord.iata.org/ns/cargo#isForBookingOption";
    public final static IRI p_isForBookingOption = IRI.create(s_p_isForBookingOption);
    /**
     * Reference to the BookingOptionRequest the information of the LogisticsObject is detailling
     * 
     */
    public final static String s_p_isForBookingOptionRequest = "https://onerecord.iata.org/ns/cargo#isForBookingOptionRequest";
    public final static IRI p_isForBookingOptionRequest = IRI.create(s_p_isForBookingOptionRequest);
    /**
     * Reference to the BookingOptionRequest the LogisticsObject is detailling
     * 
     */
    public final static String s_p_isForBookingRequested = "https://onerecord.iata.org/ns/cargo#isForBookingRequested";
    public final static IRI p_isForBookingRequested = IRI.create(s_p_isForBookingRequested);
    /**
     * Reference to the Prices based on this Ratings
     * 
     */
    public final static String s_p_isForPrice = "https://onerecord.iata.org/ns/cargo#isForPrice";
    public final static IRI p_isForPrice = IRI.create(s_p_isForPrice);
    /**
     * Carrier details
     * 
     */
    public final static String s_p_isFromCarrier = "https://onerecord.iata.org/ns/cargo#isFromCarrier";
    public final static IRI p_isFromCarrier = IRI.create(s_p_isFromCarrier);
    /**
     * Reference to the Location from which the Question was answered, relevant for split checks with documentary and physical elements
     * 
     */
    public final static String s_p_isGivenAt = "https://onerecord.iata.org/ns/cargo#isGivenAt";
    public final static IRI p_isGivenAt = IRI.create(s_p_isGivenAt);
    /**
     * Reference to the Actor giving the Answer
     * 
     */
    public final static String s_p_isGivenByActor = "https://onerecord.iata.org/ns/cargo#isGivenByActor";
    public final static IRI p_isGivenByActor = IRI.create(s_p_isGivenByActor);
    /**
     * References to the Actions the object is involved in
     * 
     */
    public final static String s_p_isInvolvedInLogisticsAction = "https://onerecord.iata.org/ns/cargo#isInvolvedInLogisticsAction";
    public final static IRI p_isInvolvedInLogisticsAction = IRI.create(s_p_isInvolvedInLogisticsAction);
    /**
     * Name of person (or employee ID) who issued the security status
     * 
     */
    public final static String s_p_isIssuedByActor = "https://onerecord.iata.org/ns/cargo#isIssuedByActor";
    public final static IRI p_isIssuedByActor = IRI.create(s_p_isIssuedByActor);
    /**
     * Reference to the Piece the document was issued for
     * 
     */
    public final static String s_p_isIssuedForPiece = "https://onerecord.iata.org/ns/cargo#isIssuedForPiece";
    public final static IRI p_isIssuedForPiece = IRI.create(s_p_isIssuedForPiece);
    /**
     * Reference to the Waybill object
     * 
     */
    public final static String s_p_isIssuedForWaybill = "https://onerecord.iata.org/ns/cargo#isIssuedForWaybill";
    public final static IRI p_isIssuedForWaybill = IRI.create(s_p_isIssuedForWaybill);
    /**
     * ULD on which the (virtual) piece has been loaded into - URIs of the ULD
     * 
     */
    public final static String s_p_isLoadedOnULD = "https://onerecord.iata.org/ns/cargo#isLoadedOnULD";
    public final static IRI p_isLoadedOnULD = IRI.create(s_p_isLoadedOnULD);
    /**
     * References to the Actions happening at the Location
     * 
     */
    public final static String s_p_isLocationOfAction = "https://onerecord.iata.org/ns/cargo#isLocationOfAction";
    public final static IRI p_isLocationOfAction = IRI.create(s_p_isLocationOfAction);
    /**
     * Manufacturing company details and contacts
     * 
     */
    public final static String s_p_isManufacturedBy = "https://onerecord.iata.org/ns/cargo#isManufacturedBy";
    public final static IRI p_isManufacturedBy = IRI.create(s_p_isManufacturedBy);
    /**
     * Reference to the Carrier products included in the offer
     * 
     */
    public final static String s_p_isOfCarrierProduct = "https://onerecord.iata.org/ns/cargo#isOfCarrierProduct";
    public final static IRI p_isOfCarrierProduct = IRI.create(s_p_isOfCarrierProduct);
    /**
     * Transport Movements on which the object is transported
     * 
     */
    public final static String s_p_isOnTransportMovements = "https://onerecord.iata.org/ns/cargo#isOnTransportMovements";
    public final static IRI p_isOnTransportMovements = IRI.create(s_p_isOnTransportMovements);
    /**
     * Company operating the transport means
     * 
     */
    public final static String s_p_isOperatedBy = "https://onerecord.iata.org/ns/cargo#isOperatedBy";
    public final static IRI p_isOperatedBy = IRI.create(s_p_isOperatedBy);
    /**
     * Reference to the TransportMeans operating the TransportMovement
     * 
     */
    public final static String s_p_isOperatedByTransportMeans = "https://onerecord.iata.org/ns/cargo#isOperatedByTransportMeans";
    public final static IRI p_isOperatedByTransportMeans = IRI.create(s_p_isOperatedByTransportMeans);
    /**
     * Reference to the Activity the Action was performed for
     * 
     */
    public final static String s_p_isPartOfActivity = "https://onerecord.iata.org/ns/cargo#isPartOfActivity";
    public final static IRI p_isPartOfActivity = IRI.create(s_p_isPartOfActivity);
    /**
     * Reference to the CheckTemplate the Question is from
     * 
     */
    public final static String s_p_isPartOfCheckTemplate = "https://onerecord.iata.org/ns/cargo#isPartOfCheckTemplate";
    public final static IRI p_isPartOfCheckTemplate = IRI.create(s_p_isPartOfCheckTemplate);
    /**
     * Refers to the mother company of the branch
     * 
     */
    public final static String s_p_isPartOfCompany = "https://onerecord.iata.org/ns/cargo#isPartOfCompany";
    public final static IRI p_isPartOfCompany = IRI.create(s_p_isPartOfCompany);
    /**
     * Reference to the IoT Device to which the sensor is linked
     * 
     */
    public final static String s_p_isPartOfIotDevice = "https://onerecord.iata.org/ns/cargo#isPartOfIotDevice";
    public final static IRI p_isPartOfIotDevice = IRI.create(s_p_isPartOfIotDevice);
    /**
     * Reference to Services this Activity is executed for
     * 
     */
    public final static String s_p_isPartOfService = "https://onerecord.iata.org/ns/cargo#isPartOfService";
    public final static IRI p_isPartOfService = IRI.create(s_p_isPartOfService);
    /**
     * Shipment on which the piece is assigned to
     * 
     */
    public final static String s_p_isPartOfShipment = "https://onerecord.iata.org/ns/cargo#isPartOfShipment";
    public final static IRI p_isPartOfShipment = IRI.create(s_p_isPartOfShipment);
    /**
     * Reference to the Location the Action was performed at
     * 
     */
    public final static String s_p_isPerformedAt = "https://onerecord.iata.org/ns/cargo#isPerformedAt";
    public final static IRI p_isPerformedAt = IRI.create(s_p_isPerformedAt);
    /**
     * Reference to the Actor performing the Check
     * 
     */
    public final static String s_p_isPerformedByActor = "https://onerecord.iata.org/ns/cargo#isPerformedByActor";
    public final static IRI p_isPerformedByActor = IRI.create(s_p_isPerformedByActor);
    /**
     * Reference to the checked Object
     * 
     */
    public final static String s_p_isPerformedOn = "https://onerecord.iata.org/ns/cargo#isPerformedOn";
    public final static IRI p_isPerformedOn = IRI.create(s_p_isPerformedOn);
    /**
     * Reference to the BookingOptionRequests
     * 
     */
    public final static String s_p_isPreferenceOfRequests = "https://onerecord.iata.org/ns/cargo#isPreferenceOfRequests";
    public final static IRI p_isPreferenceOfRequests = IRI.create(s_p_isPreferenceOfRequests);
    /**
     * Location of event
     * 
     */
    public final static String s_p_isRecordedAt = "https://onerecord.iata.org/ns/cargo#isRecordedAt";
    public final static IRI p_isRecordedAt = IRI.create(s_p_isRecordedAt);
    /**
     * Party performing the event
     * 
     */
    public final static String s_p_isRecordedBy = "https://onerecord.iata.org/ns/cargo#isRecordedBy";
    public final static IRI p_isRecordedBy = IRI.create(s_p_isRecordedBy);
    public final static String s_p_isRecordedByActor = "https://onerecord.iata.org/ns/cargo#isRecordedByActor";
    public final static IRI p_isRecordedByActor = IRI.create(s_p_isRecordedByActor);
    /**
     * Refers to the person that requests the handling/service
     * 
     */
    public final static String s_p_isRequestedByActor = "https://onerecord.iata.org/ns/cargo#isRequestedByActor";
    public final static IRI p_isRequestedByActor = IRI.create(s_p_isRequestedByActor);
    /**
     * Details of contained piece(s)
     * 
     */
    public final static String s_p_isShipmentOfPiece = "https://onerecord.iata.org/ns/cargo#isShipmentOfPiece";
    public final static IRI p_isShipmentOfPiece = IRI.create(s_p_isShipmentOfPiece);
    /**
     * References to Materials onloaded or offloaded
     * 
     */
    public final static String s_p_loadsLoadingMaterial = "https://onerecord.iata.org/ns/cargo#loadsLoadingMaterial";
    public final static IRI p_loadsLoadingMaterial = IRI.create(s_p_loadsLoadingMaterial);
    /**
     * References to LoadingUnits onloaded or offloaded
     * 
     */
    public final static String s_p_loadsLoadingUnit = "https://onerecord.iata.org/ns/cargo#loadsLoadingUnit";
    public final static IRI p_loadsLoadingUnit = IRI.create(s_p_loadsLoadingUnit);
    /**
     * Reference to the TransportMeans that is being onloaded or offloaded
     * 
     */
    public final static String s_p_loadsOnTransportMeans = "https://onerecord.iata.org/ns/cargo#loadsOnTransportMeans";
    public final static IRI p_loadsOnTransportMeans = IRI.create(s_p_loadsOnTransportMeans);
    /**
     * References to Pieces onloaded or offloaded
     * 
     */
    public final static String s_p_loadsPiece = "https://onerecord.iata.org/ns/cargo#loadsPiece";
    public final static IRI p_loadsPiece = IRI.create(s_p_loadsPiece);
    /**
     * Transport Movement on which the Transport Means is used
     * 
     */
    public final static String s_p_operatesTransportMovement = "https://onerecord.iata.org/ns/cargo#operatesTransportMovement";
    public final static IRI p_operatesTransportMovement = IRI.create(s_p_operatesTransportMovement);
    /**
     * Refers to the Booking
     * 
     */
    public final static String s_p_refersToBookingOption = "https://onerecord.iata.org/ns/cargo#refersToBookingOption";
    public final static IRI p_refersToBookingOption = IRI.create(s_p_refersToBookingOption);
    /**
     * References to the LogisticsObjects referring to this external reference
     * 
     */
    public final static String s_p_refersToLogisticsObject = "https://onerecord.iata.org/ns/cargo#refersToLogisticsObject";
    public final static IRI p_refersToLogisticsObject = IRI.create(s_p_refersToLogisticsObject);
    /**
     * Transport segment linked to the offer, including the Departure and Arrival locations
     * 
     */
    public final static String s_p_refersToTransportMovement = "https://onerecord.iata.org/ns/cargo#refersToTransportMovement";
    public final static IRI p_refersToTransportMovement = IRI.create(s_p_refersToTransportMovement);
    /**
     * Special Handling details
     * 
     */
    public final static String s_p_requiresSpecialHandling = "https://onerecord.iata.org/ns/cargo#requiresSpecialHandling";
    public final static IRI p_requiresSpecialHandling = IRI.create(s_p_requiresSpecialHandling);
    /**
     * Reference to the Activity that is performed as part of a Service
     * 
     */
    public final static String s_p_sequencesActivity = "https://onerecord.iata.org/ns/cargo#sequencesActivity";
    public final static IRI p_sequencesActivity = IRI.create(s_p_sequencesActivity);
    /**
     * Reference to the Objects being stored in or stored out
     * 
     */
    public final static String s_p_storesObject = "https://onerecord.iata.org/ns/cargo#storesObject";
    public final static IRI p_storesObject = IRI.create(s_p_storesObject);
    /**
     * ULDs assigned to the transport segment
     * 
     */
    public final static String s_p_transportsLoadingUnit = "https://onerecord.iata.org/ns/cargo#transportsLoadingUnit";
    public final static IRI p_transportsLoadingUnit = IRI.create(s_p_transportsLoadingUnit);
    /**
     * Pieces assigned to the transport segment
     * 
     */
    public final static String s_p_transportsPiece = "https://onerecord.iata.org/ns/cargo#transportsPiece";
    public final static IRI p_transportsPiece = IRI.create(s_p_transportsPiece);
    /**
     * Reference to the Template used in the Check
     * 
     */
    public final static String s_p_usesTemplate = "https://onerecord.iata.org/ns/cargo#usesTemplate";
    public final static IRI p_usesTemplate = IRI.create(s_p_usesTemplate);
    /**
     * Department / Division / Unit
     * 
     */
    public final static String s_p_belongsToDepartment = "https://onerecord.iata.org/ns/cargo#belongsToDepartment";
    public final static IRI p_belongsToDepartment = IRI.create(s_p_belongsToDepartment);
    /**
     * Coload indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_canBeColoaded = "https://onerecord.iata.org/ns/cargo#canBeColoaded";
    public final static IRI p_canBeColoaded = IRI.create(s_p_canBeColoaded);
    /**
     * Text holding an ULD Type Code if the Piece fulfills it before UnitComposition
     * 
     */
    public final static String s_p_fulfillsUldTypeCode = "https://onerecord.iata.org/ns/cargo#fulfillsUldTypeCode";
    public final static IRI p_fulfillsUldTypeCode = IRI.create(s_p_fulfillsUldTypeCode);
    /**
     * Indicates the details of accounting information. Free text e.g. PAYMENT BY CERTIFIED CHEQUE etc.
     * 
     */
    public final static String s_p_hasAccountingInformation = "https://onerecord.iata.org/ns/cargo#hasAccountingInformation";
    public final static IRI p_hasAccountingInformation = IRI.create(s_p_hasAccountingInformation);
    /**
     * Defined in Resolution Conf. 13.6 and is required for pre-Convention specimens (box 12b)
     * 
     */
    public final static String s_p_hasAcquisitionDateTime = "https://onerecord.iata.org/ns/cargo#hasAcquisitionDateTime";
    public final static IRI p_hasAcquisitionDateTime = IRI.create(s_p_hasAcquisitionDateTime);
    /**
     * DateTime holding the end time of the Action; Type is indicated through ActionType property
     * 
     */
    public final static String s_p_hasActionEndTime = "https://onerecord.iata.org/ns/cargo#hasActionEndTime";
    public final static IRI p_hasActionEndTime = IRI.create(s_p_hasActionEndTime);
    /**
     * DateTime holding the start time of the Action; Type is indicated through ActionType property
     * 
     */
    public final static String s_p_hasActionStartTime = "https://onerecord.iata.org/ns/cargo#hasActionStartTime";
    public final static IRI p_hasActionStartTime = IRI.create(s_p_hasActionStartTime);
    /**
     * Numeric expression of the activity of a radioactive Item
     * 
     */
    public final static String s_p_hasActivityLevelMeasure = "https://onerecord.iata.org/ns/cargo#hasActivityLevelMeasure";
    public final static IRI p_hasActivityLevelMeasure = IRI.create(s_p_hasActivityLevelMeasure);
    /**
     * Identifies the subsidiary hazard class / division identification containing a numeric field separated by a decimal. There may be 0, 1 or 2 subsidiary risk classes or divisions. If there is more than one, each should be separated by a comma. The subsidiary risk must be shown in parentheses. 
     * 
     */
    public final static String s_p_hasAdditionalHazardClassificationIdentifier = "https://onerecord.iata.org/ns/cargo#hasAdditionalHazardClassificationIdentifier";
    public final static IRI p_hasAdditionalHazardClassificationIdentifier = IRI.create(s_p_hasAdditionalHazardClassificationIdentifier);
    /**
     * Any additional information that may be required by an ICAO Member State
     * 
     */
    public final static String s_p_hasAdditionalSecurityInformation = "https://onerecord.iata.org/ns/cargo#hasAdditionalSecurityInformation";
    public final static IRI p_hasAdditionalSecurityInformation = IRI.create(s_p_hasAdditionalSecurityInformation);
    /**
     * Address identifier using special coding systems e.g. US CBP FIRMS code
     * 
     */
    public final static String s_p_hasAddressCode = "https://onerecord.iata.org/ns/cargo#hasAddressCode";
    public final static IRI p_hasAddressCode = IRI.create(s_p_hasAddressCode);
    /**
     * Type of address code e.g. US CBP FIRMS
     * 
     */
    public final static String s_p_hasAddressCodeType = "https://onerecord.iata.org/ns/cargo#hasAddressCodeType";
    public final static IRI p_hasAddressCodeType = IRI.create(s_p_hasAddressCodeType);
    /**
     * Contains the Special Handling Code related to the prescribed limitation. Hardcoded to PASSENGER AND CARGO AIRCRAFT or CARGO AIRCRAFT ONLY. This field is mandatory for air (Air) 
     * 
     */
    public final static String s_p_hasAircraftLimitationInformation = "https://onerecord.iata.org/ns/cargo#hasAircraftLimitationInformation";
    public final static IRI p_hasAircraftLimitationInformation = IRI.create(s_p_hasAircraftLimitationInformation);
    /**
     * Aircraft possibility code - Refers to CXML Code List 1.46 that contains values such as "Pure freighter flight carrying Loose Load Cargo - BBF"
     * 
     */
    public final static String s_p_hasAircraftPossibilityCode = "https://onerecord.iata.org/ns/cargo#hasAircraftPossibilityCode";
    public final static IRI p_hasAircraftPossibilityCode = IRI.create(s_p_hasAircraftPossibilityCode);
    /**
     * IATA two-character airline code
     * 
     */
    public final static String s_p_hasAirlineCode = "https://onerecord.iata.org/ns/cargo#hasAirlineCode";
    public final static IRI p_hasAirlineCode = IRI.create(s_p_hasAirlineCode);
    /**
     * IATA three-numeric airline prefix number
     * 
     */
    public final static String s_p_hasAirlinePrefix = "https://onerecord.iata.org/ns/cargo#hasAirlinePrefix";
    public final static IRI p_hasAirlinePrefix = IRI.create(s_p_hasAirlinePrefix);
    /**
     * Reference to the Allotment as per the contracts between forwarders and carriers
     * 
     */
    public final static String s_p_hasAllotment = "https://onerecord.iata.org/ns/cargo#hasAllotment";
    public final static IRI p_hasAllotment = IRI.create(s_p_hasAllotment);
    /**
     * Amount
     * 
     */
    public final static String s_p_hasAmount = "https://onerecord.iata.org/ns/cargo#hasAmount";
    public final static IRI p_hasAmount = IRI.create(s_p_hasAmount);
    /**
     * total number of specimens exported in the current calendar year and the current annuela quota for the species concerned (box 11a)
     * 
     */
    public final static String s_p_hasAnnualQuotaQuantity = "https://onerecord.iata.org/ns/cargo#hasAnnualQuotaQuantity";
    public final static IRI p_hasAnnualQuotaQuantity = IRI.create(s_p_hasAnnualQuotaQuantity);
    /**
     * Text restrictions to the Answer
     * 
     */
    public final static String s_p_hasAnswerOptionsText = "https://onerecord.iata.org/ns/cargo#hasAnswerOptionsText";
    public final static IRI p_hasAnswerOptionsText = IRI.create(s_p_hasAnswerOptionsText);
    /**
     * Value restrictions to the answer
     * 
     */
    public final static String s_p_hasAnswerOptionsValue = "https://onerecord.iata.org/ns/cargo#hasAnswerOptionsValue";
    public final static IRI p_hasAnswerOptionsValue = IRI.create(s_p_hasAnswerOptionsValue);
    /**
     * Text for the Answer
     * 
     */
    public final static String s_p_hasAnswerText = "https://onerecord.iata.org/ns/cargo#hasAnswerText";
    public final static IRI p_hasAnswerText = IRI.create(s_p_hasAnswerText);
    /**
     * Arrival date and time of the leg
     * 
     */
    public final static String s_p_hasArrivalDateTime = "https://onerecord.iata.org/ns/cargo#hasArrivalDateTime";
    public final static IRI p_hasArrivalDateTime = IRI.create(s_p_hasArrivalDateTime);
    /**
     * US / ATA Unit Load Device type code e.g. M2
     * 
     */
    public final static String s_p_hasAtaDesignator = "https://onerecord.iata.org/ns/cargo#hasAtaDesignator";
    public final static IRI p_hasAtaDesignator = IRI.create(s_p_hasAtaDesignator);
    /**
     * Contains additional information relating to an approval, permission or other specific detail applicable to the commodity (e.g. Dangerous Goods in excepted quantities) 
     * 
     */
    public final static String s_p_hasAuthorizationInformation = "https://onerecord.iata.org/ns/cargo#hasAuthorizationInformation";
    public final static IRI p_hasAuthorizationInformation = IRI.create(s_p_hasAuthorizationInformation);
    /**
     * The Date AWB Acceptance should be the same as the Date AWB Delivery. (beginning of the process)
     * 
     */
    public final static String s_p_hasAwbAcceptanceDate = "https://onerecord.iata.org/ns/cargo#hasAwbAcceptanceDate";
    public final static IRI p_hasAwbAcceptanceDate = IRI.create(s_p_hasAwbAcceptanceDate);
    /**
     * The Date AWB Delivery is also used as the AWB Execution date which will determine which billing period it will be processed and billed in.
     * 
     */
    public final static String s_p_hasAwbDeliveryDate = "https://onerecord.iata.org/ns/cargo#hasAwbDeliveryDate";
    public final static IRI p_hasAwbDeliveryDate = IRI.create(s_p_hasAwbDeliveryDate);
    /**
     * The AWB execution date determines which billing period the document will be processed and billed in.
     * 
     */
    public final static String s_p_hasAwbExecutionDate = "https://onerecord.iata.org/ns/cargo#hasAwbExecutionDate";
    public final static IRI p_hasAwbExecutionDate = IRI.create(s_p_hasAwbExecutionDate);
    /**
     * It must either contain the values of R for Revenue AWB, V for Void AWB or S for Service AWB.
     * 
     */
    public final static String s_p_hasAwbUseIndicator = "https://onerecord.iata.org/ns/cargo#hasAwbUseIndicator";
    public final static IRI p_hasAwbUseIndicator = IRI.create(s_p_hasAwbUseIndicator);
    /**
     * Production batch number / reference
     * 
     */
    public final static String s_p_hasBatchNumber = "https://onerecord.iata.org/ns/cargo#hasBatchNumber";
    public final static IRI p_hasBatchNumber = IRI.create(s_p_hasBatchNumber);
    /**
     * Subtotal of the charge
     * 
     */
    public final static String s_p_hasBillingChargeIdentifier = "https://onerecord.iata.org/ns/cargo#hasBillingChargeIdentifier";
    public final static IRI p_hasBillingChargeIdentifier = IRI.create(s_p_hasBillingChargeIdentifier);
    /**
     * Status of the Booking Option with regards to the step in the Sales and Booking process. Enumerated values to be defined
     * 
     */
    public final static String s_p_hasBookingOptionStatus = "https://onerecord.iata.org/ns/cargo#hasBookingOptionStatus";
    public final static IRI p_hasBookingOptionStatus = IRI.create(s_p_hasBookingOptionStatus);
    /**
     * Company branch name
     * 
     */
    public final static String s_p_hasBranchName = "https://onerecord.iata.org/ns/cargo#hasBranchName";
    public final static IRI p_hasBranchName = IRI.create(s_p_hasBranchName);
    /**
     * Charge code for carrier, eg. CA, CB, etc
     * 
     */
    public final static String s_p_hasCarrierChargeCode = "https://onerecord.iata.org/ns/cargo#hasCarrierChargeCode";
    public final static IRI p_hasCarrierChargeCode = IRI.create(s_p_hasCarrierChargeCode);
    /**
     * Date upon which the certification is made by the carrier
     * 
     */
    public final static String s_p_hasCarrierDeclarationDate = "https://onerecord.iata.org/ns/cargo#hasCarrierDeclarationDate";
    public final static IRI p_hasCarrierDeclarationDate = IRI.create(s_p_hasCarrierDeclarationDate);
    /**
     * Contains the authentication of the Carrier
     * 
     */
    public final static String s_p_hasCarrierDeclarationSignature = "https://onerecord.iata.org/ns/cargo#hasCarrierDeclarationSignature";
    public final static IRI p_hasCarrierDeclarationSignature = IRI.create(s_p_hasCarrierDeclarationSignature);
    /**
     * Official carrier name
     * 
     */
    public final static String s_p_hasCarrierName = "https://onerecord.iata.org/ns/cargo#hasCarrierName";
    public final static IRI p_hasCarrierName = IRI.create(s_p_hasCarrierName);
    /**
     * Carrier short name if any
     * 
     */
    public final static String s_p_hasCarrierShortName = "https://onerecord.iata.org/ns/cargo#hasCarrierShortName";
    public final static IRI p_hasCarrierShortName = IRI.create(s_p_hasCarrierShortName);
    /**
     * Operations code ID. Refers to the number of the registered captive-breeding or artifical propagation operation (box 12b)
     * 
     */
    public final static String s_p_hasCategoryCode = "https://onerecord.iata.org/ns/cargo#hasCategoryCode";
    public final static IRI p_hasCategoryCode = IRI.create(s_p_hasCategoryCode);
    /**
     * Billing charge identifiers to be used for CASS. Refer to CargoXML Code List 1.33
     * 
     */
    public final static String s_p_hasChargeCode = "https://onerecord.iata.org/ns/cargo#hasChargeCode";
    public final static IRI p_hasChargeCode = IRI.create(s_p_hasChargeCode);
    /**
     * Charge code, refer to CargoXML Code List 1.1
     * 
     */
    public final static String s_p_hasChargeDescription = "https://onerecord.iata.org/ns/cargo#hasChargeDescription";
    public final static IRI p_hasChargeDescription = IRI.create(s_p_hasChargeDescription);
    /**
     * Indicates if charge is prepaid or collect (P, C)
     * 
     */
    public final static String s_p_hasChargePaymentType = "https://onerecord.iata.org/ns/cargo#hasChargePaymentType";
    public final static IRI p_hasChargePaymentType = IRI.create(s_p_hasChargePaymentType);
    /**
     * Type of charge that should match the code expressed in either chargeCode, otherChargeCode or billingChargeIndentifier data properties.
     * 
     */
    public final static String s_p_hasChargeType = "https://onerecord.iata.org/ns/cargo#hasChargeType";
    public final static IRI p_hasChargeType = IRI.create(s_p_hasChargeType);
    /**
     * Free text remarks to the check result
     * 
     */
    public final static String s_p_hasCheckRemark = "https://onerecord.iata.org/ns/cargo#hasCheckRemark";
    public final static IRI p_hasCheckRemark = IRI.create(s_p_hasCheckRemark);
    /**
     * Checksum of the document to validate its integrity
     * 
     */
    public final static String s_p_hasChecksum = "https://onerecord.iata.org/ns/cargo#hasChecksum";
    public final static IRI p_hasChecksum = IRI.create(s_p_hasChecksum);
    /**
     * UN/LOCODE city code (5 letter) or IATA city code (3 letter)
     * 
     */
    public final static String s_p_hasCityCode = "https://onerecord.iata.org/ns/cargo#hasCityCode";
    public final static IRI p_hasCityCode = IRI.create(s_p_hasCityCode);
    /**
     * If no CityCode provided, full name of the city 
     * 
     */
    public final static String s_p_hasCityName = "https://onerecord.iata.org/ns/cargo#hasCityName";
    public final static IRI p_hasCityName = IRI.create(s_p_hasCityName);
    /**
     * The commission amount in favour of the Cargo Agent/Associate, applicable for the shipment concerned
     * 
     */
    public final static String s_p_hasCommissionAmount = "https://onerecord.iata.org/ns/cargo#hasCommissionAmount";
    public final static IRI p_hasCommissionAmount = IRI.create(s_p_hasCommissionAmount);
    /**
     * Indicates if commission is applied. Boolean
     * 
     */
    public final static String s_p_hasCommissionAmountIndicator = "https://onerecord.iata.org/ns/cargo#hasCommissionAmountIndicator";
    public final static IRI p_hasCommissionAmountIndicator = IRI.create(s_p_hasCommissionAmountIndicator);
    /**
     * The commission percentage in favour of the Cargo Agent/Associate, applicable for the shipment concerned
     * 
     */
    public final static String s_p_hasCommissionAmountPercentage = "https://onerecord.iata.org/ns/cargo#hasCommissionAmountPercentage";
    public final static IRI p_hasCommissionAmountPercentage = IRI.create(s_p_hasCommissionAmountPercentage);
    /**
     * Indicates the specific commodity on which the rate class code is applied
     * 
     */
    public final static String s_p_hasCommodityItemNumber = "https://onerecord.iata.org/ns/cargo#hasCommodityItemNumber";
    public final static IRI p_hasCommodityItemNumber = IRI.create(s_p_hasCommodityItemNumber);
    /**
     * Company identifier from the Internet of Logistics of the entity that hosts the object.
     * 
     */
    public final static String s_p_hasCompanyIdentifier = "https://onerecord.iata.org/ns/cargo#hasCompanyIdentifier";
    public final static IRI p_hasCompanyIdentifier = IRI.create(s_p_hasCompanyIdentifier);
    /**
     * Name of company or organization
     * 
     */
    public final static String s_p_hasCompanyName = "https://onerecord.iata.org/ns/cargo#hasCompanyName";
    public final static IRI p_hasCompanyName = IRI.create(s_p_hasCompanyName);
    /**
     * Contains the warning message complying with the regulations text note. This field is mandatory for air (Air) 
     * 
     */
    public final static String s_p_hasComplianceDeclarationText = "https://onerecord.iata.org/ns/cargo#hasComplianceDeclarationText";
    public final static IRI p_hasComplianceDeclarationText = IRI.create(s_p_hasComplianceDeclarationText);
    /**
     * Short text holding the process number if necessary
     * 
     */
    public final static String s_p_hasCompositionIdentifier = "https://onerecord.iata.org/ns/cargo#hasCompositionIdentifier";
    public final static IRI p_hasCompositionIdentifier = IRI.create(s_p_hasCompositionIdentifier);
    /**
     * Name of consignor signatory
     * 
     */
    public final static String s_p_hasConsignorDeclarationSignature = "https://onerecord.iata.org/ns/cargo#hasConsignorDeclarationSignature";
    public final static IRI p_hasConsignorDeclarationSignature = IRI.create(s_p_hasConsignorDeclarationSignature);
    /**
     * Contact type - e.g. Emergency contact, Customs contact, Customer contact
     * 
     */
    public final static String s_p_hasContactDetailType = "https://onerecord.iata.org/ns/cargo#hasContactDetailType";
    public final static IRI p_hasContactDetailType = IRI.create(s_p_hasContactDetailType);
    /**
     * Customs, Security and Regulatory Control Information Identifier. Coded indicator qualifying Customs related information: Item Number "I", Exemption Legend "L", System Downtime Reference "S", Unique Consignment Reference Number "U", Movement Reference Number "M" .
     * Refers to Code List 1.100
     * Condition: At least one of the three elements (Country Code, Information Identifier or Customs, Security and Regulatory Control Information Identifier) must be completed
     * 
     */
    public final static String s_p_hasContentCode = "https://onerecord.iata.org/ns/cargo#hasContentCode";
    public final static IRI p_hasContentCode = IRI.create(s_p_hasContentCode);
    /**
     * Indicates if the permit is a copy (true) or an original (false) (box 1)
     * 
     */
    public final static String s_p_hasCopyIndicator = "https://onerecord.iata.org/ns/cargo#hasCopyIndicator";
    public final static IRI p_hasCopyIndicator = IRI.create(s_p_hasCopyIndicator);
    /**
     * Number of the adjustment
     * 
     */
    public final static String s_p_hasCorrectionNumber = "https://onerecord.iata.org/ns/cargo#hasCorrectionNumber";
    public final static IRI p_hasCorrectionNumber = IRI.create(s_p_hasCorrectionNumber);
    /**
     * Serial Number of the correction
     * 
     */
    public final static String s_p_hasCorrectionSerialNumber = "https://onerecord.iata.org/ns/cargo#hasCorrectionSerialNumber";
    public final static IRI p_hasCorrectionSerialNumber = IRI.create(s_p_hasCorrectionSerialNumber);
    /**
     * Number of corrections to CASS records
     * 
     */
    public final static String s_p_hasCorrections = "https://onerecord.iata.org/ns/cargo#hasCorrections";
    public final static IRI p_hasCorrections = IRI.create(s_p_hasCorrections);
    /**
     * Country ISO code. Refer ISO 3166-2. At least one of the three elements (Country Code, Information Identifier or Customs, Security and Regulatory Control Information Identifier) must be completed
     * 
     */
    public final static String s_p_hasCountryCode = "https://onerecord.iata.org/ns/cargo#hasCountryCode";
    public final static IRI p_hasCountryCode = IRI.create(s_p_hasCountryCode);
    /**
     * Full country name, Refer ISO 3166-2
     * 
     */
    public final static String s_p_hasCountryName = "https://onerecord.iata.org/ns/cargo#hasCountryName";
    public final static IRI p_hasCountryName = IRI.create(s_p_hasCountryName);
    /**
     * Applies to fissile material only, other than fissile excepted. A numeric value expressed to one decimal place preceded by the letters CSI.
     * 
     */
    public final static String s_p_hasCriticalitySafetyIndex = "https://onerecord.iata.org/ns/cargo#hasCriticalitySafetyIndex";
    public final static IRI p_hasCriticalitySafetyIndex = IRI.create(s_p_hasCriticalitySafetyIndex);
    /**
     * Free text for customs remarks, not used in OCI Composition Rules Table
     * 
     */
    public final static String s_p_hasCustomsNote = "https://onerecord.iata.org/ns/cargo#hasCustomsNote";
    public final static IRI p_hasCustomsNote = IRI.create(s_p_hasCustomsNote);
    /**
     * Code indicating the origin of goods for Customs purposes (e.g. For goods in free circulation in the EU)
     * List to be provided by local authorities
     * 
     */
    public final static String s_p_hasCustomsOriginCode = "https://onerecord.iata.org/ns/cargo#hasCustomsOriginCode";
    public final static IRI p_hasCustomsOriginCode = IRI.create(s_p_hasCustomsOriginCode);
    /**
     * Indicates if the ULD is Damaged
     * 
     */
    public final static String s_p_hasDamageFlag = "https://onerecord.iata.org/ns/cargo#hasDamageFlag";
    public final static IRI p_hasDamageFlag = IRI.create(s_p_hasDamageFlag);
    /**
     * The value of a shipment declared for carriage purposes , NVD if no value declared
     * 
     */
    public final static String s_p_hasDeclaredValueForCarriage = "https://onerecord.iata.org/ns/cargo#hasDeclaredValueForCarriage";
    public final static IRI p_hasDeclaredValueForCarriage = IRI.create(s_p_hasDeclaredValueForCarriage);
    /**
     * The value of a shipment declared for customs purposes , NVD if no value declared
     * 
     */
    public final static String s_p_hasDeclaredValueForCustoms = "https://onerecord.iata.org/ns/cargo#hasDeclaredValueForCustoms";
    public final static IRI p_hasDeclaredValueForCustoms = IRI.create(s_p_hasDeclaredValueForCustoms);
    /**
     * he date at which the delivery is supposed to happen. Format is YYYYMMDD.
     * 
     */
    public final static String s_p_hasDeliveryDate = "https://onerecord.iata.org/ns/cargo#hasDeliveryDate";
    public final static IRI p_hasDeliveryDate = IRI.create(s_p_hasDeliveryDate);
    /**
     * Contains three designator of demurrage code, refer to RP 1654 (BCC, HHH, XXX, ZZZ)
     * 
     */
    public final static String s_p_hasDemurrageCode = "https://onerecord.iata.org/ns/cargo#hasDemurrageCode";
    public final static IRI p_hasDemurrageCode = IRI.create(s_p_hasDemurrageCode);
    /**
     * Departure date and time of the leg
     * 
     */
    public final static String s_p_hasDepartureDateTime = "https://onerecord.iata.org/ns/cargo#hasDepartureDateTime";
    public final static IRI p_hasDepartureDateTime = IRI.create(s_p_hasDepartureDateTime);
    /**
     * Natural language description if required
     * 
     */
    public final static String s_p_hasDescription = "https://onerecord.iata.org/ns/cargo#hasDescription";
    public final static IRI p_hasDescription = IRI.create(s_p_hasDescription);
    /**
     * Charges levied at destination accruing to the last carrier, in destination currency
     * 
     */
    public final static String s_p_hasDestinationCharges = "https://onerecord.iata.org/ns/cargo#hasDestinationCharges";
    public final static IRI p_hasDestinationCharges = IRI.create(s_p_hasDestinationCharges);
    /**
     * ISO 3-letter currency code of destination. Refer to ISO 4217
     * 
     */
    public final static String s_p_hasDestinationCurrencyCode = "https://onerecord.iata.org/ns/cargo#hasDestinationCurrencyCode";
    public final static IRI p_hasDestinationCurrencyCode = IRI.create(s_p_hasDestinationCurrencyCode);
    /**
     * Conversion rate applied
     * 
     */
    public final static String s_p_hasDestinationCurrencyRate = "https://onerecord.iata.org/ns/cargo#hasDestinationCurrencyRate";
    public final static IRI p_hasDestinationCurrencyRate = IRI.create(s_p_hasDestinationCurrencyRate);
    /**
     * The category of the package or all packed in one. Complete text to be transmitted: I-White, II-Yellow, III-Yellow instead of I, II, III
     * 
     */
    public final static String s_p_hasDgRaTypeCode = "https://onerecord.iata.org/ns/cargo#hasDgRaTypeCode";
    public final static IRI p_hasDgRaTypeCode = IRI.create(s_p_hasDgRaTypeCode);
    /**
     * Direction to indicate if it's Inbound or Outbound
     * 
     */
    public final static String s_p_hasDirection = "https://onerecord.iata.org/ns/cargo#hasDirection";
    public final static IRI p_hasDirection = IRI.create(s_p_hasDirection);
    /**
     * This is used as a discount to the “official” transportation charge on AWB to arrive at actual selling price
     * 
     */
    public final static String s_p_hasDiscount = "https://onerecord.iata.org/ns/cargo#hasDiscount";
    public final static IRI p_hasDiscount = IRI.create(s_p_hasDiscount);
    /**
     * Unique document identifier
     * 
     */
    public final static String s_p_hasDocumentIdentifier = "https://onerecord.iata.org/ns/cargo#hasDocumentIdentifier";
    public final static IRI p_hasDocumentIdentifier = IRI.create(s_p_hasDocumentIdentifier);
    /**
     * Link to the document, e.g. URL of the file where it is hosted
     * 
     */
    public final static String s_p_hasDocumentLink = "https://onerecord.iata.org/ns/cargo#hasDocumentLink";
    public final static IRI p_hasDocumentLink = IRI.create(s_p_hasDocumentLink);
    /**
     * If no DocumentType provided, name of the referenced document 
     * 
     */
    public final static String s_p_hasDocumentName = "https://onerecord.iata.org/ns/cargo#hasDocumentName";
    public final static IRI p_hasDocumentName = IRI.create(s_p_hasDocumentName);
    /**
     * Document version number
     * 
     */
    public final static String s_p_hasDocumentVersion = "https://onerecord.iata.org/ns/cargo#hasDocumentVersion";
    public final static IRI p_hasDocumentVersion = IRI.create(s_p_hasDocumentVersion);
    /**
     * Earliest acceptance date time (requested or proposed)
     * 
     */
    public final static String s_p_hasEarliestAcceptanceTime = "https://onerecord.iata.org/ns/cargo#hasEarliestAcceptanceTime";
    public final static IRI p_hasEarliestAcceptanceTime = IRI.create(s_p_hasEarliestAcceptanceTime);
    /**
     * Employee ID
     * 
     */
    public final static String s_p_hasEmployeeIdentifier = "https://onerecord.iata.org/ns/cargo#hasEmployeeIdentifier";
    public final static IRI p_hasEmployeeIdentifier = IRI.create(s_p_hasEmployeeIdentifier);
    /**
     * Entitlement code to define if charges are Due carrier (C) or Due agent (A). Refer to CXML Code List 1.3
     * 
     */
    public final static String s_p_hasEntitlementCode = "https://onerecord.iata.org/ns/cargo#hasEntitlementCode";
    public final static IRI p_hasEntitlementCode = IRI.create(s_p_hasEntitlementCode);
    /**
     * The original number is a unique number allocated to each document by the relevant Management Authority. (box 1)
     * 
     */
    public final static String s_p_hasEpermitNumber = "https://onerecord.iata.org/ns/cargo#hasEpermitNumber";
    public final static IRI p_hasEpermitNumber = IRI.create(s_p_hasEpermitNumber);
    /**
     * Movement or milestone code. Can refer to CXML Code List 1.18, e.g. DEP, ARR, FOH, RCS but not restricted to it.
     * 
     */
    public final static String s_p_hasEventCode = "https://onerecord.iata.org/ns/cargo#hasEventCode";
    public final static IRI p_hasEventCode = IRI.create(s_p_hasEventCode);
    /**
     * DateTime at which the LogisticsEvent was posted
     * 
     */
    public final static String s_p_hasEventCreationDate = "https://onerecord.iata.org/ns/cargo#hasEventCreationDate";
    public final static IRI p_hasEventCreationDate = IRI.create(s_p_hasEventCreationDate);
    /**
     * Date and time of the event
     * 
     */
    public final static String s_p_hasEventDate = "https://onerecord.iata.org/ns/cargo#hasEventDate";
    public final static IRI p_hasEventDate = IRI.create(s_p_hasEventDate);
    /**
     * If no EventCode provided, event name - e.g. Security clearance
     * 
     */
    public final static String s_p_hasEventName = "https://onerecord.iata.org/ns/cargo#hasEventName";
    public final static IRI p_hasEventName = IRI.create(s_p_hasEventName);
    /**
     * The Rate at which the Air Waybill Amount has been multiplied to arrive at the amount of settlement.
     * 
     */
    public final static String s_p_hasExchangeRate = "https://onerecord.iata.org/ns/cargo#hasExchangeRate";
    public final static IRI p_hasExchangeRate = IRI.create(s_p_hasExchangeRate);
    /**
     * Indicates an exclusive use shipment
     * 
     */
    public final static String s_p_hasExclusiveUseIndicator = "https://onerecord.iata.org/ns/cargo#hasExclusiveUseIndicator";
    public final static IRI p_hasExclusiveUseIndicator = IRI.create(s_p_hasExclusiveUseIndicator);
    /**
     * Enum stating the status of the Activity
     * 
     */
    public final static String s_p_hasExecutionStatus = "https://onerecord.iata.org/ns/cargo#hasExecutionStatus";
    public final static IRI p_hasExecutionStatus = IRI.create(s_p_hasExecutionStatus);
    /**
     * Exemption code - e.g. BIOM- Bio-Medical Samples
     * SMUS - small undersized shipments MAIL - mail
     * BIOM - bio-medical samples
     * DIPL - diplomatic bags or diplomatic mail
     * LFSM - life-saving materials NUCL - nuclear materials
     * TRNS - transfer or transshipment
     * 
     */
    public final static String s_p_hasExemptionCode = "https://onerecord.iata.org/ns/cargo#hasExemptionCode";
    public final static IRI p_hasExemptionCode = IRI.create(s_p_hasExemptionCode);
    /**
     * Expected commodity for quote request purposes only. To be defined by MCD
     * 
     */
    public final static String s_p_hasExpectedCommodity = "https://onerecord.iata.org/ns/cargo#hasExpectedCommodity";
    public final static IRI p_hasExpectedCommodity = IRI.create(s_p_hasExpectedCommodity);
    /**
     * Product expiry date - e.g. for perishables goods or goods with programmed obsolescence
     * 
     */
    public final static String s_p_hasExpiryDate = "https://onerecord.iata.org/ns/cargo#hasExpiryDate";
    public final static IRI p_hasExpiryDate = IRI.create(s_p_hasExpiryDate);
    /**
     * Specifies the reference to the group which identifies the kind of substances and articles that are deemed to be compatible. Mandatory field in case of transport of explosive articles or substances
     * 
     */
    public final static String s_p_hasExplosiveCompatibilityGroupCode = "https://onerecord.iata.org/ns/cargo#hasExplosiveCompatibilityGroupCode";
    public final static IRI p_hasExplosiveCompatibilityGroupCode = IRI.create(s_p_hasExplosiveCompatibilityGroupCode);
    /**
     * First name / given name
     * 
     */
    public final static String s_p_hasFirstName = "https://onerecord.iata.org/ns/cargo#hasFirstName";
    public final static IRI p_hasFirstName = IRI.create(s_p_hasFirstName);
    /**
     * Indicates if Fissile is excepted
     * 
     */
    public final static String s_p_hasFissileExceptionIndicator = "https://onerecord.iata.org/ns/cargo#hasFissileExceptionIndicator";
    public final static IRI p_hasFissileExceptionIndicator = IRI.create(s_p_hasFissileExceptionIndicator);
    /**
     * Fissile exception reference, mandatory if Fissile Exception Indicator is true.
     * 
     */
    public final static String s_p_hasFissileExceptionReference = "https://onerecord.iata.org/ns/cargo#hasFissileExceptionReference";
    public final static IRI p_hasFissileExceptionReference = IRI.create(s_p_hasFissileExceptionReference);
    /**
     * e.g. Kerosene, Diesel, SAF, Electricity [renewable], Electricity [non-renewable]
     * 
     */
    public final static String s_p_hasFuelType = "https://onerecord.iata.org/ns/cargo#hasFuelType";
    public final static IRI p_hasFuelType = IRI.create(s_p_hasFuelType);
    /**
     * re of the Geolocation coordinates, standard is Degree
     * 
     */
    public final static String s_p_hasGeolocationUnit = "https://onerecord.iata.org/ns/cargo#hasGeolocationUnit";
    public final static IRI p_hasGeolocationUnit = IRI.create(s_p_hasGeolocationUnit);
    /**
     * Description of goods, for the BookingShipment the commodity list defined by Modernizing Cargo Distribution MCD working group can be used as a referential.
     * 
     */
    public final static String s_p_hasGoodsDescription = "https://onerecord.iata.org/ns/cargo#hasGoodsDescription";
    public final static IRI p_hasGoodsDescription = IRI.create(s_p_hasGoodsDescription);
    /**
     * Appendix number of the convention (I, II or III) (box 10)
     * 
     */
    public final static String s_p_hasGoodsTypeCode = "https://onerecord.iata.org/ns/cargo#hasGoodsTypeCode";
    public final static IRI p_hasGoodsTypeCode = IRI.create(s_p_hasGoodsTypeCode);
    /**
     * Appendix number of the convention (I, II or III) (box 10)
     * 
     */
    public final static String s_p_hasGoodsTypeExtensionCode = "https://onerecord.iata.org/ns/cargo#hasGoodsTypeExtensionCode";
    public final static IRI p_hasGoodsTypeExtensionCode = IRI.create(s_p_hasGoodsTypeExtensionCode);
    /**
     * Total price
     * 
     */
    public final static String s_p_hasGrandTotal = "https://onerecord.iata.org/ns/cargo#hasGrandTotal";
    public final static IRI p_hasGrandTotal = IRI.create(s_p_hasGrandTotal);
    /**
     * Harmonized Commodity code, refer to hsType used. 6 minimum digits are expected.
     * 
     */
    public final static String s_p_hasHSCode = "https://onerecord.iata.org/ns/cargo#hasHSCode";
    public final static IRI p_hasHSCode = IRI.create(s_p_hasHSCode);
    /**
     * Commodity description
     * 
     */
    public final static String s_p_hasHSCommodityDescription = "https://onerecord.iata.org/ns/cargo#hasHSCommodityDescription";
    public final static IRI p_hasHSCommodityDescription = IRI.create(s_p_hasHSCommodityDescription);
    /**
     * If no Code provided, name of commodity
     * 
     */
    public final static String s_p_hasHSCommodityName = "https://onerecord.iata.org/ns/cargo#hasHSCommodityName";
    public final static IRI p_hasHSCommodityName = IRI.create(s_p_hasHSCommodityName);
    /**
     * Free text. This may include items such as Control temperature for substances stabilized by temperature control, name and telephone number of a responsible person for infectious substances. 
     * 
     */
    public final static String s_p_hasHandlingInformation = "https://onerecord.iata.org/ns/cargo#hasHandlingInformation";
    public final static IRI p_hasHandlingInformation = IRI.create(s_p_hasHandlingInformation);
    /**
     * Identifies the hazard class / division identification containing a numeric field separated by a decimal
     * 
     */
    public final static String s_p_hasHazardClassificationIdentifier = "https://onerecord.iata.org/ns/cargo#hasHazardClassificationIdentifier";
    public final static IRI p_hasHazardClassificationIdentifier = IRI.create(s_p_hasHazardClassificationIdentifier);
    /**
     * IATA accredited cargo agent 7 digit number
     * 
     */
    public final static String s_p_hasIataCargoAgentCode = "https://onerecord.iata.org/ns/cargo#hasIataCargoAgentCode";
    public final static IRI p_hasIataCargoAgentCode = IRI.create(s_p_hasIataCargoAgentCode);
    /**
     * IATA CASS cargo agent 4 digit branch number / location identifier
     * 
     */
    public final static String s_p_hasIataCargoAgentLocationIdentifier = "https://onerecord.iata.org/ns/cargo#hasIataCargoAgentLocationIdentifier";
    public final static IRI p_hasIataCargoAgentLocationIdentifier = IRI.create(s_p_hasIataCargoAgentLocationIdentifier);
    /**
     * Identifier type or description
     * 
     */
    public final static String s_p_hasIdentifierType = "https://onerecord.iata.org/ns/cargo#hasIdentifierType";
    public final static IRI p_hasIdentifierType = IRI.create(s_p_hasIdentifierType);
    /**
     * Standard codes as defined by UNCEFACT and ICC that correspond to international rules for the interpretation of the most commonly used trade terms in different countries. UNECE recommendation n. 5 Incoterms 2000.
     * 
     */
    public final static String s_p_hasIncoterms = "https://onerecord.iata.org/ns/cargo#hasIncoterms";
    public final static IRI p_hasIncoterms = IRI.create(s_p_hasIncoterms);
    /**
     * Indicates interlining (requested or proposed)
     * 
     */
    public final static String s_p_hasInterlining = "https://onerecord.iata.org/ns/cargo#hasInterlining";
    public final static IRI p_hasInterlining = IRI.create(s_p_hasInterlining);
    /**
     * Id of each radionuclide or for mixtures of radionuclides.
     * 
     */
    public final static String s_p_hasIsotopeIdentifier = "https://onerecord.iata.org/ns/cargo#hasIsotopeIdentifier";
    public final static IRI p_hasIsotopeIdentifier = IRI.create(s_p_hasIsotopeIdentifier);
    /**
     * The name or symbol of each radionuclide or for mixtures of radionuclides, an appropriate general description, or a list of the most restrictive radionuclides. 
     * 
     */
    public final static String s_p_hasIsotopeName = "https://onerecord.iata.org/ns/cargo#hasIsotopeName";
    public final static IRI p_hasIsotopeName = IRI.create(s_p_hasIsotopeName);
    /**
     * Product quantity for unit price - e.g. 12 (eggs for one USD 1)
     * 
     */
    public final static String s_p_hasItemQuantityForUnitPrice = "https://onerecord.iata.org/ns/cargo#hasItemQuantityForUnitPrice";
    public final static IRI p_hasItemQuantityForUnitPrice = IRI.create(s_p_hasItemQuantityForUnitPrice);
    /**
     * Job title / position
     * 
     */
    public final static String s_p_hasJobTitle = "https://onerecord.iata.org/ns/cargo#hasJobTitle";
    public final static IRI p_hasJobTitle = IRI.create(s_p_hasJobTitle);
    /**
     * Last name / family name / surname
     * 
     */
    public final static String s_p_hasLastName = "https://onerecord.iata.org/ns/cargo#hasLastName";
    public final static IRI p_hasLastName = IRI.create(s_p_hasLastName);
    /**
     * Latest Acceptance time as per CargoIQ definition (requested, proposed or actual)
     * 
     */
    public final static String s_p_hasLatestAcceptanceTime = "https://onerecord.iata.org/ns/cargo#hasLatestAcceptanceTime";
    public final static IRI p_hasLatestAcceptanceTime = IRI.create(s_p_hasLatestAcceptanceTime);
    /**
     * Latest Arrival date time (requested or proposed)
     * 
     */
    public final static String s_p_hasLatestArrivalDateTime = "https://onerecord.iata.org/ns/cargo#hasLatestArrivalDateTime";
    public final static IRI p_hasLatestArrivalDateTime = IRI.create(s_p_hasLatestArrivalDateTime);
    /**
     * Latest arrival time at destination
     * 
     */
    public final static String s_p_hasLatestArrivalTime = "https://onerecord.iata.org/ns/cargo#hasLatestArrivalTime";
    public final static IRI p_hasLatestArrivalTime = IRI.create(s_p_hasLatestArrivalTime);
    /**
     * Location latitude - Change of data type to string as of version 1.2
     * 
     */
    public final static String s_p_hasLatitude = "https://onerecord.iata.org/ns/cargo#hasLatitude";
    public final static IRI p_hasLatitude = IRI.create(s_p_hasLatitude);
    /**
     * Sequence number of the leg
     * 
     */
    public final static String s_p_hasLegSequenceNumber = "https://onerecord.iata.org/ns/cargo#hasLegSequenceNumber";
    public final static IRI p_hasLegSequenceNumber = IRI.create(s_p_hasLegSequenceNumber);
    /**
     * Load type of the shipment or piece (Bulk, ULD, Pallet, Loose)
     * 
     */
    public final static String s_p_hasLoadType = "https://onerecord.iata.org/ns/cargo#hasLoadType";
    public final static IRI p_hasLoadType = IRI.create(s_p_hasLoadType);
    /**
     * Short text holding the process number if necessary
     * 
     */
    public final static String s_p_hasLoadingIdentifier = "https://onerecord.iata.org/ns/cargo#hasLoadingIdentifier";
    public final static IRI p_hasLoadingIdentifier = IRI.create(s_p_hasLoadingIdentifier);
    /**
     * ULD height or loading limitation code. Refer CXML Code List 1.47,  e.g. R - ULD Height above 244 centimetres
     * 
     */
    public final static String s_p_hasLoadingIndicator = "https://onerecord.iata.org/ns/cargo#hasLoadingIndicator";
    public final static IRI p_hasLoadingIndicator = IRI.create(s_p_hasLoadingIndicator);
    /**
     * Position of the shipment in the aircraft - e.g. lower or main deck
     * 
     */
    public final static String s_p_hasLoadingPosition = "https://onerecord.iata.org/ns/cargo#hasLoadingPosition";
    public final static IRI p_hasLoadingPosition = IRI.create(s_p_hasLoadingPosition);
    /**
     * Short text stating the loading position in the TransportMeans
     * 
     */
    public final static String s_p_hasLoadingPositionIdentifier = "https://onerecord.iata.org/ns/cargo#hasLoadingPositionIdentifier";
    public final static IRI p_hasLoadingPositionIdentifier = IRI.create(s_p_hasLoadingPositionIdentifier);
    /**
     * Location code of airport, freight terminal, seaport, rail station. UN/LOCODE city code (5 letter) or IATA airport code (3 letter)
     * 
     */
    public final static String s_p_hasLocationCode = "https://onerecord.iata.org/ns/cargo#hasLocationCode";
    public final static IRI p_hasLocationCode = IRI.create(s_p_hasLocationCode);
    /**
     * Full name of the location
     * 
     */
    public final static String s_p_hasLocationName = "https://onerecord.iata.org/ns/cargo#hasLocationName";
    public final static IRI p_hasLocationName = IRI.create(s_p_hasLocationName);
    /**
     * Long text of the question
     * 
     */
    public final static String s_p_hasLongText = "https://onerecord.iata.org/ns/cargo#hasLongText";
    public final static IRI p_hasLongText = IRI.create(s_p_hasLongText);
    /**
     * Location longitude - Change of data type to string as of version 1.2
     * 
     */
    public final static String s_p_hasLongitude = "https://onerecord.iata.org/ns/cargo#hasLongitude";
    public final static IRI p_hasLongitude = IRI.create(s_p_hasLongitude);
    /**
     * Production lot number / reference
     * 
     */
    public final static String s_p_hasLotNumber = "https://onerecord.iata.org/ns/cargo#hasLotNumber";
    public final static IRI p_hasLotNumber = IRI.create(s_p_hasLotNumber);
    /**
     * Maximum number of connections of the transport movement (requested or proposed)
     * 
     */
    public final static String s_p_hasMaxConnections = "https://onerecord.iata.org/ns/cargo#hasMaxConnections";
    public final static IRI p_hasMaxConnections = IRI.create(s_p_hasMaxConnections);
    /**
     * Maximum quantity
     * 
     */
    public final static String s_p_hasMaximumQuantity = "https://onerecord.iata.org/ns/cargo#hasMaximumQuantity";
    public final static IRI p_hasMaximumQuantity = IRI.create(s_p_hasMaximumQuantity);
    /**
     * Timestamp for the measurement
     * 
     */
    public final static String s_p_hasMeasurementTimestamp = "https://onerecord.iata.org/ns/cargo#hasMeasurementTimestamp";
    public final static IRI p_hasMeasurementTimestamp = IRI.create(s_p_hasMeasurementTimestamp);
    /**
     * Middle name/ other name
     * 
     */
    public final static String s_p_hasMiddleName = "https://onerecord.iata.org/ns/cargo#hasMiddleName";
    public final static IRI p_hasMiddleName = IRI.create(s_p_hasMiddleName);
    /**
     * The milestone list still needs to be defined, it includes elements from CXML Code List 1.92 but is not limited to those values, e.g. block-on and block-off times might be added as a comparison to wheels off and touchdown.
     * 
     */
    public final static String s_p_hasMilestone = "https://onerecord.iata.org/ns/cargo#hasMilestone";
    public final static IRI p_hasMilestone = IRI.create(s_p_hasMilestone);
    /**
     * Minimum quantity
     * 
     */
    public final static String s_p_hasMinimumQuantity = "https://onerecord.iata.org/ns/cargo#hasMinimumQuantity";
    public final static IRI p_hasMinimumQuantity = IRI.create(s_p_hasMinimumQuantity);
    /**
     * Mode of transport code, refer to UNECE Rec. 19 https://unece.org/fileadmin/DAM/cefact/recommendations/rec19/rec19_01cf19e.pdf
     * 
     */
    public final static String s_p_hasModeCode = "https://onerecord.iata.org/ns/cargo#hasModeCode";
    public final static IRI p_hasModeCode = IRI.create(s_p_hasModeCode);
    /**
     * Pre-Carriage, Main-Carriage or On-Carriage
     * 
     */
    public final static String s_p_hasModeQualifier = "https://onerecord.iata.org/ns/cargo#hasModeQualifier";
    public final static IRI p_hasModeQualifier = IRI.create(s_p_hasModeQualifier);
    /**
     * The check is a Modular 7 validation on the AWB number, recorded as a boolean.
     * 
     */
    public final static String s_p_hasModularCheckNumber = "https://onerecord.iata.org/ns/cargo#hasModularCheckNumber";
    public final static IRI p_hasModularCheckNumber = IRI.create(s_p_hasModularCheckNumber);
    /**
     * Human-understandable name of object depending on the context
     * 
     */
    public final static String s_p_hasName = "https://onerecord.iata.org/ns/cargo#hasName";
    public final static IRI p_hasName = IRI.create(s_p_hasName);
    /**
     * Number of doors
     * 
     */
    public final static String s_p_hasNumberOfDoors = "https://onerecord.iata.org/ns/cargo#hasNumberOfDoors";
    public final static IRI p_hasNumberOfDoors = IRI.create(s_p_hasNumberOfDoors);
    /**
     * Number of fittings
     * 
     */
    public final static String s_p_hasNumberOfFittings = "https://onerecord.iata.org/ns/cargo#hasNumberOfFittings";
    public final static IRI p_hasNumberOfFittings = IRI.create(s_p_hasNumberOfFittings);
    /**
     * Number of nets
     * 
     */
    public final static String s_p_hasNumberOfNets = "https://onerecord.iata.org/ns/cargo#hasNumberOfNets";
    public final static IRI p_hasNumberOfNets = IRI.create(s_p_hasNumberOfNets);
    /**
     * Number of straps
     * 
     */
    public final static String s_p_hasNumberOfStraps = "https://onerecord.iata.org/ns/cargo#hasNumberOfStraps";
    public final static IRI p_hasNumberOfStraps = IRI.create(s_p_hasNumberOfStraps);
    /**
     * Value
     * 
     */
    public final static String s_p_hasNumericalValue = "https://onerecord.iata.org/ns/cargo#hasNumericalValue";
    public final static IRI p_hasNumericalValue = IRI.create(s_p_hasNumericalValue);
    /**
     * When no value is declared for Carriage, this field may be completed with the value TRUE otherwise FALSE
     * 
     */
    public final static String s_p_hasNvdForCarriage = "https://onerecord.iata.org/ns/cargo#hasNvdForCarriage";
    public final static IRI p_hasNvdForCarriage = IRI.create(s_p_hasNvdForCarriage);
    /**
     * When no value is declared for Customs, this field may be completed with the value TRUE otherwise FALSE
     * 
     */
    public final static String s_p_hasNvdForCustoms = "https://onerecord.iata.org/ns/cargo#hasNvdForCustoms";
    public final static IRI p_hasNvdForCustoms = IRI.create(s_p_hasNvdForCustoms);
    /**
     * When no value is declared for Insurance this field should be completed with the value TRUE otherwise FALSE
     * 
     */
    public final static String s_p_hasNvdIndicator = "https://onerecord.iata.org/ns/cargo#hasNvdIndicator";
    public final static IRI p_hasNvdIndicator = IRI.create(s_p_hasNvdIndicator);
    /**
     * Contains two designator codes of ODLN or Operational Damage Limit Notices. ODLN code is used to define type of damage after visually check the serviceability of ULDs section 7, Standard Specifications 40/3 or 40/4 in ULD Regulations
     * 
     */
    public final static String s_p_hasOdlnCode = "https://onerecord.iata.org/ns/cargo#hasOdlnCode";
    public final static IRI p_hasOdlnCode = IRI.create(s_p_hasOdlnCode);
    /**
     * The shipper or its Agent may enter the appropriate optional shipping
     * 
     */
    public final static String s_p_hasOptionalShippingInfo = "https://onerecord.iata.org/ns/cargo#hasOptionalShippingInfo";
    public final static IRI p_hasOptionalShippingInfo = IRI.create(s_p_hasOptionalShippingInfo);
    /**
     * Optional shipping reference number if any
     * 
     */
    public final static String s_p_hasOptionalShippingReferenceNumber = "https://onerecord.iata.org/ns/cargo#hasOptionalShippingReferenceNumber";
    public final static IRI p_hasOptionalShippingReferenceNumber = IRI.create(s_p_hasOptionalShippingReferenceNumber);
    /**
     * ISO alpha 3 Code used to indicate the Origin Currency, refer to ISO 4217 currency codes
     * 
     */
    public final static String s_p_hasOriginCurrencyCode = "https://onerecord.iata.org/ns/cargo#hasOriginCurrencyCode";
    public final static IRI p_hasOriginCurrencyCode = IRI.create(s_p_hasOriginCurrencyCode);
    /**
     * Issuing date for Origin reference permit or re-export reference Certificate (box 12)
     * 
     */
    public final static String s_p_hasOriginReferencePermitDateTime = "https://onerecord.iata.org/ns/cargo#hasOriginReferencePermitDateTime";
    public final static IRI p_hasOriginReferencePermitDateTime = IRI.create(s_p_hasOriginReferencePermitDateTime);
    /**
     * identifier of Origin reference permit or re-export reference Certificate (box 12/12a)
     * 
     */
    public final static String s_p_hasOriginReferencePermitIdentifier = "https://onerecord.iata.org/ns/cargo#hasOriginReferencePermitIdentifier";
    public final static IRI p_hasOriginReferencePermitIdentifier = IRI.create(s_p_hasOriginReferencePermitIdentifier);
    /**
     * Document type code of origin reference permit or re-export reference Certificate (box 12/12a)
     * 
     */
    public final static String s_p_hasOriginReferencePermitTypeCode = "https://onerecord.iata.org/ns/cargo#hasOriginReferencePermitTypeCode";
    public final static IRI p_hasOriginReferencePermitTypeCode = IRI.create(s_p_hasOriginReferencePermitTypeCode);
    /**
     * Refer to CargoXML Code List 1.2 for Other Charges
     * 
     */
    public final static String s_p_hasOtherChargeCode = "https://onerecord.iata.org/ns/cargo#hasOtherChargeCode";
    public final static IRI p_hasOtherChargeCode = IRI.create(s_p_hasOtherChargeCode);
    /**
     * Supplementary Customs, Security and Regulatory Control Information
     * 
     */
    public final static String s_p_hasOtherCustomsInformation = "https://onerecord.iata.org/ns/cargo#hasOtherCustomsInformation";
    public final static IRI p_hasOtherCustomsInformation = IRI.create(s_p_hasOtherCustomsInformation);
    /**
     * Other methods used to secure the cargo
     * 
     */
    public final static String s_p_hasOtherScreeningMethods = "https://onerecord.iata.org/ns/cargo#hasOtherScreeningMethods";
    public final static IRI p_hasOtherScreeningMethods = IRI.create(s_p_hasOtherScreeningMethods);
    /**
     * Applies to fissile material only, other than fissile excepted. A numeric value expressed to one decimal place preceded by the letters CSI. 
     * 
     */
    public final static String s_p_hasOverpackCriticalitySafetyIndexNumeric = "https://onerecord.iata.org/ns/cargo#hasOverpackCriticalitySafetyIndexNumeric";
    public final static IRI p_hasOverpackCriticalitySafetyIndexNumeric = IRI.create(s_p_hasOverpackCriticalitySafetyIndexNumeric);
    /**
     * A single number assigned to a package, overpack or freight container to provide control over radiation exposure. 
     * 
     */
    public final static String s_p_hasOverpackT1 = "https://onerecord.iata.org/ns/cargo#hasOverpackT1";
    public final static IRI p_hasOverpackT1 = IRI.create(s_p_hasOverpackT1);
    /**
     * Identifies the Logistic Unit package type. UN Recommendation on Transport of Dangerous Goods, Model Regulations 
     * 
     */
    public final static String s_p_hasOverpackTypeCode = "https://onerecord.iata.org/ns/cargo#hasOverpackTypeCode";
    public final static IRI p_hasOverpackTypeCode = IRI.create(s_p_hasOverpackTypeCode);
    /**
     * Owner code of the ULD in aa, an or na format - owner can be an airline or leasing company
     * 
     */
    public final static String s_p_hasOwnerCode = "https://onerecord.iata.org/ns/cargo#hasOwnerCode";
    public final static IRI p_hasOwnerCode = IRI.create(s_p_hasOwnerCode);
    /**
     * SSCC-18 code for the value of the package mark, company or bar code, free text, pallet code, etc.
     * 
     */
    public final static String s_p_hasPackageIdentifier = "https://onerecord.iata.org/ns/cargo#hasPackageIdentifier";
    public final static IRI p_hasPackageIdentifier = IRI.create(s_p_hasPackageIdentifier);
    /**
     * Reference identifying how the package is marked. Field is hardcode to "SSCC-18", "UPC" or "Other"
     * 
     */
    public final static String s_p_hasPackageMarkCode = "https://onerecord.iata.org/ns/cargo#hasPackageMarkCode";
    public final static IRI p_hasPackageMarkCode = IRI.create(s_p_hasPackageMarkCode);
    /**
     * Packing group, If used must reference I, II or III
     * 
     */
    public final static String s_p_hasPackagingDangerLevelCode = "https://onerecord.iata.org/ns/cargo#hasPackagingDangerLevelCode";
    public final static IRI p_hasPackagingDangerLevelCode = IRI.create(s_p_hasPackagingDangerLevelCode);
    /**
     * The packing instruction number applicable to the UN number / proper shipping name entry. A three-numeric value which may be preceded by the letter Y.  Mandatory field for air transport (Air) 
     * 
     */
    public final static String s_p_hasPackingInstructionNumber = "https://onerecord.iata.org/ns/cargo#hasPackingInstructionNumber";
    public final static IRI p_hasPackingInstructionNumber = IRI.create(s_p_hasPackingInstructionNumber);
    /**
     * Code specifying the document name. (box 1)
     * 
     */
    public final static String s_p_hasPermitTypeCode = "https://onerecord.iata.org/ns/cargo#hasPermitTypeCode";
    public final static IRI p_hasPermitTypeCode = IRI.create(s_p_hasPermitTypeCode);
    /**
     * Description if TypeCode is Other (box 1)
     * 
     */
    public final static String s_p_hasPermitTypeOtherDescription = "https://onerecord.iata.org/ns/cargo#hasPermitTypeOtherDescription";
    public final static IRI p_hasPermitTypeOtherDescription = IRI.create(s_p_hasPermitTypeOtherDescription);
    /**
     * A description of the physical and chemical form of the material.
     * 
     */
    public final static String s_p_hasPhysicalChemicalForm = "https://onerecord.iata.org/ns/cargo#hasPhysicalChemicalForm";
    public final static IRI p_hasPhysicalChemicalForm = IRI.create(s_p_hasPhysicalChemicalForm);
    /**
     * Post Office box number / code
     * 
     */
    public final static String s_p_hasPostOfficeBox = "https://onerecord.iata.org/ns/cargo#hasPostOfficeBox";
    public final static IRI p_hasPostOfficeBox = IRI.create(s_p_hasPostOfficeBox);
    /**
     * Postal / ZIP code
     * 
     */
    public final static String s_p_hasPostalCode = "https://onerecord.iata.org/ns/cargo#hasPostalCode";
    public final static IRI p_hasPostalCode = IRI.create(s_p_hasPostalCode);
    /**
     * Specification of the price e.g. Street, Group, Spot, etc.
     * 
     */
    public final static String s_p_hasPriceSpecification = "https://onerecord.iata.org/ns/cargo#hasPriceSpecification";
    public final static IRI p_hasPriceSpecification = IRI.create(s_p_hasPriceSpecification);
    /**
     * Reference of price specifications
     * 
     */
    public final static String s_p_hasPriceSpecificationRef = "https://onerecord.iata.org/ns/cargo#hasPriceSpecificationRef";
    public final static IRI p_hasPriceSpecificationRef = IRI.create(s_p_hasPriceSpecificationRef);
    /**
     * Carrier's product code
     * 
     */
    public final static String s_p_hasProductCode = "https://onerecord.iata.org/ns/cargo#hasProductCode";
    public final static IRI p_hasProductCode = IRI.create(s_p_hasProductCode);
    /**
     * Carrier's product description
     * 
     */
    public final static String s_p_hasProductDescription = "https://onerecord.iata.org/ns/cargo#hasProductDescription";
    public final static IRI p_hasProductDescription = IRI.create(s_p_hasProductDescription);
    /**
     * Production date
     * 
     */
    public final static String s_p_hasProductionDate = "https://onerecord.iata.org/ns/cargo#hasProductionDate";
    public final static IRI p_hasProductionDate = IRI.create(s_p_hasProductionDate);
    /**
     * The name used to describe the particular article or substance as shown in the UN Model Regulations Dangerous Goods List
     * 
     */
    public final static String s_p_hasProperShippingName = "https://onerecord.iata.org/ns/cargo#hasProperShippingName";
    public final static IRI p_hasProperShippingName = IRI.create(s_p_hasProperShippingName);
    /**
     * String containing the proposed waybill number for the BookingOption
     * 
     */
    public final static String s_p_hasProposedWaybillNumber = "https://onerecord.iata.org/ns/cargo#hasProposedWaybillNumber";
    public final static IRI p_hasProposedWaybillNumber = IRI.create(s_p_hasProposedWaybillNumber);
    /**
     * Most instances of all packed in one will require the addition of the Q value which  1. Applies to air transport only. (Air)  
     * 
     */
    public final static String s_p_hasQValueNumeric = "https://onerecord.iata.org/ns/cargo#hasQValueNumeric";
    public final static IRI p_hasQValueNumeric = IRI.create(s_p_hasQValueNumeric);
    /**
     * Quantity including units (box 11)
     * 
     */
    public final static String s_p_hasQuantityAnimals = "https://onerecord.iata.org/ns/cargo#hasQuantityAnimals";
    public final static IRI p_hasQuantityAnimals = IRI.create(s_p_hasQuantityAnimals);
    /**
     * Number of the Question within the template (alphanumeric)
     * 
     */
    public final static String s_p_hasQuestionNumber = "https://onerecord.iata.org/ns/cargo#hasQuestionNumber";
    public final static IRI p_hasQuestionNumber = IRI.create(s_p_hasQuestionNumber);
    /**
     * Rate class code e.g. Q. Refer to CXML Code List 1.4 Rate Class Codes
     * 
     */
    public final static String s_p_hasRateClassCode = "https://onerecord.iata.org/ns/cargo#hasRateClassCode";
    public final static IRI p_hasRateClassCode = IRI.create(s_p_hasRateClassCode);
    /**
     * IATA 3-letter code of the rate combination point
     * 
     */
    public final static String s_p_hasRateCombinationPoint = "https://onerecord.iata.org/ns/cargo#hasRateCombinationPoint";
    public final static IRI p_hasRateCombinationPoint = IRI.create(s_p_hasRateCombinationPoint);
    /**
     * Used if there is an applicable quantity to the rate (Usually a Time or a Number)
     * 
     */
    public final static String s_p_hasRateQuantity = "https://onerecord.iata.org/ns/cargo#hasRateQuantity";
    public final static IRI p_hasRateQuantity = IRI.create(s_p_hasRateQuantity);
    /**
     * rating type - Refer to CXML Code List 1.44 ULD Charge Codes
     * 
     */
    public final static String s_p_hasRatingType = "https://onerecord.iata.org/ns/cargo#hasRatingType";
    public final static IRI p_hasRatingType = IRI.create(s_p_hasRatingType);
    /**
     * Used to identify if the Ratings are Face, Published or Actual ratings. Expected values are F, A, C.
     * 
     */
    public final static String s_p_hasRatingsType = "https://onerecord.iata.org/ns/cargo#hasRatingsType";
    public final static IRI p_hasRatingsType = IRI.create(s_p_hasRatingsType);
    /**
     * A free text for user to include a reason for correction
     * 
     */
    public final static String s_p_hasReasonForAdjustments = "https://onerecord.iata.org/ns/cargo#hasReasonForAdjustments";
    public final static IRI p_hasReasonForAdjustments = IRI.create(s_p_hasReasonForAdjustments);
    /**
     * Region/ State / Department. Refer ISO 3166-2
     * 
     */
    public final static String s_p_hasRegionCode = "https://onerecord.iata.org/ns/cargo#hasRegionCode";
    public final static IRI p_hasRegionCode = IRI.create(s_p_hasRegionCode);
    /**
     * If no StateCode provided, full name of the region / state / province / canton
     * 
     */
    public final static String s_p_hasRegionName = "https://onerecord.iata.org/ns/cargo#hasRegionName";
    public final static IRI p_hasRegionName = IRI.create(s_p_hasRegionName);
    /**
     * Expiry date 4 digits month/year
     * 
     */
    public final static String s_p_hasRegulatedEntityExpiryDate = "https://onerecord.iata.org/ns/cargo#hasRegulatedEntityExpiryDate";
    public final static IRI p_hasRegulatedEntityExpiryDate = IRI.create(s_p_hasRegulatedEntityExpiryDate);
    /**
     * Remarks or Supplement Information
     * 
     */
    public final static String s_p_hasRemarks = "https://onerecord.iata.org/ns/cargo#hasRemarks";
    public final static IRI p_hasRemarks = IRI.create(s_p_hasRemarks);
    /**
     * Reportable quantities, To and from the USA only
     * 
     */
    public final static String s_p_hasReportableQuantity = "https://onerecord.iata.org/ns/cargo#hasReportableQuantity";
    public final static IRI p_hasReportableQuantity = IRI.create(s_p_hasReportableQuantity);
    /**
     * Requested handling information for quote request purposes only
     * 
     */
    public final static String s_p_hasRequestedHandling = "https://onerecord.iata.org/ns/cargo#hasRequestedHandling";
    public final static IRI p_hasRequestedHandling = IRI.create(s_p_hasRequestedHandling);
    /**
     * Indicates if RFS (Road Feeder Services) is included (requested or proposed)
     * 
     */
    public final static String s_p_hasRoadFeederService = "https://onerecord.iata.org/ns/cargo#hasRoadFeederService";
    public final static IRI p_hasRoadFeederService = IRI.create(s_p_hasRoadFeederService);
    /**
     * Role fo the Company in the context. Can refer to Code List 1.36 in the CXML Toolkit
     * 
     */
    public final static String s_p_hasRole = "https://onerecord.iata.org/ns/cargo#hasRole";
    public final static IRI p_hasRole = IRI.create(s_p_hasRole);
    /**
     * Salutation 
     * 
     */
    public final static String s_p_hasSalutation = "https://onerecord.iata.org/ns/cargo#hasSalutation";
    public final static IRI p_hasSalutation = IRI.create(s_p_hasSalutation);
    /**
     * Screening methods which have been used to secure the cargo
     * PHS – Physical Inspection and/or hand search
     * VCK - Visual check
     * XRY- X-ray equipment
     * EDS - Explosive detection system
     * EDD - Explosive detection dogs
     * ETD - Explosive trace detection equipment - particles or vapor
     * CMD - Cargo metal detection
     * AOM - Subjected to any other means: this entry should be followed by free text specifying what other mean was used to secure the cargo
     * 
     */
    public final static String s_p_hasScreeningMethods = "https://onerecord.iata.org/ns/cargo#hasScreeningMethods";
    public final static IRI p_hasScreeningMethods = IRI.create(s_p_hasScreeningMethods);
    /**
     * Seal identifier
     * 
     */
    public final static String s_p_hasSeal = "https://onerecord.iata.org/ns/cargo#hasSeal";
    public final static IRI p_hasSeal = IRI.create(s_p_hasSeal);
    /**
     * ULD seal number if applicable
     * 
     */
    public final static String s_p_hasSealNumber = "https://onerecord.iata.org/ns/cargo#hasSealNumber";
    public final static IRI p_hasSealNumber = IRI.create(s_p_hasSealNumber);
    /**
     * Security Stamp ID
     * 
     */
    public final static String s_p_hasSecurityStampIdentifier = "https://onerecord.iata.org/ns/cargo#hasSecurityStampIdentifier";
    public final static IRI p_hasSecurityStampIdentifier = IRI.create(s_p_hasSecurityStampIdentifier);
    /**
     * Security status indicator (CXML 1.103) - e.g. SPX- Cargo Secure for Passenger and All-Cargo Aircraft 
     * 
     */
    public final static String s_p_hasSecurityStatus = "https://onerecord.iata.org/ns/cargo#hasSecurityStatus";
    public final static IRI p_hasSecurityStatus = IRI.create(s_p_hasSecurityStatus);
    /**
     * Short text to detail sequence number (alphanumeric)
     * 
     */
    public final static String s_p_hasSequenceNumber = "https://onerecord.iata.org/ns/cargo#hasSequenceNumber";
    public final static IRI p_hasSequenceNumber = IRI.create(s_p_hasSequenceNumber);
    /**
     * Serial number that allows to uniquely identify the object
     * 
     */
    public final static String s_p_hasSerialNumber = "https://onerecord.iata.org/ns/cargo#hasSerialNumber";
    public final static IRI p_hasSerialNumber = IRI.create(s_p_hasSerialNumber);
    /**
     * Designator of serviceablity condition e.g. SER or DAM 
     * 
     */
    public final static String s_p_hasServiceabilityCode = "https://onerecord.iata.org/ns/cargo#hasServiceabilityCode";
    public final static IRI p_hasServiceabilityCode = IRI.create(s_p_hasServiceabilityCode);
    /**
     * Indicate the secruty state of the shipment, screened or not
     * 
     */
    public final static String s_p_hasShipmentSecurityStatus = "https://onerecord.iata.org/ns/cargo#hasShipmentSecurityStatus";
    public final static IRI p_hasShipmentSecurityStatus = IRI.create(s_p_hasShipmentSecurityStatus);
    /**
     * Contains the shipper's declaration to comply with the regulations text note. Free text . This field is mandatory for air (Air)
     * 
     */
    public final static String s_p_hasShipperDeclarationText = "https://onerecord.iata.org/ns/cargo#hasShipperDeclarationText";
    public final static IRI p_hasShipperDeclarationText = IRI.create(s_p_hasShipperDeclarationText);
    /**
     * Shipping marks
     * 
     */
    public final static String s_p_hasShippingMarks = "https://onerecord.iata.org/ns/cargo#hasShippingMarks";
    public final static IRI p_hasShippingMarks = IRI.create(s_p_hasShippingMarks);
    /**
     * Short name of the Organization if any
     * 
     */
    public final static String s_p_hasShortName = "https://onerecord.iata.org/ns/cargo#hasShortName";
    public final static IRI p_hasShortName = IRI.create(s_p_hasShortName);
    /**
     * Short text of the Question
     * 
     */
    public final static String s_p_hasShortText = "https://onerecord.iata.org/ns/cargo#hasShortText";
    public final static IRI p_hasShortText = IRI.create(s_p_hasShortText);
    /**
     * Role of the signatory with regards to the ePermit: Applicant, Permit issuer, Issuing Authority or Examining authority
     * 
     */
    public final static String s_p_hasSignatoryRole = "https://onerecord.iata.org/ns/cargo#hasSignatoryRole";
    public final static IRI p_hasSignatoryRole = IRI.create(s_p_hasSignatoryRole);
    /**
     * Date and time of the signature
     * 
     */
    public final static String s_p_hasSignatureDate = "https://onerecord.iata.org/ns/cargo#hasSignatureDate";
    public final static IRI p_hasSignatureDate = IRI.create(s_p_hasSignatureDate);
    /**
     * Signatory signature authentication text
     * 
     */
    public final static String s_p_hasSignatureStatement = "https://onerecord.iata.org/ns/cargo#hasSignatureStatement";
    public final static IRI p_hasSignatureStatement = IRI.create(s_p_hasSignatureStatement);
    /**
     * Code specifying a type of government action such as inspection, detention, fumigation, security.
     * 
     */
    public final static String s_p_hasSignatureTypeCode = "https://onerecord.iata.org/ns/cargo#hasSignatureTypeCode";
    public final static IRI p_hasSignatureTypeCode = IRI.create(s_p_hasSignatureTypeCode);
    /**
     * Shipper's Load And Count  ( total contained piece count as provided by shipper)
     * 
     */
    public final static String s_p_hasSlac = "https://onerecord.iata.org/ns/cargo#hasSlac";
    public final static IRI p_hasSlac = IRI.create(s_p_hasSlac);
    /**
     * Special conditions (box 5)
     * 
     */
    public final static String s_p_hasSpecialConditions = "https://onerecord.iata.org/ns/cargo#hasSpecialConditions";
    public final static IRI p_hasSpecialConditions = IRI.create(s_p_hasSpecialConditions);
    /**
     * For Air Mode: Special Provision may show a single, double or triple digit number preceded by the letter A, against appropriate entries in the List of Dangerous Goods
     * 
     */
    public final static String s_p_hasSpecialProvisionIdentifier = "https://onerecord.iata.org/ns/cargo#hasSpecialProvisionIdentifier";
    public final static IRI p_hasSpecialProvisionIdentifier = IRI.create(s_p_hasSpecialProvisionIdentifier);
    /**
     * Species common name (box 8)
     * 
     */
    public final static String s_p_hasSpeciesCommonName = "https://onerecord.iata.org/ns/cargo#hasSpeciesCommonName";
    public final static IRI p_hasSpeciesCommonName = IRI.create(s_p_hasSpeciesCommonName);
    /**
     * Species scientific name (box 7)
     * 
     */
    public final static String s_p_hasSpeciesScientificName = "https://onerecord.iata.org/ns/cargo#hasSpeciesScientificName";
    public final static IRI p_hasSpeciesScientificName = IRI.create(s_p_hasSpeciesScientificName);
    /**
     * Specific commodity code linked to commodity
     * 
     */
    public final static String s_p_hasSpecificCommodityCode = "https://onerecord.iata.org/ns/cargo#hasSpecificCommodityCode";
    public final static IRI p_hasSpecificCommodityCode = IRI.create(s_p_hasSpecificCommodityCode);
    /**
     * Specific commodity rates linked to commodity
     * 
     */
    public final static String s_p_hasSpecificCommodityRate = "https://onerecord.iata.org/ns/cargo#hasSpecificCommodityRate";
    public final static IRI p_hasSpecificCommodityRate = IRI.create(s_p_hasSpecificCommodityRate);
    /**
     * Description of specimens, including age and sex if LA (box 9)
     * 
     */
    public final static String s_p_hasSpecimenDescription = "https://onerecord.iata.org/ns/cargo#hasSpecimenDescription";
    public final static IRI p_hasSpecimenDescription = IRI.create(s_p_hasSpecimenDescription);
    /**
     * Description of specimens, CITES type code (box 9)
     * 
     */
    public final static String s_p_hasSpecimenTypeCode = "https://onerecord.iata.org/ns/cargo#hasSpecimenTypeCode";
    public final static IRI p_hasSpecimenTypeCode = IRI.create(s_p_hasSpecimenTypeCode);
    /**
     * Short text stating the exact place of storage
     * 
     */
    public final static String s_p_hasStoragePlaceIdentifier = "https://onerecord.iata.org/ns/cargo#hasStoragePlaceIdentifier";
    public final static IRI p_hasStoragePlaceIdentifier = IRI.create(s_p_hasStoragePlaceIdentifier);
    /**
     * Short text holding the process number if necessary
     * 
     */
    public final static String s_p_hasStoringIdentifier = "https://onerecord.iata.org/ns/cargo#hasStoringIdentifier";
    public final static IRI p_hasStoringIdentifier = IRI.create(s_p_hasStoringIdentifier);
    /**
     * Street address including street name, street number, building number, apartment etc
     * 
     */
    public final static String s_p_hasStreetAddress = "https://onerecord.iata.org/ns/cargo#hasStreetAddress";
    public final static IRI p_hasStreetAddress = IRI.create(s_p_hasStreetAddress);
    /**
     * Information Identifier. Code identifying a piece of information/entity e.g. "IMP" for import, "EXP" for export, "AGT" for Agent, "ISS" for The Regulated Agent Issuing the Security Status for a Consignment etc.
     * Condition: At least one of the three elements (Country Code, Information Identifier or Customs, Security and Regulatory Control Information Identifier) must be completed
     * 
     */
    public final static String s_p_hasSubjectCode = "https://onerecord.iata.org/ns/cargo#hasSubjectCode";
    public final static IRI p_hasSubjectCode = IRI.create(s_p_hasSubjectCode);
    /**
     * Additional information that may be added in addition to the proper shipping name to more fully describe the goods or to identify a particular condition
     * 
     */
    public final static String s_p_hasSupplementaryInfoPrefix = "https://onerecord.iata.org/ns/cargo#hasSupplementaryInfoPrefix";
    public final static IRI p_hasSupplementaryInfoPrefix = IRI.create(s_p_hasSupplementaryInfoPrefix);
    /**
     * Additional information that may be added in addition to the proper shipping to more fully describe the goods or to identify a particular condition
     * 
     */
    public final static String s_p_hasSupplementaryInfoSuffix = "https://onerecord.iata.org/ns/cargo#hasSupplementaryInfoSuffix";
    public final static IRI p_hasSupplementaryInfoSuffix = IRI.create(s_p_hasSupplementaryInfoSuffix);
    /**
     * This is additional chemical name(s) required for some proper shipping names. When added the technical must be shown in parentheses immediately following the proper shipping name. 
     * 
     */
    public final static String s_p_hasTechnicalName = "https://onerecord.iata.org/ns/cargo#hasTechnicalName";
    public final static IRI p_hasTechnicalName = IRI.create(s_p_hasTechnicalName);
    /**
     * Purpose of the template
     * 
     */
    public final static String s_p_hasTemplatePurpose = "https://onerecord.iata.org/ns/cargo#hasTemplatePurpose";
    public final static IRI p_hasTemplatePurpose = IRI.create(s_p_hasTemplatePurpose);
    /**
     * DateTime on which the CheckTemplate was released
     * 
     */
    public final static String s_p_hasTemplateReleaseDate = "https://onerecord.iata.org/ns/cargo#hasTemplateReleaseDate";
    public final static IRI p_hasTemplateReleaseDate = IRI.create(s_p_hasTemplateReleaseDate);
    /**
     * Version of the template
     * 
     */
    public final static String s_p_hasTemplateVersion = "https://onerecord.iata.org/ns/cargo#hasTemplateVersion";
    public final static IRI p_hasTemplateVersion = IRI.create(s_p_hasTemplateVersion);
    /**
     * Textual value filled on use context (eg. characteristic colour, contactDetail mail adress, etc.)
     * 
     */
    public final static String s_p_hasTextualValue = "https://onerecord.iata.org/ns/cargo#hasTextualValue";
    public final static IRI p_hasTextualValue = IRI.create(s_p_hasTextualValue);
    /**
     * Time of availability of the shipment as per CargoIQ definition
     * 
     */
    public final static String s_p_hasTimeOfAvailability = "https://onerecord.iata.org/ns/cargo#hasTimeOfAvailability";
    public final static IRI p_hasTimeOfAvailability = IRI.create(s_p_hasTimeOfAvailability);
    /**
     * Timestamp (date and time) of the movement time. If the movement time is recorded asynchronously, the timestamp should reflect the actual time, not when the data was created.
     * 
     */
    public final static String s_p_hasTimestamp = "https://onerecord.iata.org/ns/cargo#hasTimestamp";
    public final static IRI p_hasTimestamp = IRI.create(s_p_hasTimestamp);
    /**
     * Total Piece Count
     * 
     */
    public final static String s_p_hasTotalPieceCount = "https://onerecord.iata.org/ns/cargo#hasTotalPieceCount";
    public final static IRI p_hasTotalPieceCount = IRI.create(s_p_hasTotalPieceCount);
    /**
     * Total SLAC of all piece groups 
     * 
     */
    public final static String s_p_hasTotalSlac = "https://onerecord.iata.org/ns/cargo#hasTotalSlac";
    public final static IRI p_hasTotalSlac = IRI.create(s_p_hasTotalSlac);
    /**
     * Purpose of the transaction in free text (box 5a)
     * 
     */
    public final static String s_p_hasTransactionPurpose = "https://onerecord.iata.org/ns/cargo#hasTransactionPurpose";
    public final static IRI p_hasTransactionPurpose = IRI.create(s_p_hasTransactionPurpose);
    /**
     * Code indicating the purpose of the transaction (box 5a)
     * 
     */
    public final static String s_p_hasTransactionPurposeCode = "https://onerecord.iata.org/ns/cargo#hasTransactionPurposeCode";
    public final static IRI p_hasTransactionPurposeCode = IRI.create(s_p_hasTransactionPurposeCode);
    /**
     * Total transit time as per CargoIQ definition, expressed as a duration
     * 
     */
    public final static String s_p_hasTransitTime = "https://onerecord.iata.org/ns/cargo#hasTransitTime";
    public final static IRI p_hasTransitTime = IRI.create(s_p_hasTransitTime);
    /**
     * Reference to the Air Waybill or other transport contract document (box 15)
     * 
     */
    public final static String s_p_hasTransportContractReference = "https://onerecord.iata.org/ns/cargo#hasTransportContractReference";
    public final static IRI p_hasTransportContractReference = IRI.create(s_p_hasTransportContractReference);
    /**
     * Code specifying the transport document name (box 15)
     * 
     */
    public final static String s_p_hasTransportContractTypeCode = "https://onerecord.iata.org/ns/cargo#hasTransportContractTypeCode";
    public final static IRI p_hasTransportContractTypeCode = IRI.create(s_p_hasTransportContractTypeCode);
    /**
     * Airline flight number, or rail/truck/maritime line id
     * 
     */
    public final static String s_p_hasTransportIdentifier = "https://onerecord.iata.org/ns/cargo#hasTransportIdentifier";
    public final static IRI p_hasTransportIdentifier = IRI.create(s_p_hasTransportIdentifier);
    /**
     * When part of the Request it refers to the preferred Transport ID from the customer. When part of the BookingOption (offer or actual booking) it refers to the expected Transport ID or flight
     * 
     */
    public final static String s_p_hasTransportIdentifierPreference = "https://onerecord.iata.org/ns/cargo#hasTransportIdentifierPreference";
    public final static IRI p_hasTransportIdentifierPreference = IRI.create(s_p_hasTransportIdentifierPreference);
    /**
     * Radioactive Transport-Index value of the package or all packed in one. Conditionally mandator and applies to categories II-Yellow and III-Yellow only; field only contains the value, if printed, TI must be added as a prefix to the value  to be printed in the Packing Instructions column
     * 
     */
    public final static String s_p_hasTransportIndexNumeric = "https://onerecord.iata.org/ns/cargo#hasTransportIndexNumeric";
    public final static IRI p_hasTransportIndexNumeric = IRI.create(s_p_hasTransportIndexNumeric);
    /**
     * Packaging type identifier as per UNECE Rec 21 Annex V and VI e.g. 1A - Drum, steel - Packaging material code. Identifies the Logistic Unit package type. UN Recommendation on Transport of Dangerous Goods, Model Regulations 
     * 
     */
    public final static String s_p_hasTypeCode = "https://onerecord.iata.org/ns/cargo#hasTypeCode";
    public final static IRI p_hasTypeCode = IRI.create(s_p_hasTypeCode);
    /**
     * Serial number that allows to uniquely identify the ULD
     * 
     */
    public final static String s_p_hasULDSerialNumber = "https://onerecord.iata.org/ns/cargo#hasULDSerialNumber";
    public final static IRI p_hasULDSerialNumber = IRI.create(s_p_hasULDSerialNumber);
    /**
     * Standard Unit Load Device type code e.g. AKE - Certified Container - Contoured. Refer to IATA ULD Technical Manual
     * 
     */
    public final static String s_p_hasULDTypeCode = "https://onerecord.iata.org/ns/cargo#hasULDTypeCode";
    public final static IRI p_hasULDTypeCode = IRI.create(s_p_hasULDTypeCode);
    /**
     * Reference identifying the United Nations Dangerous Goods serial number assigned within the UN to substances and articles contained in a list of the dangerous goods most commonly carried. e.g. 1189 - Ethylene glycol monomethyl ether acetate
     * 
     */
    public final static String s_p_hasUnNumber = "https://onerecord.iata.org/ns/cargo#hasUnNumber";
    public final static IRI p_hasUnNumber = IRI.create(s_p_hasUnNumber);
    /**
     * Manufacturer's unique product identifier
     * 
     */
    public final static String s_p_hasUniqueIdentifier = "https://onerecord.iata.org/ns/cargo#hasUniqueIdentifier";
    public final static IRI p_hasUniqueIdentifier = IRI.create(s_p_hasUniqueIdentifier);
    /**
     * Unique Piece Identifier (UPID) of the piece. Refer IATA Recommended Practice 1689
     * 
     */
    public final static String s_p_hasUpid = "https://onerecord.iata.org/ns/cargo#hasUpid";
    public final static IRI p_hasUpid = IRI.create(s_p_hasUpid);
    /**
     * total number of specimens exported in the current calendar year and the current annuela quota for the species concerned (box 11a)
     * 
     */
    public final static String s_p_hasUsedToDateQuotaQuantity = "https://onerecord.iata.org/ns/cargo#hasUsedToDateQuotaQuantity";
    public final static IRI p_hasUsedToDateQuotaQuantity = IRI.create(s_p_hasUsedToDateQuotaQuantity);
    /**
     * Unit of measurement/ unit of account e.g. CMT - Centimetre,  LTR - Litre (1 DM3), KGM - Kilogram, CHF - Swiss Franc
     * 
     */
    public final static String s_p_hasValueUnit = "https://onerecord.iata.org/ns/cargo#hasValueUnit";
    public final static IRI p_hasValueUnit = IRI.create(s_p_hasValueUnit);
    /**
     * Indicate if subject to VAT (boolean)
     * 
     */
    public final static String s_p_hasVatIndicator = "https://onerecord.iata.org/ns/cargo#hasVatIndicator";
    public final static IRI p_hasVatIndicator = IRI.create(s_p_hasVatIndicator);
    /**
     * Vehicle identification - e.g. aircraft registration number
     * 
     */
    public final static String s_p_hasVehicleRegistration = "https://onerecord.iata.org/ns/cargo#hasVehicleRegistration";
    public final static IRI p_hasVehicleRegistration = IRI.create(s_p_hasVehicleRegistration);
    /**
     * Size of the vehicle - free text
     * 
     */
    public final static String s_p_hasVehicleSize = "https://onerecord.iata.org/ns/cargo#hasVehicleSize";
    public final static IRI p_hasVehicleSize = IRI.create(s_p_hasVehicleSize);
    /**
     * House or Master Waybill unique identifier
     * 
     */
    public final static String s_p_hasWaybillNumber = "https://onerecord.iata.org/ns/cargo#hasWaybillNumber";
    public final static IRI p_hasWaybillNumber = IRI.create(s_p_hasWaybillNumber);
    /**
     * Prefix used for the Waybill Number. Refer to IATA Airlines Codes
     * 
     */
    public final static String s_p_hasWaybillPrefix = "https://onerecord.iata.org/ns/cargo#hasWaybillPrefix";
    public final static IRI p_hasWaybillPrefix = IRI.create(s_p_hasWaybillPrefix);
    /**
     * payment for the Weight/Valuation will be made at origin (prepaid) or at destination (collect)
     * 
     */
    public final static String s_p_hasWeightValuation = "https://onerecord.iata.org/ns/cargo#hasWeightValuation";
    public final static IRI p_hasWeightValuation = IRI.create(s_p_hasWeightValuation);
    /**
     * A statement identifying that the dangerous goods listed above are all contained in the same outer packaging. Takes the form All packed in one aaaa (description of packaging type) x nn (number of packages). Applies to air transport only. (Air) 
     * 
     */
    public final static String s_p_isAllPackedInOne = "https://onerecord.iata.org/ns/cargo#isAllPackedInOne";
    public final static IRI p_isAllPackedInOne = IRI.create(s_p_isAllPackedInOne);
    /**
     * Reference of the Logistic Object to which the Connected Device is linked (URI)
     * 
     */
    public final static String s_p_isAssociatedWithObject = "https://onerecord.iata.org/ns/cargo#isAssociatedWithObject";
    public final static IRI p_isAssociatedWithObject = IRI.create(s_p_isAssociatedWithObject);
    /**
     * Date and time when the security status was issued
     * 
     */
    public final static String s_p_isIssuedOn = "https://onerecord.iata.org/ns/cargo#isIssuedOn";
    public final static IRI p_isIssuedOn = IRI.create(s_p_isIssuedOn);
    /**
     * A notation that the material is low dispersible radioactive material.
     * 
     */
    public final static String s_p_isLowDispersible = "https://onerecord.iata.org/ns/cargo#isLowDispersible";
    public final static IRI p_isLowDispersible = IRI.create(s_p_isLowDispersible);
    /**
     * Enum stating the type of the Action
     * 
     */
    public final static String s_p_isOfActionTimeType = "https://onerecord.iata.org/ns/cargo#isOfActionTimeType";
    public final static IRI p_isOfActionTimeType = IRI.create(s_p_isOfActionTimeType);
    /**
     * Product characteristics code - e.g. CLR - Color. Not restricted to a list.
     * 
     */
    public final static String s_p_isOfCharacteristicType = "https://onerecord.iata.org/ns/cargo#isOfCharacteristicType";
    public final static IRI p_isOfCharacteristicType = IRI.create(s_p_isOfCharacteristicType);
    /**
     * Enum stating whether the CompositionAction describes build-up or break-down
     * 
     */
    public final static String s_p_isOfCompositionType = "https://onerecord.iata.org/ns/cargo#isOfCompositionType";
    public final static IRI p_isOfCompositionType = IRI.create(s_p_isOfCompositionType);
    /**
     * Type of the contact details, e.g. Phone number, Mail address
     * 
     */
    public final static String s_p_isOfContactType = "https://onerecord.iata.org/ns/cargo#isOfContactType";
    public final static IRI p_isOfContactType = IRI.create(s_p_isOfContactType);
    /**
     * Commercial denomination of the device
     * 
     */
    public final static String s_p_isOfDeviceModel = "https://onerecord.iata.org/ns/cargo#isOfDeviceModel";
    public final static IRI p_isOfDeviceModel = IRI.create(s_p_isOfDeviceModel);
    /**
     * Type of the referenced document . Can refer UNEDIFACT 1001  e.g. 740 - Air Waybill, but not limited to
     * 
     */
    public final static String s_p_isOfDocumentType = "https://onerecord.iata.org/ns/cargo#isOfDocumentType";
    public final static IRI p_isOfDocumentType = IRI.create(s_p_isOfDocumentType);
    /**
     * Indicates type of event e.g.  Scheduled, Estimated, Actual
     * 
     */
    public final static String s_p_isOfEventTimeType = "https://onerecord.iata.org/ns/cargo#isOfEventTimeType";
    public final static IRI p_isOfEventTimeType = IRI.create(s_p_isOfEventTimeType);
    /**
     * Reference identifying the type of standard code to be used for the Commodity Classification (Brussels Tariff Nomenclature, EU Harmonized System Code, UN Standard International Trade Classification). Mandatory if the commodity code is more than 6 digits
     * 
     */
    public final static String s_p_isOfHSType = "https://onerecord.iata.org/ns/cargo#isOfHSType";
    public final static IRI p_isOfHSType = IRI.create(s_p_isOfHSType);
    /**
     * Refers to the type of handling information provided: Special Service Request (SSR), Special Handling Codes (SPH) or Other Service Information (OSI)
     * 
     */
    public final static String s_p_isOfHandlingInstructionsType = "https://onerecord.iata.org/ns/cargo#isOfHandlingInstructionsType";
    public final static IRI p_isOfHandlingInstructionsType = IRI.create(s_p_isOfHandlingInstructionsType);
    /**
     * Service Type code linked top the Service Type.
     * Refers to Code List 1.14 or 1.16 if service type is Special Handling.
     * 
     */
    public final static String s_p_isOfHandlingInstructionsTypeCode = "https://onerecord.iata.org/ns/cargo#isOfHandlingInstructionsTypeCode";
    public final static IRI p_isOfHandlingInstructionsTypeCode = IRI.create(s_p_isOfHandlingInstructionsTypeCode);
    /**
     * Enum stating whether the LoadingAction describes onloading or offloading
     * 
     */
    public final static String s_p_isOfLoadingType = "https://onerecord.iata.org/ns/cargo#isOfLoadingType";
    public final static IRI p_isOfLoadingType = IRI.create(s_p_isOfLoadingType);
    /**
     * Location type - e.g. Airport, Freight terminal, Rail station, Seaport, etc
     * 
     */
    public final static String s_p_isOfLocationType = "https://onerecord.iata.org/ns/cargo#isOfLocationType";
    public final static IRI p_isOfLocationType = IRI.create(s_p_isOfLocationType);
    /**
     * Model of the LoadingMaterial if any
     * 
     */
    public final static String s_p_isOfMaterialModel = "https://onerecord.iata.org/ns/cargo#isOfMaterialModel";
    public final static IRI p_isOfMaterialModel = IRI.create(s_p_isOfMaterialModel);
    /**
     * Type of the LoadingMaterial
     * 
     */
    public final static String s_p_isOfMaterialType = "https://onerecord.iata.org/ns/cargo#isOfMaterialType";
    public final static IRI p_isOfMaterialType = IRI.create(s_p_isOfMaterialType);
    /**
     * Enum stating whether the MovementAction desribes arrival, depature or an unplanned stop
     * 
     */
    public final static String s_p_isOfMovementType = "https://onerecord.iata.org/ns/cargo#isOfMovementType";
    public final static IRI p_isOfMovementType = IRI.create(s_p_isOfMovementType);
    /**
     * Party type, should be one of the following RA - Regulated Agent, KC - Known Consignor, AO - Aircraft Operator, RC - Regulated Carrier
     * 
     */
    public final static String s_p_isOfRegulatedAgentCategory = "https://onerecord.iata.org/ns/cargo#isOfRegulatedAgentCategory";
    public final static IRI p_isOfRegulatedAgentCategory = IRI.create(s_p_isOfRegulatedAgentCategory);
    /**
     * Type of sensor as described in Interactive Cargo Recommended Practice
     * 
     */
    public final static String s_p_isOfSensorType = "https://onerecord.iata.org/ns/cargo#isOfSensorType";
    public final static IRI p_isOfSensorType = IRI.create(s_p_isOfSensorType);
    /**
     * Enum stating whether the StoringAction describes the store-in or the store-out
     * 
     */
    public final static String s_p_isOfStoringType = "https://onerecord.iata.org/ns/cargo#isOfStoringType";
    public final static IRI p_isOfStoringType = IRI.create(s_p_isOfStoringType);
    /**
     * The type of time can be Actual, Estimated ot Scheduled
     * 
     */
    public final static String s_p_isOfTimeType = "https://onerecord.iata.org/ns/cargo#isOfTimeType";
    public final static IRI p_isOfTimeType = IRI.create(s_p_isOfTimeType);
    /**
     * Model or make of the vehicle (e.g. A330-300)
     * 
     */
    public final static String s_p_isOfVehicleModel = "https://onerecord.iata.org/ns/cargo#isOfVehicleModel";
    public final static IRI p_isOfVehicleModel = IRI.create(s_p_isOfVehicleModel);
    /**
     * Vehicle or container type. Refer UNECE28, e.g. 4.00.0 - Aircraft, type unknown.For Air refer to IATA Standard Schedules Information Manua in section ATA/IATA Aircraft Types
     * 
     */
    public final static String s_p_isOfVehicleType = "https://onerecord.iata.org/ns/cargo#isOfVehicleType";
    public final static IRI p_isOfVehicleType = IRI.create(s_p_isOfVehicleType);
    /**
     * Type of the Waybill: House, Direct or Master
     * 
     */
    public final static String s_p_isOfWaybillType = "https://onerecord.iata.org/ns/cargo#isOfWaybillType";
    public final static IRI p_isOfWaybillType = IRI.create(s_p_isOfWaybillType);
    /**
     * Overpack indicator 
     * 
     */
    public final static String s_p_isOverpack = "https://onerecord.iata.org/ns/cargo#isOverpack";
    public final static IRI p_isOverpack = IRI.create(s_p_isOverpack);
    /**
     * Section of the CheckTemplate this Question is part of
     * 
     */
    public final static String s_p_isPartOfSection = "https://onerecord.iata.org/ns/cargo#isPartOfSection";
    public final static IRI p_isPartOfSection = IRI.create(s_p_isPartOfSection);
    /**
     * Boolean indicating whether the Check was passed
     * 
     */
    public final static String s_p_isPassed = "https://onerecord.iata.org/ns/cargo#isPassed";
    public final static IRI p_isPassed = IRI.create(s_p_isPassed);
    /**
     * Indicates if the offer is a perfect match to the quote request (boolean)
     * 
     */
    public final static String s_p_isPerfectMatch = "https://onerecord.iata.org/ns/cargo#isPerfectMatch";
    public final static IRI p_isPerfectMatch = IRI.create(s_p_isPerfectMatch);
    /**
     * payment of Other Charges will be made at origin (prepaid) or at destination (collect)
     * 
     */
    public final static String s_p_isPrepaidOrCollect = "https://onerecord.iata.org/ns/cargo#isPrepaidOrCollect";
    public final static IRI p_isPrepaidOrCollect = IRI.create(s_p_isPrepaidOrCollect);
    /**
     * Indicator whether a logistics object is a skeleton object
     * 
     */
    public final static String s_p_isSkeleton = "https://onerecord.iata.org/ns/cargo#isSkeleton";
    public final static IRI p_isSkeleton = IRI.create(s_p_isSkeleton);
    /**
     * A notation that the material is special form
     * 
     */
    public final static String s_p_isSpecialForm = "https://onerecord.iata.org/ns/cargo#isSpecialForm";
    public final static IRI p_isSpecialForm = IRI.create(s_p_isSpecialForm);
    /**
     * Stackable indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_isStackable = "https://onerecord.iata.org/ns/cargo#isStackable";
    public final static IRI p_isStackable = IRI.create(s_p_isStackable);
    /**
     * Turnable indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_isTurnable = "https://onerecord.iata.org/ns/cargo#isTurnable";
    public final static IRI p_isTurnable = IRI.create(s_p_isTurnable);
    /**
     * Validity start date based on usage context
     * 
     */
    public final static String s_p_isValidFrom = "https://onerecord.iata.org/ns/cargo#isValidFrom";
    public final static IRI p_isValidFrom = IRI.create(s_p_isValidFrom);
    /**
     * Validity end date (date of expiry) based on usage context
     * 
     */
    public final static String s_p_isValidTo = "https://onerecord.iata.org/ns/cargo#isValidTo";
    public final static IRI p_isValidTo = IRI.create(s_p_isValidTo);
    /**
     * Name of the CO2 calculation method
     * 
     */
    public final static String s_p_usesCalculationMethod = "https://onerecord.iata.org/ns/cargo#usesCalculationMethod";
    public final static IRI p_usesCalculationMethod = IRI.create(s_p_usesCalculationMethod);
    /**
     * Version used for the calculation
     * 
     */
    public final static String s_p_usesCalculationMethodVersion = "https://onerecord.iata.org/ns/cargo#usesCalculationMethodVersion";
    public final static IRI p_usesCalculationMethodVersion = IRI.create(s_p_usesCalculationMethodVersion);
    public final static String s_p_description = "http://purl.org/dc/elements/1.1/description";
    public final static IRI p_description = IRI.create(s_p_description);
    public final static String s_p_title = "http://purl.org/dc/elements/1.1/title";
    public final static IRI p_title = IRI.create(s_p_title);
    public final static String s_p__abstract = "http://purl.org/dc/terms/abstract";
    public final static IRI p__abstract = IRI.create(s_p__abstract);
    public final static String s_p_modified = "http://purl.org/dc/terms/modified";
    public final static IRI p_modified = IRI.create(s_p_modified);
    public final static String s_p_title_A = "http://purl.org/dc/terms/title";
    public final static IRI p_title_A = IRI.create(s_p_title_A);
    public final static String s_p_comment = "http://www.w3.org/2000/01/rdf-schema#comment";
    public final static IRI p_comment = IRI.create(s_p_comment);
    public final static String s_p_label = "http://www.w3.org/2000/01/rdf-schema#label";
    public final static IRI p_label = IRI.create(s_p_label);
    public final static String s_p_deprecated = "http://www.w3.org/2002/07/owl#deprecated";
    public final static IRI p_deprecated = IRI.create(s_p_deprecated);
    public final static String s_p_maxCardinality = "http://www.w3.org/2002/07/owl#maxCardinality";
    public final static IRI p_maxCardinality = IRI.create(s_p_maxCardinality);
    public final static String s_p_minCardinality = "http://www.w3.org/2002/07/owl#minCardinality";
    public final static IRI p_minCardinality = IRI.create(s_p_minCardinality);
    public final static String s_p_versionInfo = "http://www.w3.org/2002/07/owl#versionInfo";
    public final static IRI p_versionInfo = IRI.create(s_p_versionInfo);

}
