
package org.iata.cargo.model;

import java.io.Serializable;
import java.util.Set;
import cz.cvut.kbss.jopa.model.annotations.OWLClass;
import cz.cvut.kbss.jopa.model.annotations.OWLObjectProperty;
import org.iata.cargo.Vocabulary;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * Superclass: LogisticsService is a sequence of Activities provided by one Party to another
 * 
 * This class was generated by OWL2Java 0.20.2
 * 
 */
@OWLClass(iri = Vocabulary.s_c_LogisticsService)
public class LogisticsService
    extends LogisticsObject
    implements Serializable
{

    /**
     * Information about contacts
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_hasContactDetail)
@JsonProperty(Vocabulary.s_p_hasContactDetail)
    protected Set<ContactDetail> hasContactDetail;
    /**
     * References to Actors (Person, NonHumanActor) acting as contacts
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_hasContactPerson)
@JsonProperty(Vocabulary.s_p_hasContactPerson)
    protected Set<Person> hasContactPerson;
    /**
     * Information about the Activities that are part of the Service and their sequence
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_hasSequencedActivity)
@JsonProperty(Vocabulary.s_p_hasSequencedActivity)
    protected Set<ActivitySequence> hasSequencedActivity;

    public void setHasContactDetail(Set<ContactDetail> hasContactDetail) {
        this.hasContactDetail = hasContactDetail;
    }

    public Set<ContactDetail> getHasContactDetail() {
        return hasContactDetail;
    }

    public void setHasContactPerson(Set<Person> hasContactPerson) {
        this.hasContactPerson = hasContactPerson;
    }

    public Set<Person> getHasContactPerson() {
        return hasContactPerson;
    }

    public void setHasSequencedActivity(Set<ActivitySequence> hasSequencedActivity) {
        this.hasSequencedActivity = hasSequencedActivity;
    }

    public Set<ActivitySequence> getHasSequencedActivity() {
        return hasSequencedActivity;
    }

}
